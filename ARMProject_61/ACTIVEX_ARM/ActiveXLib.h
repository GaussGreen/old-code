
//	
//		CAUTION 
//
//		This file is included by 
//			
//			- the ActiveXLib static Library , with the actual implementation within the 
//				ActiveXModule class.
//
//			- the ARMFILib and ARMCCSLib COM Components , with the COM implementations that
//				delegates COM calls to ActiveXModule class.
//
//
//		One whop updates this file should also update
//			
//			- the files in ActiveXLib project (actual implementation)
//			- the file ARMCommonModule.cpp (COM delegation)
//
	
	STDMETHOD(ARMAdjustToBusDate)(double pDate, BSTR pCalendrier, BSTR pRule, double *pDate2);
	STDMETHOD(ARMNextBusinessDay)(double pDate, BSTR pCalendrier, long pNbDays, double *pDate2);
	STDMETHOD(ARMFreeObject)(BSTR pId, long *pRet);
	STDMETHOD(ARMIsBusinessDay)(double pDate, BSTR pCalendrier, long *pRet);
	STDMETHOD(ARMGetZCFromSummit)(BSTR pIndex, BSTR pCurrency, BSTR pCvName, double pDate, BSTR pInterpMethod, BSTR *pRet);
	STDMETHOD(ARMFreeAllObjects)(long *pRet);
	STDMETHOD(ARMYcMod)(BSTR pZc, BSTR pZcDiscount, BSTR *pRet);
	STDMETHOD(ARMForwardYield)(BSTR pZc, double pMatu1, double pMatu2, BSTR pMeth, BSTR pAdj, double *pRet);
	STDMETHOD(ARMDiscountYield)(VARIANT *pZc, VARIANT *pMatu, VARIANT *pMeth, VARIANT *pRet);
	STDMETHOD(ARMLiborSwap)(VARIANT *pStartDate, VARIANT *pEndDate, VARIANT *pLiborType, VARIANT *pRecOrPay, VARIANT *pFixedRate, VARIANT *pSpread, VARIANT *pCcy, BSTR pDaycount, BSTR pFloatingDaycount, VARIANT *pRet);
	STDMETHOD(ARMSwapPriceToRate)(VARIANT *pSwap, VARIANT *pDate, VARIANT *pPrice, VARIANT *pModel, VARIANT *pRet);
	STDMETHOD(ARMPrice)(VARIANT *pSec, VARIANT *pModel, VARIANT *pRet);
	STDMETHOD(ARMBetweenDates)(VARIANT *pDate1, VARIANT *pDate2, VARIANT *pDaycount, VARIANT *pIsYearFrac, VARIANT *pRet);
	STDMETHOD(ARMAddPeriod)(VARIANT *pDate, VARIANT *pFreq, VARIANT *pCcy, VARIANT *pNbPeriod, VARIANT *pAdjRule, VARIANT *pRet);
	STDMETHOD(ARMIsoCcy)(BSTR pCcy, BSTR pRefObj, BSTR *pRet);
	STDMETHOD(ARMGetSpotDays)(VARIANT *pCcy, VARIANT *pRet);
	STDMETHOD(ARMGetLiborIndexDaycount)(VARIANT *pCcy, VARIANT *pRet);
	STDMETHOD(ARMGetLiborTerm)(VARIANT *pCcy, VARIANT *pRet);
	STDMETHOD(ARMGetFixedDayCount)(VARIANT *pCcy, VARIANT *pRet);
	STDMETHOD(ARMGetFixedPayFreq)(VARIANT *pCcy, VARIANT *pRet);
	STDMETHOD(ARMComputeVolatility)(VARIANT *pVol, VARIANT* pMatu, VARIANT* pStrike, VARIANT* pTenor, VARIANT *pRet);
	STDMETHOD(ARMVolCurv)(VARIANT *pMatu,VARIANT* pStrikes,VARIANT* pVols,double pAsOf,BSTR pStkType,BSTR pVolType,BSTR pCcy,BSTR pIndexId,BSTR *pRet);
	STDMETHOD(ARMGetVolCubeFromSummit)(BSTR pIndex, BSTR pCcy, BSTR pCvName, double pAsOf, BSTR pType, VARIANT* pSmiles, BSTR pTypeCube, BSTR pIndexId,BSTR *pRet);
	STDMETHOD(ARMParallelShift)(BSTR pZc, double pBump, BSTR *pRet);
    STDMETHOD(ARMBumpVolatility)(BSTR pVol, double pValue, long pNthLine, long pNthCol,BSTR pIsCumul, BSTR *pRet);
	STDMETHOD(ARMBsSmiledModel)(double pDate, double pSpot, BSTR pDividend, BSTR pDiscrate, BSTR pVolATM, BSTR pRo, BSTR pNu, BSTR pIsSABR, BSTR pBeta, BSTR *pRet);
	STDMETHOD(ARM_FxConvert)(VARIANT *pccy1,VARIANT *pccy2,VARIANT *pAsOfDate,VARIANT *pCvName,VARIANT *pRet);
	STDMETHOD(ARM_DiscountPrice)(VARIANT *pCurve,VARIANT *pMatu,VARIANT *pRet);
	STDMETHOD(ARM_View)(VARIANT *pObjet,VARIANT *pRet);
	STDMETHOD(ARMGetVolFromSummit)(VARIANT *pIndex, VARIANT* pCcy, VARIANT* pCvName, VARIANT* pAsOf, VARIANT* pType, VARIANT* pMatIndex, VARIANT* pImpOrHist, BSTR pIndexId,VARIANT *pRet);
	STDMETHOD(ARMGetFXVolFromSummit)(BSTR pCcy1, BSTR pCcy2, double pDate, BSTR pCvName, BSTR pType, BSTR *pRet);
	STDMETHOD(ARMGetFXCorrelFromSummit)(BSTR pCcy1, BSTR pIndex, BSTR pCcy2, double pDate, BSTR pCvName, VARIANT* pTenors, BSTR *pRet);
	STDMETHOD(ARMGetCorrelFromSummit)(BSTR pCcy1, BSTR pIndex1, BSTR pCcy2, BSTR pIndex2, double pDate, BSTR pCvName, BSTR *pRet);
	STDMETHOD(ARMSetEtoolkit)(BSTR pUserName,BSTR pPassWord,BSTR pDatabaseContext,BSTR pItConfigDomainDir,BSTR pItDomainName,long *pRet);
	STDMETHOD(ARMConnectionEtoolkit)(VARIANT *pRet);
	STDMETHOD(ARMVolFlat)(double pVol,double pDate,BSTR pCcy,BSTR *pRet);
	STDMETHOD(ARMVolCube)(BSTR pATMVol,VARIANT *pSmileCurveIds,VARIANT *pTenors,BSTR pVolType,BSTR pRefObj,BSTR *pRet);
	STDMETHOD(ARMDeconnectionEtoolkit)(VARIANT *pRet);
	STDMETHOD(ARMZcFlat)(double pZc,double pDate,BSTR pCcy,BSTR *pRet);
	STDMETHOD(ARMBsModel)(double pDate,double pSpot,BSTR pDividend,BSTR pDiscrate,BSTR pVol,BSTR pTypeStk,BSTR *pRet);
	STDMETHOD(ARMSwitchToETK)();
	STDMETHOD(ARMSwitchToWSETK)();
	STDMETHOD(ARMInfocentreConnect)();
	STDMETHOD(ARMSwitchToFLATFILE)();
	STDMETHOD(ARMZCLINT)(VARIANT* pMatu, VARIANT* pRate, BSTR pMeth, double pDate, BSTR pCurrency, BSTR pInterpMeth,double pMatuAreDoubles,VARIANT* pSTerms, BSTR *pRet);
	STDMETHOD(ARM_zcspreaded)(BSTR zcSprId,BSTR zcInitId,double date,BSTR MMFreq,BSTR SwapFreq,BSTR ccyId,BSTR *pRet);
	STDMETHOD(ARMCreateZCSwapInt)(double pDate,VARIANT *pMatu,VARIANT *pRate,BSTR pMMVsFut,BSTR pSwapVsFut,BSTR pRaw,BSTR pInterp,BSTR pCcy,BSTR pRefObj,BSTR *pRet);
	STDMETHOD(ARMGetInitialCurveFromSummit)(BSTR pIndex, BSTR pCurrency, BSTR pCvName, double pDate, BSTR pAdjOrNot, VARIANT *pRetMat,VARIANT *pRetRate);
	STDMETHOD(ARMTHREEMONTHFUT)(BSTR pDelivery, long pMarket,BSTR pCcy,BSTR pRefObj,BSTR *pRet);
	STDMETHOD(ARMFutPibor)( BSTR pDelivery,BSTR *pRet);
	STDMETHOD(ARMIRFUT)(double pDelivery,BSTR pIdUnderlying,BSTR pRefObj,BSTR *pRet);
	STDMETHOD(ARMLibor)(BSTR pLiborTypeId,BSTR pCcyId, BSTR pResetFreqId,BSTR pPayFreqId,BSTR pRefObj,BSTR pBasis,BSTR pIntRule, BSTR *pRet);
	STDMETHOD(ARMLiborSwaption)(double pStartDate, double pEndDate, BSTR pReceiveOrPay, double pStrike, double pMaturity, BSTR pLiborType, double pSpread, BSTR pExerciseType, BSTR pResetFreq, BSTR pPayFreq, BSTR pCcyId, BSTR pRefObj, BSTR *pRet);
	STDMETHOD(ARMFixedLeg)(double pStartDate, double pEndDate, BSTR pReceiveOrPay, double pFixRate, BSTR pDayCount, BSTR pFreq, BSTR pDecompFreq, BSTR pPayTiming, BSTR pIntRule, BSTR pStubRule, BSTR pCcyId, BSTR pPayCalName, BSTR pNxChange, double pRefDate, BSTR pAdjStartDate,BSTR *pRet);
	STDMETHOD(ARMBsSlModel)(double pDate,BSTR pZc,BSTR pVolSpreadLock,BSTR pCvCapVol,BSTR pCvIndexVol,BSTR *pRet);
	STDMETHOD(ARMGlobDFBS)(BSTR pDomBSId,BSTR pDomCurrId,BSTR pFrgBSId,BSTR pFrgCurrId,BSTR pFxVolCrvId,BSTR pFFxCorrId,BSTR pRatesCorrId,BSTR pFxVolModelId,BSTR *pRet);
	STDMETHOD(ARMDFFXBS)(BSTR pDVolId,BSTR pFVolId,BSTR pDZcId,BSTR pFZcId,BSTR pDFxCorrId,BSTR pFFxCorrId,BSTR pFxVolId,double pRatesCorr,BSTR *pRet);
	STDMETHOD(ARMTRIBSMODEL)(BSTR pModel1,BSTR pModel2,BSTR pDiscModel,BSTR pFX1DiscVol,BSTR pFX2DiscVol,BSTR pIdx1Idx2Corr,BSTR pIdx1DiscIdxCorr,BSTR pIdx2DiscIdxCorr,BSTR pIdx1FxCorr,BSTR pIdx2FxCorr,int pQuantoFlag,BSTR *pRet);
	STDMETHOD(ARMTRIBSDUAL)(BSTR pModel1,BSTR pModel2,BSTR pDiscModel,BSTR pFX1DiscVol,BSTR pFX2DiscVol,BSTR pIdx1Idx2Corr,BSTR pIdx1DiscIdxCorr,BSTR pIdx2DiscIdxCorr,BSTR pIdx1FxCorr,BSTR pIdx2FxCorr,int pQuantoFlag,double pCorrelForAdj,int pWithslopeflag,BSTR *pRet);
	STDMETHOD(ARMcptBonibor)(double pDate,BSTR pDepart,BSTR pMatStruct,BSTR pMatTot,BSTR pAmort,BSTR pFreq,BSTR pSjUSD,BSTR pTiming,double pBarriere,double pSpdPostBar,double pMarge,double pFunding,BSTR pFundingFreq,double pSpd2phase,double pSoulte,BSTR pYcModId,BSTR pBsModId,BSTR pBsModVolUSDId,BSTR pBsModCorrPlusId,BSTR pBsModCorrMoinsId,BSTR pCrossModId,BSTR pProbaMarge,double pInt,VARIANT *pRet);
	STDMETHOD(ARMAswPrice)(double pMaturity, double pCpn, BSTR pFreq, BSTR pBase, double pMargin, double pRedemptionPrice, double pAsOf, double pDelivery, BSTR pFixDecompfreq, BSTR pCcy1, BSTR pIndex1, BSTR pFwdCurve1, BSTR pDiscCurve1, BSTR pCcy2, BSTR pIndex2, BSTR pFwdCurve2, BSTR pDiscCurve2, BSTR pAmortizationId, long pSolve, double pMinValue, double pMaxValue, double *pRet);
	STDMETHOD(ARMAswMargin)(double pMaturity, double pCpn, BSTR pFreq, BSTR pBase, double pPrice, double pRedemptionPrice, double pAsOf, double pDelivery, BSTR pFixDecompfreq, BSTR pCcy1, BSTR pIndex1, BSTR pFwdCurve1, BSTR pDiscCurve1, BSTR pCcy2, BSTR pIndex2, BSTR pFwdCurve2, BSTR pDiscCurve2, BSTR pAmortizationId, long pSolve, double pMinValue, double pMaxValue, double *pRet);
	STDMETHOD(ARMFrnPrice)(double pAsOf, double pDelivery, double pMaturity, BSTR pCcy1, BSTR pIndex1, BSTR pFwdCurve1, BSTR pDiscCurve1, double pFacialMargin, double pValoMargin, BSTR pCcy2, BSTR pIndex2, BSTR pFwdCurve2, BSTR pDiscCurve2, double pFixing, double pSpread, double pOutMode, long pSolve, BSTR pAmortizationId, double *pRet);
	STDMETHOD(ARMFrnMargin)(double pAsOf, double pDelivery, double pMaturity, BSTR pCcy1, BSTR pIndex1, BSTR pFwdCurve1, BSTR pDiscCurve1, double pFacialMargin, double pPrice, BSTR pCcy2, BSTR pIndex2, BSTR pFwdCurve2, BSTR pDiscCurve2, double pFixing, double pSpread, double pOutMode, long pSolve, BSTR pAmortizationId, double *pRet);
	STDMETHOD(ARMcptDigital)(double pAsOf,double pStartDate, double pEndDate, double pNtl, BSTR pIndex, BSTR pBsmod,BSTR pBsmodDelta,BSTR pBsmodVega, BSTR pFreqP, BSTR pResetTiming, BSTR pPorR, BSTR pCcy,  BSTR pCcyIdx, BSTR pDayCount, BSTR pCapOrFloor, BSTR pAmort, BSTR pStrike, BSTR pPayOff, BSTR pSpd, double pResetGap, double pSpreadBelow, double pSpreadAbove, BSTR pFwdRule, BSTR pIntRule,BSTR pStubRule,BSTR pFreqAmort, double pTxAmort, double pAmountAmort, double pRefDate, VARIANT *pRet);
	STDMETHOD(ARMRefValue)(VARIANT *pdates,VARIANT* pvalues,VARIANT* pvalues2,long valueType,long conversion,BSTR calcMethod,BSTR *pRet);
	STDMETHOD(ARMCreateGenCorrelManager)(VARIANT *pMktTags,VARIANT *pIntraMktTags,VARIANT *pCorrelCurveIds,BSTR *pRet);
	STDMETHOD(ARMBSConvAdjust)(BSTR pSUMMITFormulaeUsed,BSTR pUseSABRCMS,BSTR *pRet);
	STDMETHOD(ARMBsModelGen)(BSTR pYieldCurve,BSTR pVolatility,BSTR pCorrMgr,BSTR pCnvxManager,BSTR pCapletVol,BSTR pSpreadLock,BSTR pDiscCurve,BSTR pCorrel,BSTR pCashVol,BSTR pSpreadVol,BSTR pModelType,BSTR pSpreadVolType,BSTR pSabrMod,BSTR pLnOrNorVol,long pNumSteps,BSTR *pRet);
	STDMETHOD(ARMcptSPTQTF)(double pAsOf,double pStartDate,double pStartDatePhase2,double pStartDatePhase3, double pEndDate, double pNtl, BSTR pIndexPhase1, BSTR pIndexPhase2, BSTR pIndexFund,BSTR pIndexPhase3,  BSTR pFreqPPhase1,BSTR pFreqPPhase2, BSTR pFreqPFund, BSTR pFreqPPhase3, BSTR pFreqR, BSTR pResetTimingPhase1,BSTR pResetTimingPhase2,BSTR pResetTimingPhase3, BSTR pCcy, BSTR pCcyIdx, BSTR pDayCount,double pFee, BSTR pIsRateFixedPhase2, double pFixedRatePhase2,BSTR pBarrier, BSTR pSpdPhase1, BSTR  pSpdPhase1fund, BSTR pSpdPhase2Tf,BSTR pSpdPhase2fund,BSTR pSpdPhase3, BSTR pSpdPhase3fund, double pResetGapPhase1, double pResetGapPhase2, double pResetGapPhase3,BSTR pAmort,BSTR pBsmod,BSTR pBsmodDeltaCcy1,BSTR pBsmodVegaCcy1,BSTR pBsmodDeltaCcy2,BSTR pBsmodVegaCcy2,BSTR pBsmodFxCorrel,BSTR pFwdRule, BSTR pIntRule,BSTR pStubRule,BSTR pFreqAmort, double pTxAmort, double pAmountAmort, double pRefDate, VARIANT *pRet);
	STDMETHOD(ARMDisplaySchedule)(BSTR pLegId,BSTR pDataType,VARIANT *pRet);
	STDMETHOD(ARMIrIndex)(BSTR pDaycount,BSTR pPayFreq,double pMaturity,BSTR pCompMethod,BSTR pFwdRule,BSTR pResetTiming,double pResetGap,BSTR pPayTiming,double pPayGap,BSTR pCcy,BSTR pIndexType,double pDecompFreq,BSTR pIntRule,BSTR pResetFreq, BSTR *pRet);
	STDMETHOD(ARMSwapleg)(BSTR pIndexId, double pStartDate, double pEndDate, BSTR pRecOrPay, VARIANT pSpread, BSTR pCcy, BSTR pDayCount, double pResetGap, BSTR pResetCal, BSTR pPayCal, double pDecompPricingFlag, BSTR pNxChange, BSTR pStubRule, double pRefDate, BSTR pAdjStartDate, BSTR *pRet);
	STDMETHOD(ARMConstRefvalue)(double pValue, BSTR *pRet);
	STDMETHOD(ARMShutdownETK)();
	STDMETHOD(ARMGetInitialVolFromSummit)(BSTR pIndex, BSTR pCurrency, BSTR pCvName, double pDate, BSTR pType, BSTR pMatIndex, VARIANT *pRetMat, VARIANT *pRetTenor, VARIANT *pRetVol);
	STDMETHOD(ARMBond)(double pIssueDate,double pMaturityDate,double pFirstCpnDate,double pCpnRate,double pRedempPrice,double pPeriodicity,VARIANT pDaycount,double pSettleGap,double pCpnDateFlag,BSTR pCcy,BSTR *pRet);
	STDMETHOD(ARMINFCreateOATLeg)(double pStartDate,double pEndDate,BSTR pInfIdx,BSTR pRcvOrPay,BSTR pInterpType,double pLeverage,double pSpread,BSTR pResetFreq,BSTR pDaycount,BSTR pResetCal,BSTR pFwdRule,BSTR pIntRule,BSTR pStubRule,double pResetNumGap,double pResetDenomGap,BSTR pPayFreq,double pPayGap,BSTR pPayCal,BSTR pFinalNotionalType,double pFirstReset,double pCoMultiple,BSTR *pRet);
	STDMETHOD(ARMSwap)(BSTR pSswapleg1,BSTR pSswapleg2,double pMinPay,BSTR *pRet);
	STDMETHOD(ARMPToYield)(BSTR pBond,double pSettleDate,double pPrice,VARIANT *pRet);
	STDMETHOD(ARMYToPrice)(BSTR pBond,double pSettleDate,double pYield,VARIANT *pRet);
	STDMETHOD(ARMYToDuration)(BSTR pBond,double pSettleDate,double pActuRate,double pFlagCpn,VARIANT *pRet);
	STDMETHOD(ARMLiborleg)(double pStartDate,double pEndDate,BSTR pLiborType,BSTR pRecOrPay,VARIANT pSpread,BSTR pResetFReq,BSTR pPayFreq,BSTR pResetTiming,BSTR pPayTiming,BSTR pCcy,BSTR pIntRule,double pResetGap,BSTR pResetCal,BSTR pPayCal,double pDecompPricingFlag,BSTR pNxChange,BSTR pStubRule,double pRefDate,BSTR pAdjStartDate,BSTR pCpnDaycount,BSTR *pRet);
	STDMETHOD(ARMImpliedSpread)(BSTR pSwap,BSTR pModel,double pPrice,double pLeg1or2,double *pRet);
	STDMETHOD(ARMDiscountPrice)(BSTR pZeroCurve,double pMatu,double *pRet);
	STDMETHOD(ARMINFCreateCurve)(double pAsOf,BSTR pIndexName,double pCPIIndexValue,double pCPIIndexDate,VARIANT* pMatu,VARIANT* pRate,BSTR pMonthlyInterpType,BSTR pDailyInterpType,BSTR pDCFMonthly,BSTR pDCFDaily,BSTR pExtrapolType,BSTR pResetManager,BSTR pSeasonManager,BSTR *pRet);
	STDMETHOD(ARMINFInterpCPI)(BSTR pZc,double pCPIDate,BSTR pDCFlag,BSTR pDailyInterpType,BSTR pCPIlag,double pWeight,double *pRet);
	STDMETHOD(ARMINFSeasonManager)(VARIANT* pMonthList,VARIANT* pValues,BSTR pSeasonAdjMode,BSTR *pRet);
	STDMETHOD(ARMINFResetManager)(VARIANT* pDatas,double pNbIndex,BSTR *pRet);
	STDMETHOD(ARMINFYcMod)(BSTR pYieldCurve,BSTR pInfCurve,BSTR *pRet);
	STDMETHOD(ARMBaseReplicationConnect)();
	STDMETHOD(ARMGetInitialFXVolFromSummit)(BSTR pCcy1,BSTR pCcy2,double pDate,BSTR pCvName,BSTR pImpOrHist,BSTR pVolType,VARIANT *pRetMat,VARIANT *pRetTenor,VARIANT *pRetVol);
	STDMETHOD(ARMCreateZCFromSummit)(BSTR pIndex, BSTR pCurrency, BSTR pCvName, double pDate,BSTR pAdj,BSTR pRaw,BSTR *pRet);
	STDMETHOD(ARMBumpCurve)(BSTR pZc,double pEpsilon,long pMethod,BSTR pPlot,BSTR *pRet);
	STDMETHOD(ARMAccrued)(BSTR pSec,double pDate,BSTR pModel,double *pRet);
	STDMETHOD(ARMcomputeBilibor)(double pAsOf,double pStartDate,double pDateSecondPhase,double pEndDate,double pNtl,BSTR pIndex,BSTR pIndexFund,BSTR pIndexSF,BSTR pBsmod,BSTR pBsmodFund,BSTR pBsmodDeltaCcy1, BSTR pBsmodDeltaFund,BSTR pBsmodDeltaCcy2,BSTR pBsmodFxCorrel,BSTR pFreqP,BSTR pFreqR,BSTR pFreqPFund,BSTR pFreqRFund,BSTR pFreqPSF,BSTR pFreqRSF, BSTR pResetTiming,BSTR pResetTimingSF,BSTR pCcy1,BSTR pCcy2,BSTR pDayCount,BSTR pDayCountSF,double pSpdPF,double pSpdSF,double pSpdfund, double pSpdfund2,double pResetGap,double pResetGapSF,BSTR pAmort,double pRefDate, double pFee,BSTR pFwdRule,BSTR pIntRule,BSTR pStubRule,BSTR pFreqAmort,double pTxAmort,double pAmountAmort,  VARIANT *pRet);
	STDMETHOD(ARMcomputeOptilix)(double pAsOf,double pStartDate,double pDateSecondPhase,double pEndDate,double pNtl,BSTR pIndex,BSTR pIndexFund,BSTR pIndexSF,BSTR pBsmod,BSTR pBsmodFund,BSTR pBsmodDeltaCcy, BSTR pBsmodDeltaFund,BSTR pFreqP,BSTR pFreqR,BSTR pFreqPFund,BSTR pFreqRFund,BSTR pFreqPSF,BSTR pFreqRSF, BSTR pResetTiming,BSTR pResetTimingSF,BSTR pCcy,BSTR pDayCount,BSTR pDayCountSF, double pSpdSF,VARIANT pSpdfund,double pResetGap,double pResetGapSF,BSTR pAmort,double pRefDate, double pFee,BSTR pFwdRule,BSTR pIntRule,BSTR pStubRule,BSTR pFreqAmort,double pTxAmort,double pAmountAmort,VARIANT *pRet);
	STDMETHOD(ARMClonedAndSetNotional)(BSTR bLegId,BSTR bAmortId,BSTR *pRet);
	STDMETHOD(ARM_INF_GetZcFromSummit)(BSTR Index,BSTR Ccy,BSTR cvname,double date,BSTR seasonAdj,BSTR seasonAdjMode,BSTR *pRet);
//	STDMETHOD(ARM_INF_CreateGenericLeg)(double pStartDate,double pEndDate,BSTR pInfIdx,BSTR pRcvOrPay,BSTR pInterpType,double pLeverage,double pSpread,BSTR pResetFreq,BSTR pDaycount,BSTR pResetCal,BSTR pFwdRule,BSTR pIntRule,BSTR pStubRule,double pResetNumGap,double pResetDenomGap,BSTR pPayFreq,double pPayGap,BSTR pPayCal,BSTR pFinalNotionalType,double pFirstReset,BSTR *pRet);
	STDMETHOD(ARMRiskyBond)(double pIssueDate,double pMaturityDate,double pFirstCpnDate,double pCpnRate,double pRedemptionPrice,long pPeriodicity,VARIANT pDaycount,long pSettleGap,long pCpnDateFlag,BSTR pCcyId,double pRepo,double pSsl,double pRecoveryRate,BSTR *pRet);
	STDMETHOD(ARMRiskyBondWithCF)(double pAsOfDate,double pRedemptionPrice,long pPeriodicity,VARIANT pDaycount,VARIANT *pYearTerms,VARIANT *pCashFlows,long pSettleGap,long pCpnDateFlag,BSTR pCcyId,double pRepo,double pSsl,double pRecoveryRate,BSTR *pRet);
	STDMETHOD(ARMHyperCube)(VARIANT *pVolCurvId,VARIANT* pKeys,BSTR *pRet);
	STDMETHOD(ARMcomputePentifix)(double pNtl,double pStartdatePhase1,BSTR pCcy,BSTR pIndexPhase1,double pSpreadPhase1,BSTR pDayCountPhase1,BSTR pPayFreqPhase1,BSTR pResetFreqPhase1,BSTR pResetTimingPhase1,BSTR pRoll,BSTR pAdjPhase1,BSTR pStub,BSTR pIndexPhase2DIG,BSTR pIndexLongPhase2DIG,BSTR pStrikePhase2DIG,BSTR pResetTimingPhase2DIG,BSTR pAdjPhase2DIG,double pStartDatePhase2,double pSpreadPhase2,BSTR pDayCountPhase2,BSTR pPayFreqPhase2,BSTR pResetFreqPhase2,BSTR pAdjPhase2,double pStartDatePhase3,double pEndDatePhase3,BSTR pIndexPhase3,double pSpreadPhase3,BSTR pDayCountPhase3,BSTR pPayFreqPhase3,BSTR pResetFreqPhase3,BSTR pResetTimingPhase3,BSTR pAdjPhase3,BSTR pIndexFund,VARIANT pSpreadFund,BSTR pDayCountFund,BSTR pPayFreqFund,BSTR pResetFreqFund,BSTR pResetTimingFund,BSTR pAdjFund, double pEndDateAmort, BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,BSTR pFloorOrcap,double pFee,BSTR pVolCurvFromMatriceShift,BSTR pVol,BSTR pVolCub,BSTR pCorrManager,BSTR pConvexityManager,BSTR pZc,BSTR pSmiledMod,BSTR pSmiledModBump, BSTR pHyperCubeCorrel,VARIANT *pBumpBsGenMod, VARIANT *pBumpVolBsGenMod,VARIANT *pRet);
	STDMETHOD(ARMCmsLeg)(double startDate,double endDate,BSTR cmsTypeId,BSTR receiveOrPay,BSTR yieldDecompFreq,BSTR swapLegDayCount,BSTR resetFreq,BSTR payFreq,long resetGap,BSTR intRule,BSTR ccyName,BSTR resetTiming,BSTR stubRule,BSTR adjStartDate,BSTR *pRet);
	STDMETHOD(ARM_ReplicConvAdjust_Create)(BSTR Payoff_ReplicMode, double Payoff_StepOrReplicPrecision, BSTR Payoff_StopMode, double Payoff_StopThreshold, BSTR Sensi_ReplicMode, double Sensi_StepOrReplicPrecision, BSTR Sensi_StopMode, double Sensi_StopThreshold, BSTR UsedModelId, double StrikeMinReplic, double StrikeMaxReplic, BSTR *pRet);
	STDMETHOD(ARM_MapConvAdjust_Create)(BSTR LiborArrearAdj,BSTR NaturalCMSAdj,BSTR PaymentLagAdj,BSTR *pRet);
	STDMETHOD(ARMcomputePentibor)(double pNtl,double pStartdatePhase1,BSTR pCcy,BSTR pIndexPay, BSTR pIndexPhase1,double pSpreadPhase1,BSTR pDayCountPhase1,BSTR pPayFreqPhase1,BSTR pResetFreqPhase1,BSTR pResetTimingPhase1,BSTR pRoll,BSTR pAdjPhase1,BSTR pStub,BSTR pIndexPhase2DIG,BSTR pIndexLongPhase2DIG,BSTR pStrikePhase2DIG,BSTR pResetTimingPhase2DIG,BSTR pAdjPhase2DIG,double pStartDatePhase2,double pSpreadPhase2,BSTR pDayCountPhase2,BSTR pPayFreqPhase2,BSTR pResetFreqPhase2,BSTR pAdjPhase2,double pStartDatePhase3,double pEndDatePhase3,BSTR pIndexPhase3,double pSpreadPhase3,BSTR pDayCountPhase3,BSTR pPayFreqPhase3,BSTR pResetFreqPhase3,BSTR pResetTimingPhase3,BSTR pAdjPhase3,BSTR pIndexFund,VARIANT pSpreadFund,BSTR pDayCountFund,BSTR pPayFreqFund,BSTR pResetFreqFund,BSTR pResetTimingFund,BSTR pAdjFund,double pEndDateAmort, BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,double pFee,BSTR pVolCurvFromMatriceShift,BSTR pVol,BSTR pVolCub,BSTR pConvexityManager,BSTR pZc,BSTR pSmiledMod,BSTR pSmiledModBump, BSTR pHyperCubeCorrel,BSTR pIndexIndexCorrelCube, BSTR pCorrEUR, BSTR pInterCorr, VARIANT *pRet);
	STDMETHOD(ARMIndexIndexCorrelCube)(VARIANT *pVolCurvId, VARIANT* pTenors1List, VARIANT* pTenors2List, BSTR pInterSurfInterp, BSTR *pRet);
	STDMETHOD(ARMCreateGenCorrelatorManager)(VARIANT *pMktTags,VARIANT *pHyperDiagVol, VARIANT *pIndexIndexVol, VARIANT* pCorrelVol, VARIANT* pIndexVol,BSTR *pRet);
	STDMETHOD(ARMcomputePentilix)(double pNtl,double pStartdatePhase1,BSTR pCcy,BSTR pIndexPay, BSTR pIndexPhase1,double pSpreadPhase1,BSTR pDayCountPhase1,BSTR pPayFreqPhase1,BSTR pResetFreqPhase1,BSTR pResetTimingPhase1,BSTR pRoll,BSTR pAdjPhase1,BSTR pStub,BSTR pIndexPhase2DIG,BSTR pIndexLongPhase2DIG,BSTR pStrikePhase2DIG,BSTR pResetTimingPhase2DIG,BSTR pAdjPhase2DIG,double pStartDatePhase2,double pSpreadPhase2,BSTR pDayCountPhase2,BSTR pPayFreqPhase2,BSTR pResetFreqPhase2,BSTR pAdjPhase2,double pStartDatePhase3,double pEndDatePhase3,BSTR pIndexPhase3,double pSpreadPhase3,BSTR pDayCountPhase3,BSTR pPayFreqPhase3,BSTR pResetFreqPhase3,BSTR pResetTimingPhase3,BSTR pAdjPhase3,BSTR pIndexFund,VARIANT pSpreadFund,BSTR pDayCountFund,BSTR pPayFreqFund,BSTR pResetFreqFund,BSTR pResetTimingFund,BSTR pAdjFund,double pEndDateAmort, BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,double pFee,BSTR pVolCurvFromMatriceShift,BSTR pVol,BSTR pVolCub,BSTR pConvexityManager,BSTR pZc,BSTR pSmiledMod,BSTR pSmiledModBump, BSTR pHyperCubeCorrel,BSTR pIndexIndexCorrelCube, BSTR pCorrEUR, BSTR pInterCorr, VARIANT *pRet);
	STDMETHOD(ARMGetResetMgrFromSummit)(double pAsOf,BSTR pIndex,BSTR pSource,BSTR pCcy,BSTR pIsInflationIndex,BSTR pTerm,BSTR *pRet);
	STDMETHOD(ARMGetReset)(BSTR pResetMgr,double pDate,double *pRet);
	STDMETHOD(ARMSetLastFixing)(BSTR pSecurityId,double pRate,double pAsOf,double pBeforeLastFixingDate,double pResetDate,BSTR *pRet);
	STDMETHOD(ARMcomputeReviPentix)(double pNtl,VARIANT pDate,BSTR pCcy,BSTR pIndexPhase1,VARIANT pSpread, BSTR pDayCountPhase1,BSTR pPayFreqPhase1,BSTR pResetFreqPhase1,BSTR pResetTimingPhase1,BSTR pRoll,BSTR pAdjPhase1,BSTR pStub,BSTR pIndexPhase2DIG,BSTR pIndexLongPhase2DIG,BSTR pStrikePhase2DIG,BSTR pResetTimingPhase2DIG,BSTR pAdjPhase2DIG,BSTR pDayCountPhase2,BSTR pPayFreqPhase2,BSTR pResetFreqPhase2,BSTR pAdjPhase2,BSTR pIndexPhase3,BSTR pDayCountPhase3,BSTR pPayFreqPhase3,BSTR pResetFreqPhase3,BSTR pResetTimingPhase3,BSTR pAdjPhase3,BSTR pIndexFund,VARIANT pSpreadFund,BSTR pDayCountFund,BSTR pPayFreqFund,BSTR pResetFreqFund,BSTR pResetTimingFund,BSTR pAdjFund,  BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,BSTR pFloorOrcap,double pFee,double pLevier, double pTxFixeMax, BSTR pIsCapped, double pTxCap, BSTR pVolCurvFromMatriceShift,BSTR pVol,BSTR pVolCub,BSTR pCorrManager,BSTR pConvexityManager,BSTR pZc,BSTR pSmiledMod, BSTR pHyperCubeCorrel,VARIANT *pBumpBsGenMod, VARIANT *pBumpVolBsGenMod, VARIANT *pRet);
	STDMETHOD(ARMGenAmortization)(BSTR pSwaplegId,BSTR pAmortMethod,BSTR pAmortFreq,double pAmortAmount,BSTR pDaycount,double pLegNotional,double pAmortRate,double pReducedMaturity,BSTR pModelId,double pCleanUp,BSTR *pRet);
	STDMETHOD(ARMCptRefvalue)(BSTR pRefvalId,double pDate,double *pRet);
	STDMETHOD(ARMLivretALeg)(double pStartDate,double pEndDate,BSTR pRcvOrPay,VARIANT pSpread,BSTR pResetFreq,BSTR pPayFreq,BSTR pResetTiming,BSTR pPayTiming,BSTR pCcy,BSTR pIntRule,double pResetGap,BSTR pResetCal,BSTR pPayCal,double pDecompPricingFlag,BSTR pNxChange,BSTR pStubRule,double pRefDate,BSTR pAdjStartDate,BSTR pDayCount,BSTR *pRet);
	STDMETHOD(ARMLivretACurve)(double pAsOf,BSTR pInfCurvId,BSTR pEuribCurvId,double pFlagRouding,BSTR pInfResetMgrId,BSTR pFixingLivretAId,BSTR pFixingEuribId,BSTR pMonthForAugust,BSTR pMonthForFebruary,BSTR *pRet);
	STDMETHOD(ARMcomputeLivretA)(double pNtl, double pStartDateLeg1, double pEndDateLeg1, BSTR pCcy, BSTR pIndexLeg1,VARIANT pSpreadLeg1,BSTR pDayCountLeg1, BSTR pPayFreqLeg1,BSTR pResetFreqLeg1,BSTR pResetTimingLeg1,BSTR pAdjLeg1,BSTR pRoll,BSTR pStub, double pEndDateLA, double pSpreadLeg2,BSTR pDayCountLA,BSTR pPayFreqLA,BSTR pResetFreqLA,BSTR pResetTimingLA, BSTR pAdjLA, BSTR pIndexLeg2,BSTR pDayCountLeg2,BSTR pPayFreqLeg2,BSTR pResetFreqLeg2,BSTR pResetTimingLeg2,BSTR pAdjLeg2,double pEndDateAmort, BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,double pFee,BSTR pSmiledMod,BSTR pSmiledModBump,BSTR pLAMod,BSTR pLAModBump,BSTR pLAModBumpInflation,VARIANT *pResetMgrIds, VARIANT *pRet);
	STDMETHOD(ARMFutDelivery)(BSTR pFut,BSTR pCcy,double* pRet);
	STDMETHOD(ARMInfCurveSetResetMgr)(BSTR pInfCurve, BSTR pResetMgr,BSTR *pRet);
	STDMETHOD(ARMcomputeTxFixed)(double pNtl, double pStartDateLeg1, double pEndDateLeg1, BSTR pCcy, BSTR pIndexLeg1,VARIANT pSpreadLeg1,BSTR pDayCountLeg1, BSTR pPayFreqLeg1,BSTR pResetFreqLeg1,BSTR pResetTimingLeg1,BSTR pAdjLeg1,BSTR pRoll,BSTR pStub, double pEndDateFixed, double pSpreadLeg2,BSTR pDayCountFixed,BSTR pPayFreqFixed,BSTR pResetFreqFixed,BSTR pResetTimingFixed, BSTR pAdjFixed, BSTR pIndexLeg2,BSTR pDayCountLeg2,BSTR pPayFreqLeg2,BSTR pResetFreqLeg2,BSTR pResetTimingLeg2,BSTR pAdjLeg2,double pEndDateAmort, BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,double pFee,BSTR pSmiledMod,BSTR pSmiledModBump,VARIANT *pRet);
	STDMETHOD(ARMSetCalendar)(BSTR pFileName,double *pRet);
	STDMETHOD(ARMInitGigaSpaces)(BSTR pUrl,double *pRet);
	STDMETHOD(ARMBermudanXStyle)(VARIANT *pxDates,VARIANT *pexpiryDates,BSTR *pRet);
	STDMETHOD(ARMcomputeCRA)(BSTR pFixorFloat, double pFee,double pAsOf, double pStartDate,double pEndDate,BSTR pCcy,double pLevelUp,BSTR pUpSpec,double pLevelDown,BSTR pDownSpec,BSTR pRefIndex,BSTR pDayCount,BSTR pPayFreqPayIndex,BSTR pResetFreqRefIndex,BSTR pPaidRstTiming,BSTR pRefRstTiming,BSTR pStubRule,BSTR pPOrR,double pStartCallDate,BSTR pXStyle,	BSTR pFundingIndex,BSTR pResetFreqFunding,BSTR pPayFreqFunding,VARIANT pSpreadFunding,BSTR pPOrRFunding,double pDecompPricingFlag,double pdiscMarginFactor,	BSTR pPreInitFlag,double pMeanReversion,VARIANT pCalibParams,VARIANT pCalibParamsPF,double pKernelToGP,VARIANT pMarkovTreeParams,double pMarkovTreePathNumber,BSTR pBsmodId,BSTR pBsmodSwoptId,BSTR pBsmodSwoptBumpId,BSTR pzcId,VARIANT *pRet);
	STDMETHOD(ARMSetDiscountPricingMode)(BSTR pModelId,int pDiscountPricingMode,BSTR *pRet);
	STDMETHOD(ARMPF)(VARIANT *pinsts,VARIANT *pcoeffs,VARIANT *pmarketPrices,VARIANT *pprecisions,BSTR *pRet);
	STDMETHOD(ARMBondTEC)(double pIssueDate,  double pMaturityDate,  double pFirstCpnDate,  double pCpnRate,  double pRedempPrice, long pPeriodicity,VARIANT pDaycount,long pSettleGap,long pCpnDateFlag,BSTR pCcyId,double ptec,BSTR pPFTecId,BSTR pModTecId,BSTR *pRet);
	STDMETHOD(ARMPFModFit)(BSTR pmodName,BSTR ppf,double psettlement,BSTR pzc,VARIANT *pvList,VARIANT *pfList,long nag_algo,long pstep,double phorizon,BSTR *pRet);
	STDMETHOD(ARMTMLeg)(BSTR ptmIxType, double pstartDate, double pendDate, BSTR pPorR, double pspread,BSTR ppayFrequency, BSTR presetFrequency, BSTR pinterestRule, BSTR pfwdRule, BSTR pstubRule, BSTR pccy,BSTR *pRet);
	STDMETHOD(ARMGetInfoFromFxVolatility)(BSTR pCurveId, VARIANT *pRetMatData);
	STDMETHOD(ARMGetNewFXVolFromSummit)(BSTR pCcy1,BSTR pCcy2,double pDate,BSTR pCvName,BSTR pdomZcId,BSTR pforZcId,double pfxSpot,VARIANT *pForwards,BSTR pwhatIsInterpolated,double pcorrectSplineWithLinear,BSTR pisATM,BSTR *pRet);
	STDMETHOD(ARMGPModelParamCreate)(BSTR pModelParamType, VARIANT *pParamTimes, VARIANT *pParamValues, BSTR pModelParamName, VARIANT *pLowerBoundaries, VARIANT *pUpperBoundaries, BSTR pInterpolMethod,double pAdviseBreakPointTimes,BSTR pCurrency,BSTR *pRet);
	STDMETHOD(ARMFXModelCreate)(BSTR pZeroCurveId, VARIANT *pParamsId, double pSpot,BSTR pForCurveId,long pModelType, BSTR *pRet);
	STDMETHOD(ARMcomputeHelvetix)(double pNtl,double pAsOfDate,double pStartDate,double pEndDate , double pHelvetixType,double pFee,BSTR pCcy,BSTR pIndexFund,VARIANT pSpreadFund,BSTR pDayCountFund,BSTR pPayFreqFund, BSTR pResetFreqFund,BSTR pResetTimingFund,BSTR pAdjFund,BSTR pDayCountAmort,BSTR pIntRuleAmort,double pTxAmort,BSTR pFreqAmort,double pAmountAmort,BSTR pTypeAmort,BSTR pIndexPhasePre,double pSpreadPhasePre,BSTR pDayCountPhasePre,BSTR pPayFreqPhasePre,BSTR pResetFreqPhasePre,BSTR pResetTimingPhasePre,BSTR pAdjPhasePre,double pStartDatePhaseStruct,double pEndDatePhaseStruct,BSTR pResetTimingPhaseStruct,BSTR pAdjPhaseStruct,BSTR pDayCountPhaseStruct,BSTR pPayFreqPhaseStruct,BSTR pResetFreqPhaseStruct,double pSpotPhaseStruct,BSTR pOptionTypePhaseStruct,BSTR pForeignCcyPhaseStruct,BSTR pDomesticCcyPhaseStruct,double pLevierPhaseStruct,BSTR pStrikePhaseStruct,BSTR pPayOffDigitalPhaseStruct,   BSTR pResetTimingOptionPhaseStruct,BSTR pAdjOptionPhaseStruct,BSTR pDayCountOptionPhaseStruct,BSTR pPayFreqOptionPhaseStruct,BSTR pResetFreqOptionPhaseStruct,BSTR pPayTimingOptionPhaseStruct,double pPayGapOptionPhaseStruct,double pResetGapOptionPhaseStruct,BSTR pIsCapped,double pTxCap,BSTR pIndexPhasePost,double pSpreadPhasePost,BSTR pDayCountPhasePost,BSTR pPayFreqPhasePost,BSTR pResetFreqPhasePost,BSTR pResetTimingPhasePost,BSTR pAdjPhasePost,BSTR pRoll,BSTR pFwdRule,BSTR pIntRule,BSTR pStubRule,VARIANT *pProba,VARIANT *pMT,BSTR pSmiledModEUR,BSTR pSmiledModCHF,BSTR pDeltaSmiledModEUR,BSTR pMixtureModEURCHF,BSTR pDeltaEURMixtureMod,BSTR pBSEURMixtureMod,BSTR pVolFxEURMixtureMod,BSTR pDeltaCHFMixtureMod,BSTR pBSCHFMixtureMod,VARIANT *pRet);
	STDMETHOD(ARMCapFloor)(BSTR pSwapLegId, BSTR pIsItCapOrFloor,VARIANT pStrike,BSTR *pRet);
	STDMETHOD(ARMSpreadDigital)(double pStartDate,double pEndDate,BSTR pCapOrFloor,VARIANT pStrike,VARIANT *pSpread,VARIANT pPayOff,BSTR pLiborType1,BSTR pLiborType2,VARIANT *pWeight,BSTR pDayCount, BSTR pResetFreq,BSTR pPayFreq,BSTR pResetTiming,BSTR pPayTiming,BSTR pCurrency,double pResetGap,BSTR pIntRule,BSTR pStubRule,VARIANT *pFixing1,VARIANT *pFixing2,BSTR *pRet);
	STDMETHOD(ARMSpreadDigitalFlt)(double pStartDate,double pEndDate,BSTR pCapOrFloor,VARIANT pStrike,VARIANT *pSpread,BSTR pPayOffLiborType,BSTR pLiborType1,BSTR pLiborType2, VARIANT *pWeight,BSTR pDayCount,BSTR pResetFreq,BSTR pPayFreq,BSTR pResetTiming,BSTR pPayTiming,BSTR pCurrency, double pResetGap,BSTR pIntRule,BSTR pStubRule,VARIANT *pFixing1,VARIANT *pFixing2,BSTR *pRet);

	//Section Credit
	STDMETHOD(ARM_Credit_Delivery)(VARIANT *pAsOfDate,VARIANT *pTenorContract,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CptInterpolDefCurve)(BSTR pCurve, VARIANT pTenor, VARIANT *pRet);
	STDMETHOD(ARM_Credit_DefaultProba)(VARIANT *pCurve,VARIANT *pMatu ,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetBeta )(VARIANT *pPricer,VARIANT *pLabel,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CptBaseCorrelation )(double AsOf,BSTR name, BSTR CalMethod,BSTR IndexId,VARIANT *pStrikeLow,VARIANT *pStrikeHigh,VARIANT *pVMktBid,VARIANT *pVMktAsk,VARIANT *pVUpfBid,VARIANT *pVUpfAsk, VARIANT *pVInitialCorrel, VARIANT *pVDeltaLevrage, BSTR ModelId, double integrationStep, double lagStartDate, double creditLag, VARIANT *pVectorPrevIndexId, VARIANT *pMatrixPrevBC, double step,BSTR CalMeth, VARIANT *pRet);
//	STDMETHOD(ARM_Credit_GetImpliedCorrelation )(VARIANT *pPricer,double pRange, VARIANT *pMktSpreads, double pSmileType,VARIANT *pSeeds,VARIANT *pUpfronts, VARIANT *pRet);
	STDMETHOD(ARM_Credit_Mezzanine) (double pEffectiveDate,double pEndDate,double pSpread,double pMezzAmount,double pSubAmount,VARIANT *pLabels,VARIANT *pNotionals,BSTR pFreqFeeLeg,BSTR pDayCountFrq,double pFirst_period_refdate,BSTR pAccruedOnDefault,BSTR Currency,double pPayCreditLag,BSTR pStub,BSTR pFreqDefLeg,double pBinary,BSTR pPayCal,BSTR LongOrShortRisk,double  TradedNotional,BSTR IncludeMatu,double pFstCpnEffDate, BSTR intRule,BSTR adjStartDate,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CDO2)(double pEffectiveDate,double pEndDate,BSTR pPortfolio,double pSpread,double pSubAmount,double pMezzAmount,BSTR pFreqFeeLeg,BSTR pFreqDefLeg,BSTR pDayCountFrq,double pFirst_period_refdate,BSTR pAccruedOnDefault,BSTR Currency,double pPayCreditLag,BSTR pStub,double pBinary,BSTR pPayCal,BSTR LongOrShortRisk,double  TradedNotional,BSTR CrossSub,BSTR IncludeMatu,double pFstCpnEffDate,VARIANT *pRet);
	STDMETHOD(ARM_Credit_ModelMultiCurves) (VARIANT *pIRcurve,VARIANT *pDefCurves,VARIANT *pRecovery, BSTR CorrelationId,BSTR	pVolcurve,BSTR	pCpnInfcurve, BSTR	pCpnIRcurve,VARIANT *pRet);
	STDMETHOD(ARM_Credit_ModelMultiCvMktDataMng) (VARIANT *pIRcurve,VARIANT *pDefCurves,VARIANT *pRecovery, BSTR CorrelId, BSTR MktdataMngId,BSTR	pVolcurve,BSTR	cloneorNot,VARIANT *pRet);
	STDMETHOD(ARM_Credit_FTD) (VARIANT *pEffectiveDate,VARIANT *pEndDate,VARIANT *pSpread,VARIANT *pLabels ,VARIANT *pFixingFreq,VARIANT *pDayCountFrq,VARIANT *pFirst_period_refdate,VARIANT *pIssuerNotional,VARIANT *pAccruedOnDefault,VARIANT *pCurrency,VARIANT *pPayCreditLag,VARIANT *pStub,double pFstCpnEffDate,VARIANT *pintRule,VARIANT *pstartAdj,VARIANT *pRet);
	STDMETHOD(ARM_Credit_NTD) (double pEffectiveDate,double pEndDate,double pSpread,int pFirstNumDefault,int pLastNumDefault,VARIANT *pLabels,BSTR pFixingFreq,BSTR pDayCountFrq,double pFirst_period_refdate,double	pIssuerNotional,BSTR pAccruedOnDefault,BSTR pCurrency,double pPayCreditLag,BSTR	pStub,BSTR pFrequencyDefLeg,double pBinary,BSTR	pPayCal,BSTR pRcvFeeLeg,double TradedNotional,BSTR IncludeMatu,double pFstCpnEffDate,BSTR intRule,BSTR startAdj, VARIANT *pRet);
	STDMETHOD(ARM_Credit_Price) (VARIANT *pPricer ,VARIANT *pAsOfDate,VARIANT *pRet);
	STDMETHOD(ARM_Credit_RiskyDuration) (BSTR pDefCurve,VARIANT date,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CDONPV) (VARIANT *pPricer ,VARIANT *pCPTTYPE,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CorrMatrix) (VARIANT *pLabels,VARIANT *pCoefs,double AsOf,BSTR Name,VARIANT *pRet);
	STDMETHOD(ARM_Credit_ExtractCorrMatrix) (VARIANT *pCorrMatrixId,VARIANT *pLabels,VARIANT *pRet);
	STDMETHOD(ARM_Credit_Spread)(VARIANT *pPricer,VARIANT *pMTM,VARIANT *pRet);
	STDMETHOD(ARM_Credit_SetLabel)(VARIANT *pCurve,VARIANT *pLabel,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetLabel)(VARIANT *pCurve,VARIANT *pRet);
	STDMETHOD(ARM_Credit_Sensitivity)(VARIANT *pPricer,VARIANT *pType,VARIANT *pPlot,VARIANT *pLabel,VARIANT *pEpsilon, double  epsilonGamma, VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetCleanSpreadTranche)(VARIANT *pPricer,VARIANT *pPlot,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetDefProbTranche)(BSTR PricerId,double pPlot,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetDuration)(VARIANT *pPricer,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GenSchedule)(VARIANT *pAccStartDate,VARIANT *pAccEndDate,VARIANT *pFixingFreq,VARIANT *pDayCountFrq,VARIANT *prefdate,VARIANT *pCurrency,VARIANT *ptypeDates,VARIANT *pModFol, VARIANT *pCreditGap, VARIANT *pRet);
	STDMETHOD(ARM_Credit_CashFlows)(VARIANT *pCoefs,VARIANT *pRet);
	STDMETHOD(ARM_Credit_Version)(VARIANT *pRet);
	STDMETHOD(ARM_Credit_CDS) (double pEffectiveDate,double pEndDate,double pSpread,BSTR pFixingFreq,BSTR pDayCountFrq,double pFirst_period_refdate,double pFixedPayerAmount,double pFloatingPayerAmount,BSTR StubRule,BSTR pCurrency,BSTR Adjusetd,int CreditLag,BSTR IncludeMatu,  double StartProtection, double EndProtection,BSTR name,double Binary, double pFstCpnEffDate, BSTR StartAdj, VARIANT *pRet);
//  STDMETHOD(ARM_Credit_CorrelationSmile)(VARIANT *pPricerId,double pSmileType,double pMktPrice ,double pSeed, double pUpfrontPay,int dataType,VARIANT *pRet);
//	STDMETHOD(ARM_Credit_CpteDefLegTrancheEquivalente)(VARIANT *pPricerId,double pStrikeUp1, double pStrikeUp2, double pBC1, double pBC2, double pSmileType, VARIANT *pRet);
//	STDMETHOD(ARM_Credit_CpteStrikesEquivalents)(VARIANT *pPricerId,double pStrikeDpwn, double pStrikeUp, double pIndexNotional, double pELTranche, VARIANT *pRet);
	STDMETHOD(ARM_Credit_Pricer)(BSTR pSecurity,BSTR pModel,BSTR pPricerType,int Nbpaths, BSTR pParameters,double AsOf, VARIANT *pRet);
	STDMETHOD(ARM_Credit_Portfolio)(VARIANT *pSecuritiesID,BSTR parameters, VARIANT *pRet);
	STDMETHOD(ARM_Credit_SetCorrelationMatrix)(BSTR pModelMultiCurves,BSTR pCorrMatrix, BSTR *pRet);
	STDMETHOD(ARM_Credit_DPMktDataFromSummit)(double AsOfDate,BSTR Issuer,BSTR CurveName,BSTR Parameter,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetDPFromSummit)(double AsOfDate,BSTR Issuer,BSTR CurveName,BSTR ircurveId,BSTR label,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CloneCorrMatrixBary)(BSTR CorrMatrixId,double Beta,int UpOrDown,BSTR *pRet);
	STDMETHOD(ARM_Credit_SetCorrelation)(BSTR pModelMultiCurvesId,BSTR pCorrelationId,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CorrelationStrike)(VARIANT* pLabels,VARIANT* pVolCurves,VARIANT* pProportions,VARIANT* pSmileStrikeLow,VARIANT* pSmileStrikeHigh,VARIANT *pIndexVector,double AsOf,BSTR Name, BSTR *pRet);
	STDMETHOD(ARM_Credit_Beta_Correlation)(VARIANT *pLabels,VARIANT *pCoefs,double AsOf,BSTR Name,BSTR idIndex1,BSTR idIndex2,VARIANT *pRet);
	STDMETHOD(ARM_Credit_ConstantDefaultCurve)(DATE AsOfDate,VARIANT pTenors,VARIANT pRates,double  Recovery,BSTR IRCurveId,BSTR bCurrency,BSTR	bLabel,BSTR AdjCalType,BSTR IsSummit, BSTR calibrationData,int lag, BSTR calibrationAlgo,BSTR paramId,BSTR intRule,BSTR adjStartRule,VARIANT *pRet);
	STDMETHOD(ARM_Credit_DefProbModelNew) (BSTR pDefProb,BSTR pIrCurve,BSTR pVolCurve,VARIANT *pRet);
	STDMETHOD(ARM_Credit_ZeroCouponDefaultCurveFromSummit)(double AsOfDate,BSTR   bIssuer,BSTR   bCurrency,BSTR   bCvName,BSTR   IRCurveId,BSTR   bLabel,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetInitialCurveFromSummit)(VARIANT *pIndex, VARIANT *pCurrency, VARIANT *pCvName, VARIANT *pDate, VARIANT* pTypeValue, VARIANT *pRet); 
	STDMETHOD(ARM_Credit_CMTranche) (VARIANT *pEffectiveDate,VARIANT *pEndDate,VARIANT *pSpread,VARIANT *pMezzAmount,VARIANT *pSubAmount,VARIANT *pLabels,VARIANT *pNotionals,VARIANT* pIndex, VARIANT *pFreqFeeLeg,VARIANT *pDayCountFrq,VARIANT *pFirst_period_refdate,VARIANT *pAccruedOnDefault,VARIANT *Currency,VARIANT *pPayCreditLag,VARIANT *pStub,VARIANT *pFreqDefLeg,VARIANT *pBinary,VARIANT *pPayCal,BSTR LongOrShortRisk,double  TradedNotional,double  FwdFixedDate,BSTR IncludeMatu,double pFstCpnEffDate, VARIANT *pRet);
	STDMETHOD(ARM_Credit_Index) (VARIANT *pLabels,double YearFrac,double Spread, BSTR Method, BSTR Basis,BSTR ResetFreq,BSTR PayFreq,BSTR ccy,BSTR DefCurve,BSTR fwdRule,BSTR resetTiming,int resetGap,BSTR payTiming,int payGap,BSTR intRule,BSTR AdjCalType, int cm_resetWeekDay,int cm_resetOccur,BSTR *pRet);
	STDMETHOD(ARM_Credit_Parameters)(VARIANT *pCoefs,long nbcols, VARIANT *pRet);
 	STDMETHOD(ARM_Credit_CDSIndex) (VARIANT *pEffectiveDate,VARIANT *pEndDate,VARIANT *pSpread,VARIANT *pIndex,VARIANT *pFixingFreq,VARIANT *pDayCountFrq,VARIANT *pFirst_period_refdate,VARIANT *pFixedPayerAmount,VARIANT *pFloatingPayerAmount,BSTR StubRule,VARIANT *pCurrency,BSTR Adjusetd,int pCreditLag,BSTR IncludeMatu,VARIANT* StartProtection, VARIANT* EndProtection,VARIANT *pRet);
	STDMETHOD(ARM_Credit_Option) (VARIANT * pUnderlyingMaturity,double OptionExpiry,BSTR Currency,BSTR CdsAdj,BSTR EndAdj,double pStrike,VARIANT *pOptionType,VARIANT *pKoType,double Notional,VARIANT *pRet );
	STDMETHOD(ARM_Credit_FwdSpreadPricer) (VARIANT *pPricer,double Maturity1, double Maturity2, VARIANT *pRet);
	STDMETHOD(ARM_Credit_ImpliedVol) (VARIANT *pPricer, double pMktPrice, VARIANT *pRet) ;
	STDMETHOD(ARM_Credit_VirtualCdsSpread) (VARIANT *pPricer, VARIANT *pMaturity, VARIANT *pRet);
	STDMETHOD(ARM_Credit_BSGreeks)(VARIANT *pPricer,VARIANT *pGreekType, VARIANT *pRet);
	STDMETHOD(ARM_GETINSTRUMENTFROMSUMMIT)(BSTR SummitId,BSTR Type,double AsOf,BSTR Exoticfilter,VARIANT* pRet);
	STDMETHOD(ARM_Credit_GetEqStrikeDown)(BSTR correlId,BSTR indexname, double *pRet);
	STDMETHOD(ARM_Credit_GetEqStrikeUp)(BSTR correlId,BSTR indexname,double *pRet);
	STDMETHOD(ARM_Credit_GetCorrelStrikeDown)(BSTR correlId,double yfmaturity, double *pRet);
	STDMETHOD(ARM_Credit_GetCorrelStrikeUp)(BSTR correlId,double yfmaturity,double *pRet);
	STDMETHOD(ARM_Credit_GetCorrelation)(BSTR ModelId,BSTR *pRet);
	// STDMETHOD(ARM_Credit_GetModelFromSummit)(BSTR IRcurve,BSTR IDSummit,BSTR type,VARIANT *pRet);
	STDMETHOD(ARM_Credit_SetVolatility) (VARIANT *pPricer, BSTR pVolCurve, VARIANT *pRet) ;
	STDMETHOD(ARM_NextCpnDate) (double AsOfDate,double maturity,BSTR frequency,BSTR rule,BSTR currency,BSTR intrule,double *pRet) ;
	STDMETHOD(ARM_Credit_SetProportionsInfos)(BSTR correlId,BSTR IndexName,double proportion,double forcedstrikelow,double forcedstrikehigh) ;
	STDMETHOD(ARM_Credit_CptImplCvForCDO2)(BSTR pricerId,BSTR Name,BSTR Tenor,double *pRet);
	STDMETHOD(ARM_Credit_AddPeriod)(double pAsOf, BSTR Maturity,BSTR pCcy,BSTR AdjRule,BSTR AdjCDS, VARIANT *pRet);
	STDMETHOD(ARM_Credit_SetCoupons)(BSTR CdsorCdoId,BSTR CouponsId,BSTR TypesId,BSTR PartId,BSTR *pRet);
	STDMETHOD(ARM_Credit_SetRiskyProfile)(BSTR CdsorCdoId,BSTR CouponsId,BSTR TypesId,BSTR *pRet);
	STDMETHOD(ARM_Credit_InputDefaultCurve)(VARIANT AsOfDate,VARIANT pDates,VARIANT pRates,double  Recovery, BSTR IRCurveId,BSTR bCurrency,BSTR bLabel, VARIANT *pRet);
	STDMETHOD(ARM_Credit_DataFromLabel)(BSTR pPricer,BSTR pLabel,double *pRet);
	STDMETHOD(ARM_Credit_GenerateImpliedCurve)(BSTR pricerId, BSTR *pRet);
	STDMETHOD(ARM_Credit_GetEqStrike)(BSTR CorrelId,BSTR IndexName,BSTR UpOrLow,  VARIANT *pRetMatu, VARIANT *pRetStrikes);
	STDMETHOD(ARM_Credit_DefaultIntensity)(BSTR pricerId,double Maturity,double *pRet);	
	STDMETHOD(ARM_Credit_EmptyLeg)(VARIANT *pRet);
	STDMETHOD(ARM_Credit_IRLEGTOCREDITLEG)(BSTR SwapLegId,BSTR LegType,BSTR creditindexId,BSTR PricerId,BSTR *pRet);
	STDMETHOD(ARM_Credit_Collateral)(VARIANT *pLabels,VARIANT *pNotionals,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CDSGEN)(BSTR FeeLegId,BSTR DefLegId,double RcvFee,double TradedNot,BSTR *pRet);
	STDMETHOD(ARM_Credit_NTDGEN)(BSTR CdsId,int firstnumdef,int lastnumdef,BSTR CollateralId,double binary,double rcvfee,BSTR *pRet);
	STDMETHOD(ARM_Credit_CDOGEN)(BSTR CdsId,double subamount,BSTR CollateralId,double binary,double rcvfee,BSTR *pRet);
	STDMETHOD(ARM_Credit_GenLeg)(double	StartDate,double EndDate,double	FixedRate,double	FixedNotional,BSTR RefValNotional,BSTR RefValRate,BSTR XChangeNotional, BSTR Frequency,BSTR Basis, BSTR payTiming, BSTR intrule,BSTR stubrule, BSTR ccyid, BSTR paycalname,double refdate,BSTR includematurity,BSTR adjstartdate,BSTR legtype,BSTR indexobj,int creditlag,double binary,BSTR Name,BSTR Nxchange,BSTR baccruedOnDef,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CDO_SQUARE_GEN)(BSTR CdsId,double subamount,BSTR portfolioId,double binary,double rcvfee,BSTR *pRet);
	STDMETHOD(ARM_Credit_GetLastFixingDate)(BSTR CdsId,VARIANT asofDate,VARIANT*pRet);
	STDMETHOD(ARM_Credit_SetPastFixing)(BSTR CdsId,VARIANT resetDate,VARIANT fixingValue,VARIANT*pRet);
	STDMETHOD(ARMGetFixing)(BSTR source,BSTR index,BSTR term,BSTR ccy,double date, double *pRet);
	STDMETHOD(ARM_Credit_SetPricerForRatesComputation)(BSTR legId,BSTR pricerId,BSTR *pRet);
	STDMETHOD(ARM_Credit_SetMatuLabel)(BSTR pCurveId, VARIANT *pMatuLabels, double *pRet);
	STDMETHOD(ARM_Credit_SetRecovCoef)(BSTR pSecId, double RecovCoef, double *pRet);
	STDMETHOD(ARM_Credit_SetFees)(BSTR securityId,BSTR RefvalueId);
	STDMETHOD(ARM_Credit_GetBounds)(BSTR instId_,double* low,double* up);
	STDMETHOD(ARM_Credit_SetInterpolationType)(VARIANT * pVolCurveId,VARIANT *pInterpMeth , VARIANT *pRet);
	STDMETHOD(ARM_Credit_Customized_CDO)(VARIANT* pLabels, VARIANT *pNotionals, BSTR Currency, BSTR pDefaultLeg, BSTR pPremiumLeg, BSTR pParameters, BSTR *pRet);
	STDMETHOD(ARM_Credit_CLN)(double pEffectiveDate,double	pEndDate,double	pSpread,BSTR pIndexId,double pFirst_period_refdate,double pFstCpnEffDate,double	pNotional,BSTR AccOnDef, BSTR pDayCount,BSTR pDecompFreq,BSTR StubRule,double resetgap,BSTR pCurrency,BSTR ResetCal,BSTR PayCal,BSTR Nxchange,BSTR pIncludeMaturity,BSTR AdjustedStartDate,double Binary,BSTR *pRet);
	STDMETHOD(ARM_Credit_RiskyPV01)(BSTR DefCurve,VARIANT Date1,VARIANT Date2,VARIANT *pRet);
	STDMETHOD(ARM_Credit_Sectorial_Correlation)(DATE AsOf,BSTR structName,BSTR correlation_Type,VARIANT * vLabels, VARIANT * vector_Membership,double intra_Sector_Correlation,double inter_Sector_Correlation,VARIANT * vBetas, VARIANT * vLambdas, VARIANT * vBetas_Down, VARIANT * vLambdas_Down, VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetDPFromCalypso)(double pDate,BSTR pricingEnv, BSTR issuer,BSTR seniority,BSTR ccy,BSTR forceCurveName,BSTR xmlFile,BSTR irCurveId,BSTR label,VARIANT *ret);
	STDMETHOD(ARMCalypsoDevConnect)();
	STDMETHOD(ARMGetZCFromCalypso)( BSTR pIndex,BSTR pCurrency,BSTR pTerm,BSTR pricingEnv,double pDate,BSTR pInterpMethod, BSTR forceCurveName,BSTR xmlFile, BSTR *pRet) ;
	STDMETHOD(ARM_Credit_DefProbInverse)(BSTR pCurveId,double dDefProba,VARIANT *pRet);	
	STDMETHOD(ARM_Credit_DPMktDataFromCalypso)(double AsOfDate,BSTR pricingEnv,BSTR issuer, BSTR seniority, BSTR ccy, BSTR forceCurveName,BSTR xmlFile,VARIANT * Parameter, VARIANT *pRet) ;
	STDMETHOD(ARM_Credit_ZeroCouponDefaultCurveFromCalypso)(double pDate,BSTR pricingEnv, BSTR issuer,BSTR seniority,BSTR ccy,BSTR forceCurveName,BSTR xmlFile,BSTR irCurveId,BSTR label,VARIANT *ret);
	STDMETHOD(ARMGetInitialCurveFromCalypso)( BSTR pIndex,BSTR pCurrency,BSTR pTerm,BSTR pricingEnv,double pDate, BSTR forceCurveName,BSTR xmlFile, BSTR pDoAdj, VARIANT*pRetMat, VARIANT* pRetRate) ;
	STDMETHOD(ARMCalypsoProdConnect)();
	STDMETHOD(ARMCalypsoRecConnect)();
	STDMETHOD(Local_ARM_ProdConnect)();
	STDMETHOD(ARM_Credit_GetBasketCorrelMkDataFromCalypso)(BSTR pricingEnv_,double date_,BSTR forceCurveName_, BSTR xmlFileName_,VARIANT *pRetMat, VARIANT *pRetTenor,VARIANT* pRetVol); 
	STDMETHOD(ARM_Credit_QMatrix)(VARIANT *pQMatrix, VARIANT *pRet);
	STDMETHOD(ARM_Credit_MarketDataMng)(VARIANT *pstrVect, VARIANT *pRet);
	STDMETHOD(ARM_SetDefaultCurrency) (BSTR isoCCy, VARIANT *pRet);
	STDMETHOD(ARM_Credit_CorrelationSmileStrike)(VARIANT* pLabels,VARIANT* pVolCurves,VARIANT* pProportions,double AsOf, VARIANT* pSmileStrikeLow,VARIANT* pSmileStrikeHigh,VARIANT *pIndexVector,BSTR Name, VARIANT *pFullStrikeLow,  VARIANT*  pFullStrikeUp ,BSTR *pRet);
	STDMETHOD(ARMGetFixingFromCalypso)(BSTR source,BSTR index,BSTR term,BSTR ccy,BSTR curveName,DATE date, VARIANT*pRet);
	STDMETHOD(ARM_FxConvertFromCalypso)(BSTR ccy1,  BSTR ccy2,   BSTR pCvName, DATE pDate, VARIANT *pRet);
	STDMETHOD(ARM_Credit_FwdSpread)(BSTR defcurveId,  double Maturity1, double Maturity2, double FwdStartDate, double FwdEndDate, BSTR VolId,  double *pRet);
	STDMETHOD(ARM_Credit_Flat_Correlation)(DATE AsOf, BSTR structName,double correlValue,BSTR idIndex1,BSTR idIndex2,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CorridorLeg_Sche)(double Notional,BSTR RecieveOrPay,BSTR RefValueSpreads,BSTR floatingIdx,double leverageFloatIdx,BSTR creditIdx,BSTR refvalueKUP,BSTR refvalueKDW,BSTR ScheduleInfoId,	VARIANT * accondef,	BSTR disc_ccy,BSTR Name,	VARIANT		*pRet);
	STDMETHOD(ARM_Credit_Schedule_Info) (double EffectiveDate,double MaturityDate,BSTR payFrequency,BSTR ResetFreq ,BSTR DayCount,BSTR Stubrule,BSTR intRule,BSTR payCalName,BSTR PayTiming,BSTR ResetTiming,BSTR fwdRule,BSTR IncludeMaturity,BSTR adj,BSTR intStartAdj,BSTR AccDayCount,double ReferenceDate,double FirstCpnEffDate,BSTR AdjCal,VARIANT *pRet);
	STDMETHOD(ARM_Credit_CPDO)(BSTR pRiskyLeg,BSTR pRollLeg,BSTR pNoRiskyLeg,double pInitialValo,double pTarget,double pMaturity,BSTR pCpnType,double pUFFees,double pRunningFees,double pVExpo,double pV0Expo,double pAlpha,double pBeta,double pDesactivation,int pNbAssets,VARIANT *pRet);
	STDMETHOD(ARM_Credit_PriceVector)(VARIANT *pPricer ,BSTR pCPTTYPE,VARIANT *pRetVectorValos);
	STDMETHOD(ARM_Credit_GenPrice)(VARIANT *pPricer ,BSTR pCPTTYPE,VARIANT *pRet);
	STDMETHOD(ARM_Credit_FixingCurve)(VARIANT *pDates, VARIANT *pValues, double  AsOfDate,	BSTR B_IndexName, BSTR B_IndexID, VARIANT *pRet);
	STDMETHOD(ARM_Credit_CptInterpolDefCurveOLD)(BSTR pCurve, BSTR pTenor, double pSlope, double pDate, double pInterpDate, VARIANT *pRet);
	STDMETHOD(ARM_Credit_CreateBasketCorrelMkDataFromCalypso)(BSTR pricingEnv_, double date_, BSTR forceCurveName_, BSTR Ccy_, BSTR xmlFileName_,BSTR IndexId_, BSTR *pRet); 
	STDMETHOD(ARM_Credit_VariableCollateral)(VARIANT pLabels,VARIANT pNotionals,VARIANT *pRet);
	STDMETHOD(ARM_Credit_GetExpectedLoss) (BSTR pricerId,double YearTerm ,double *pRet);
	STDMETHOD(ARM_Credit_IndexCompo) (BSTR IndexName,VARIANT *pLabels,VARIANT * YearFrac,VARIANT * Spread, BSTR Method,BSTR Basis,BSTR ResetFreq,BSTR PayFreq, BSTR ccy,BSTR fwdRule,BSTR resetTiming,int resetGap,BSTR payTiming,int payGap,BSTR intRule,BSTR AdjCalType, int cm_resetWeekDay,int cm_resetOccur,BSTR *pRet);
	STDMETHOD(ARM_Credit_createFlatCurve)(BSTR pCurve, VARIANT pTenor, VARIANT *pRet);
	STDMETHOD(ARM_Credit_FunctionRegister)(long address);
	STDMETHOD(ARM_GETINSTRUMENTFROMCALYPSO)(BSTR CalypsoId,BSTR Type,double AsOf,BSTR ModelType,VARIANT* pRet);
	STDMETHOD(ARM_Credit_Math_BivNormale)(double x, double y, double rho, double *pRet);
	STDMETHOD(ARM_Credit_Math_RandUniform)(double seed,double *pRet);
// 	STDMETHOD(ARM_Credit_Math_Interpol)(VARIANT *X ,VARIANT *Y,double value,double type,double smooth,VARIANT *Weights,double modeSpline,double withC1condition,double leftSlope,double rightSlope,double *pRet);
	STDMETHOD(ARM_Credit_RiskyPV01AsSensitivity)(BSTR DefCurve,BSTR Tenor,VARIANT *pRet);
	STDMETHOD(ARM_Credit_FwdSpreadAsIndex)(BSTR DefCurveId, double matu1, double Matu2,double *pRet);
	STDMETHOD(ARM_Credit_Math_Interpol)(VARIANT *X ,VARIANT *Y,double value,double type,double smooth,VARIANT *Weights,double modeSpline,double withC1condition,double leftSlope,double rightSlope,double *pRet);
	STDMETHOD(ARM_Credit_Random_Generator)(BSTR RandomType, BSTR ParamId, VARIANT *pRet);
	STDMETHOD(ARM_Credit_GenerateOneRandom)(BSTR RandomId, double *pRet);
	STDMETHOD(ARM_Credit_GenerateRandoms)(BSTR RandomId, int DimVector, VARIANT *pRet);
	STDMETHOD(ARM_Credit_ResetRandom)(BSTR RandomId);
	STDMETHOD(ARM_Credit_createDefCurveFromBase)(BSTR pCurveCDS,BSTR pCurveIndex,VARIANT vBase,VARIANT *pRet);
	STDMETHOD(ARM_Credit_SetVolCurve) (BSTR Model, BSTR pVolCurve, VARIANT *pRet) ;
	STDMETHOD(ARM_Credit_Restrikable_CDO) (double TriggerStartDate ,double Expiry,double Strike,double InitSpread ,int OptionType,BSTR pUnderlying,double Rehauss,BSTR TriggerFreq,int DiffCDO,int IsCMSpread,double CMSpreadMatu,VARIANT *pRet);
	STDMETHOD(ARM_Credit_PropertyList) (VARIANT attrNames,VARIANT attrValues,VARIANT attrTypes,VARIANT *pRet);
	STDMETHOD (ARM_Credit_DefCurveIntensityPWC) ( double AsOfDate,VARIANT *pMatuRates, VARIANT *pInputs,double Type,double  Recovery,BSTR	IRCurveId,BSTR	bCurrency,BSTR	bLabel,BSTR	VolCurveId,BSTR	calibrationAlgo,int lag,BSTR paramid,VARIANT *pRet);
	STDMETHOD(ARM_Credit_DefCurvePWC_ABS) (double AsOfDate,VARIANT *Tenors,VARIANT *Rates,VARIANT *UpFront,VARIANT *RefValIds,double  Recovery,BSTR	IRCurveId,BSTR	bCurrency,BSTR	bLabel,BSTR	adjCalType,BSTR	IsSummitCurve,BSTR	VolCurveId,BSTR	Accrued,BSTR calibrationAlgo,BSTR calibrationData,int lag,VARIANT *pRet);
