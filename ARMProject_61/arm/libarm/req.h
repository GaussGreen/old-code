#ifndef _IT_GUARD_req_HH_
#define _IT_GUARD_req_HH_

//
// Copyright IONA Technologies, Inc.  All rights reserved.
// C++ generated by Orbix 2000 IDL compiler version 5.1.
//
#include <string.h>
#include <omg/orb.hh>


namespace ARM_CorbaRequestModule
{
    class ARM_CORBA_STRING_ARRAY_TYPE;

    typedef IT_Cxx_Seq_var< ARM_CORBA_STRING_ARRAY_TYPE, IT_Cxx_String_se, IT_Cxx_ConstString_se > ARM_CORBA_STRING_ARRAY_TYPE_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_STRING_ARRAY_TYPE > ARM_CORBA_STRING_ARRAY_TYPE_out;

    class ARM_CORBA_STRING_ARRAY_TYPE:
        public IT_Cxx_UStringSeq
    {
      public:
        typedef ARM_CORBA_STRING_ARRAY_TYPE_var _var_type;


        inline ARM_CORBA_STRING_ARRAY_TYPE(
            CORBA::ULong max,
            CORBA::ULong length,
            char** buf,
            CORBA::Boolean release = 0
        );

        inline ARM_CORBA_STRING_ARRAY_TYPE();

        inline IT_EXPLICIT ARM_CORBA_STRING_ARRAY_TYPE(
            CORBA::ULong max
        );

        inline ARM_CORBA_STRING_ARRAY_TYPE(
            const ARM_CORBA_STRING_ARRAY_TYPE& seq
        );



    };

    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_STRING_ARRAY_TYPE;

    class IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            const ARM_CORBA_STRING_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_STRING_ARRAY_TYPE*, _val))
        {}

        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            ARM_CORBA_STRING_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            IT_Bool free_val,
            ARM_CORBA_STRING_ARRAY_TYPE** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            const ARM_CORBA_STRING_ARRAY_TYPE& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        );
        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            ARM_CORBA_STRING_ARRAY_TYPE* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_STRING_ARRAY_TYPE
        );
        ~IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_STRING_ARRAY_TYPE* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_STRING_ARRAY_TYPE& _val
        );

        void
        insert(
            ARM_CORBA_STRING_ARRAY_TYPE* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_STRING_ARRAY_TYPE*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_STRING_ARRAY_TYPE** m_ptr_ptr;
        ARM_CORBA_STRING_ARRAY_TYPE*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
            const IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable&
        );
    };



    class ARM_CORBA_LONG_ARRAY_TYPE;

    typedef IT_Cxx_Seq_var< ARM_CORBA_LONG_ARRAY_TYPE, CORBA::Long&, CORBA::Long> ARM_CORBA_LONG_ARRAY_TYPE_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_LONG_ARRAY_TYPE > ARM_CORBA_LONG_ARRAY_TYPE_out;

    class ARM_CORBA_LONG_ARRAY_TYPE:
        private IT_Cxx_UFixedSeq< CORBA::Long >
    {
      public:
        typedef ARM_CORBA_LONG_ARRAY_TYPE_var _var_type;
        typedef IT_Cxx_UFixedSeq< CORBA::Long >::_it_eltype _it_eltype;


        inline ARM_CORBA_LONG_ARRAY_TYPE(
            CORBA::ULong max,
            CORBA::ULong length,
            CORBA::Long* buf,
            CORBA::Boolean release = 0
        );

        inline ARM_CORBA_LONG_ARRAY_TYPE();

        inline IT_EXPLICIT ARM_CORBA_LONG_ARRAY_TYPE(
            CORBA::ULong max
        );

        inline ARM_CORBA_LONG_ARRAY_TYPE(
            const ARM_CORBA_LONG_ARRAY_TYPE& seq
        );


        inline ARM_CORBA_LONG_ARRAY_TYPE&
        operator=(
            const ARM_CORBA_LONG_ARRAY_TYPE& seq
        );


        IT_Cxx_UFixedSeq< CORBA::Long >::maximum;
        IT_Cxx_UFixedSeq< CORBA::Long >::length;
        IT_Cxx_UFixedSeq< CORBA::Long >::operator[];
        IT_Cxx_UFixedSeq< CORBA::Long >::replace;
        IT_Cxx_UFixedSeq< CORBA::Long >::get_buffer;
        IT_Cxx_UFixedSeq< CORBA::Long >::allocbuf;
        IT_Cxx_UFixedSeq< CORBA::Long >::freebuf;

        IT_Cxx_UFixedSeq< CORBA::Long >::operator new;
        IT_Cxx_UFixedSeq< CORBA::Long >::operator delete;
#if IT_HAS_NEW_ARRAY_ALLOC
        IT_Cxx_UFixedSeq< CORBA::Long >::operator new[];
        IT_Cxx_UFixedSeq< CORBA::Long >::operator delete[];
#endif /* IT_HAS_NEW_ARRAY_ALLOC */
    };

    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_LONG_ARRAY_TYPE;

    class IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            const ARM_CORBA_LONG_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_LONG_ARRAY_TYPE*, _val))
        {}

        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            ARM_CORBA_LONG_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            IT_Bool free_val,
            ARM_CORBA_LONG_ARRAY_TYPE** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            const ARM_CORBA_LONG_ARRAY_TYPE& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        );
        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            ARM_CORBA_LONG_ARRAY_TYPE* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_LONG_ARRAY_TYPE
        );
        ~IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_LONG_ARRAY_TYPE* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_LONG_ARRAY_TYPE& _val
        );

        void
        insert(
            ARM_CORBA_LONG_ARRAY_TYPE* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_LONG_ARRAY_TYPE*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_LONG_ARRAY_TYPE** m_ptr_ptr;
        ARM_CORBA_LONG_ARRAY_TYPE*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
            const IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable&
        );
    };



    class ARM_CORBA_DOUBLE_ARRAY_TYPE;

    typedef IT_Cxx_Seq_var< ARM_CORBA_DOUBLE_ARRAY_TYPE, CORBA::Double&, CORBA::Double> ARM_CORBA_DOUBLE_ARRAY_TYPE_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_DOUBLE_ARRAY_TYPE > ARM_CORBA_DOUBLE_ARRAY_TYPE_out;

    class ARM_CORBA_DOUBLE_ARRAY_TYPE:
        private IT_Cxx_UFixedSeq< CORBA::Double >
    {
      public:
        typedef ARM_CORBA_DOUBLE_ARRAY_TYPE_var _var_type;
        typedef IT_Cxx_UFixedSeq< CORBA::Double >::_it_eltype _it_eltype;


        inline ARM_CORBA_DOUBLE_ARRAY_TYPE(
            CORBA::ULong max,
            CORBA::ULong length,
            CORBA::Double* buf,
            CORBA::Boolean release = 0
        );

        inline ARM_CORBA_DOUBLE_ARRAY_TYPE();

        inline IT_EXPLICIT ARM_CORBA_DOUBLE_ARRAY_TYPE(
            CORBA::ULong max
        );

        inline ARM_CORBA_DOUBLE_ARRAY_TYPE(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE& seq
        );


        inline ARM_CORBA_DOUBLE_ARRAY_TYPE&
        operator=(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE& seq
        );


        IT_Cxx_UFixedSeq< CORBA::Double >::maximum;
        IT_Cxx_UFixedSeq< CORBA::Double >::length;
        IT_Cxx_UFixedSeq< CORBA::Double >::operator[];
        IT_Cxx_UFixedSeq< CORBA::Double >::replace;
        IT_Cxx_UFixedSeq< CORBA::Double >::get_buffer;
        IT_Cxx_UFixedSeq< CORBA::Double >::allocbuf;
        IT_Cxx_UFixedSeq< CORBA::Double >::freebuf;

        IT_Cxx_UFixedSeq< CORBA::Double >::operator new;
        IT_Cxx_UFixedSeq< CORBA::Double >::operator delete;
#if IT_HAS_NEW_ARRAY_ALLOC
        IT_Cxx_UFixedSeq< CORBA::Double >::operator new[];
        IT_Cxx_UFixedSeq< CORBA::Double >::operator delete[];
#endif /* IT_HAS_NEW_ARRAY_ALLOC */
    };

    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE;

    class IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_DOUBLE_ARRAY_TYPE*, _val))
        {}

        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            IT_Bool free_val,
            ARM_CORBA_DOUBLE_ARRAY_TYPE** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        );
        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE
        );
        ~IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_DOUBLE_ARRAY_TYPE* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE& _val
        );

        void
        insert(
            ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_DOUBLE_ARRAY_TYPE*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_DOUBLE_ARRAY_TYPE** m_ptr_ptr;
        ARM_CORBA_DOUBLE_ARRAY_TYPE*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
            const IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable&
        );
    };



    enum ARM_OBJ_TYPE
    {
        OBJ_PARAM,
        OBJ_REQUEST,
        _dummy_ARM_OBJ_TYPE = 0x80000000
    };
    typedef ARM_OBJ_TYPE& ARM_OBJ_TYPE_out;
    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_OBJ_TYPE;

    class IT_Gen_ARM_OBJ_TYPEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_EXPLICIT IT_Gen_ARM_OBJ_TYPEStreamable(
            ARM_OBJ_TYPE* val,
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_OBJ_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(orb, type, IT_FALSE, IT_FALSE),
            m_ptr(val)
        {}
        IT_EXPLICIT IT_Gen_ARM_OBJ_TYPEStreamable(
            ARM_OBJ_TYPE val,
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_OBJ_TYPE
        );
        IT_Gen_ARM_OBJ_TYPEStreamable(
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_OBJ_TYPE
        );

        ~IT_Gen_ARM_OBJ_TYPEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_OBJ_TYPE* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            ARM_OBJ_TYPE _val
        );

        ARM_OBJ_TYPE&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_OBJ_TYPEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_OBJ_TYPE* m_ptr;
        ARM_OBJ_TYPE  m_val;

      private:
        IT_Gen_ARM_OBJ_TYPEStreamable(
            const IT_Gen_ARM_OBJ_TYPEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_OBJ_TYPEStreamable&
        );
    };

    enum ARM_CORBA_VALUE_TYPE
    {
        ARM_CORBA_ERR,
        ARM_CORBA_DOUBLE,
        ARM_CORBA_LONG,
        ARM_CORBA_STRING,
        ARM_CORBA_STRING_ARRAY,
        ARM_CORBA_DOUBLE_ARRAY,
        ARM_CORBA_LONG_ARRAY,
        _dummy_ARM_CORBA_VALUE_TYPE = 0x80000000
    };
    typedef ARM_CORBA_VALUE_TYPE& ARM_CORBA_VALUE_TYPE_out;
    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_VALUE_TYPE;

    class IT_Gen_ARM_CORBA_VALUE_TYPEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_EXPLICIT IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
            ARM_CORBA_VALUE_TYPE* val,
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_CORBA_VALUE_TYPE
        ) :
            CORBA::IT_Cxx_StreamableBase(orb, type, IT_FALSE, IT_FALSE),
            m_ptr(val)
        {}
        IT_EXPLICIT IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
            ARM_CORBA_VALUE_TYPE val,
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_CORBA_VALUE_TYPE
        );
        IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
            CORBA::IT_ORB_ptr orb = 0,
            CORBA::TypeCode_ptr type = _tc_ARM_CORBA_VALUE_TYPE
        );

        ~IT_Gen_ARM_CORBA_VALUE_TYPEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_VALUE_TYPE* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            ARM_CORBA_VALUE_TYPE _val
        );

        ARM_CORBA_VALUE_TYPE&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_VALUE_TYPEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_VALUE_TYPE* m_ptr;
        ARM_CORBA_VALUE_TYPE  m_val;

      private:
        IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
            const IT_Gen_ARM_CORBA_VALUE_TYPEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_VALUE_TYPEStreamable&
        );
    };

    class ARM_CORBA_VALUE;

    typedef IT_Cxx_VarLenConstr_var< ARM_CORBA_VALUE> ARM_CORBA_VALUE_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_VALUE> ARM_CORBA_VALUE_out;

    class IT_Gen_ARM_CORBA_VALUEStreamable;

    class ARM_CORBA_VALUE
    {

      public:

        ARM_CORBA_VALUE();
        ARM_CORBA_VALUE(
            const ARM_CORBA_VALUE&
        );
        ~ARM_CORBA_VALUE();
        ARM_CORBA_VALUE&
        operator=(
            const ARM_CORBA_VALUE&
        );

        void _d(
            ARM_CORBA_VALUE_TYPE
        );
        ARM_CORBA_VALUE_TYPE
        _d() const;


        CORBA::Double
        doubleVal() const;
        void
        doubleVal(
            CORBA::Double
        );


        CORBA::Long
        longVal() const;
        void
        longVal(
            CORBA::Long
        );


        void
        stringVal(
            char*
        );
        void
        stringVal(
            const char*
        );
        void
        stringVal(
            const CORBA::String_var &
        );
        const char *
        stringVal() const;


        const ARM_CORBA_LONG_ARRAY_TYPE&
        longArray() const;
        ARM_CORBA_LONG_ARRAY_TYPE&
        longArray();
        void
        longArray(
            const ARM_CORBA_LONG_ARRAY_TYPE&
        );


        const ARM_CORBA_DOUBLE_ARRAY_TYPE&
        doubleArray() const;
        ARM_CORBA_DOUBLE_ARRAY_TYPE&
        doubleArray();
        void
        doubleArray(
            const ARM_CORBA_DOUBLE_ARRAY_TYPE&
        );


        const ARM_CORBA_STRING_ARRAY_TYPE&
        stringArray() const;
        ARM_CORBA_STRING_ARRAY_TYPE&
        stringArray();
        void
        stringArray(
            const ARM_CORBA_STRING_ARRAY_TYPE&
        );


        static const ARM_CORBA_VALUE_TYPE _default_val;

        void
        _default();

        static CORBA::IT_Streamable*
        _it_get_label(
            CORBA::ULong index
        );

        typedef ARM_CORBA_VALUE_var _var_type;

      private:

        unsigned char _is_set;

        void
        _cleanup();

        ARM_CORBA_VALUE_TYPE _IT_Gen_d;

        union
        {
            CORBA::Double _doubleVal_;
            CORBA::Long _longVal_;
            CORBA::IT_Cxx_String_mgr* _stringVal_;
            ARM_CORBA_LONG_ARRAY_TYPE* _longArray_;
            ARM_CORBA_DOUBLE_ARRAY_TYPE* _doubleArray_;
            ARM_CORBA_STRING_ARRAY_TYPE* _stringArray_;
        };
      friend class IT_Gen_ARM_CORBA_VALUEStreamable;
    };
    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_VALUE;

    class IT_Gen_ARM_CORBA_VALUEStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_VALUEStreamable(
            const ARM_CORBA_VALUE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_VALUE*, _val))
        {}

        IT_Gen_ARM_CORBA_VALUEStreamable(
            ARM_CORBA_VALUE* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_VALUEStreamable(
            IT_Bool free_val,
            ARM_CORBA_VALUE** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_VALUEStreamable(
            const ARM_CORBA_VALUE& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        );
        IT_Gen_ARM_CORBA_VALUEStreamable(
            ARM_CORBA_VALUE* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_VALUEStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_VALUE
        );
        ~IT_Gen_ARM_CORBA_VALUEStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_VALUE* _val
        )
        {
            *m_ptr_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_VALUE& _val
        );

        void
        insert(
            ARM_CORBA_VALUE* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_VALUE*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_VALUEStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_VALUE** m_ptr_ptr;
        ARM_CORBA_VALUE*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_VALUEStreamable(
            const IT_Gen_ARM_CORBA_VALUEStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_VALUEStreamable&
        );
    };

    struct ARM_CORBA_PARAM;
    typedef IT_Cxx_VarLenConstr_var< ARM_CORBA_PARAM> ARM_CORBA_PARAM_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_PARAM> ARM_CORBA_PARAM_out;

    struct ARM_CORBA_PARAM
    {

        typedef ARM_CORBA_PARAM_var _var_type;

        void*
        operator new(
            size_t sz
        )
        {
            return CORBA_IT_MemBase::operator new(sz);
        }

        void
        operator delete(
            void* p
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p);
        }

        void*
        operator new(
            size_t sz,
            void* p
        )
        {
            return CORBA_IT_MemBase::operator new(sz, p);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete(
            void* p,
            void* q
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p, q);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */

        void*
        operator new(
            size_t sz,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            return CORBA_IT_MemBase::operator new(sz, nt);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete(
            void* p,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p, nt);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */

#if IT_HAS_NEW_ARRAY_ALLOC

        void*
        operator new[](
            size_t sz
        )
        {
            return CORBA_IT_MemBase::operator new[](sz);
        }

        void
        operator delete[](
            void* p
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete[](p);
        }

        void*
        operator new[](
            size_t sz,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            return CORBA_IT_MemBase::operator new[](sz, nt);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete[](
            void* p,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete[](p, nt);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */
#endif /* IT_HAS_NEW_ARRAY_ALLOC */

        CORBA::Long IsParam;
        ARM_CORBA_VALUE val;
        CORBA::Long nbValues;

    };

    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_PARAM;

    class IT_Gen_ARM_CORBA_PARAMStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_PARAMStreamable(
            const ARM_CORBA_PARAM* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_PARAM*, _val))
        {}

        IT_Gen_ARM_CORBA_PARAMStreamable(
            ARM_CORBA_PARAM* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_PARAMStreamable(
            IT_Bool free_val,
            ARM_CORBA_PARAM** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_PARAMStreamable(
            const ARM_CORBA_PARAM& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        );
        IT_Gen_ARM_CORBA_PARAMStreamable(
            ARM_CORBA_PARAM* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_PARAMStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_PARAM
        );
        ~IT_Gen_ARM_CORBA_PARAMStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_PARAM* _val
        )
        {
            *m_ptr_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_PARAM& _val
        );

        void
        insert(
            ARM_CORBA_PARAM* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_PARAM*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_PARAMStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_PARAM** m_ptr_ptr;
        ARM_CORBA_PARAM*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_PARAMStreamable(
            const IT_Gen_ARM_CORBA_PARAMStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_PARAMStreamable&
        );
    };



    struct ARM_CORBA_REQUEST;
    typedef IT_Cxx_VarLenConstr_var< ARM_CORBA_REQUEST> ARM_CORBA_REQUEST_var;
    typedef IT_Cxx_VarLenConstr_out< ARM_CORBA_REQUEST> ARM_CORBA_REQUEST_out;

    struct ARM_CORBA_REQUEST
    {

        typedef ARM_CORBA_REQUEST_var _var_type;

        void*
        operator new(
            size_t sz
        )
        {
            return CORBA_IT_MemBase::operator new(sz);
        }

        void
        operator delete(
            void* p
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p);
        }

        void*
        operator new(
            size_t sz,
            void* p
        )
        {
            return CORBA_IT_MemBase::operator new(sz, p);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete(
            void* p,
            void* q
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p, q);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */

        void*
        operator new(
            size_t sz,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            return CORBA_IT_MemBase::operator new(sz, nt);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete(
            void* p,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete(p, nt);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */

#if IT_HAS_NEW_ARRAY_ALLOC

        void*
        operator new[](
            size_t sz
        )
        {
            return CORBA_IT_MemBase::operator new[](sz);
        }

        void
        operator delete[](
            void* p
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete[](p);
        }

        void*
        operator new[](
            size_t sz,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            return CORBA_IT_MemBase::operator new[](sz, nt);
        }

#if IT_HAS_PLACEMENT_DEALLOC

        void
        operator delete[](
            void* p,
            const IT_nothrow_t& nt
        ) IT_THROW_DECL(())
        {
            CORBA_IT_MemBase::operator delete[](p, nt);
        }

#endif /* IT_HAS_PLACEMENT_DEALLOC */
#endif /* IT_HAS_NEW_ARRAY_ALLOC */

        ARM_OBJ_TYPE IsRequest;
        CORBA::Long reqId;
        CORBA::Long nbParams;
        IT_Cxx_USeq< ARM_CORBA_PARAM > paramsList;
        typedef IT_Cxx_USeq< ARM_CORBA_PARAM > _paramsList_seq;


    };

    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_REQUEST;

    class IT_Gen_ARM_CORBA_REQUESTStreamable :
        public CORBA::IT_Cxx_StreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_REQUESTStreamable(
            const ARM_CORBA_REQUEST* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(IT_CONST_CAST(ARM_CORBA_REQUEST*, _val))
        {}

        IT_Gen_ARM_CORBA_REQUESTStreamable(
            ARM_CORBA_REQUEST* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, IT_FALSE),
            m_ptr_ptr(&m_ptr),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_REQUESTStreamable(
            IT_Bool free_val,
            ARM_CORBA_REQUEST** _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        ) :
            CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_REQUESTStreamable(
            const ARM_CORBA_REQUEST& _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        );
        IT_Gen_ARM_CORBA_REQUESTStreamable(
            ARM_CORBA_REQUEST* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        );
        IT_EXPLICIT IT_Gen_ARM_CORBA_REQUESTStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST
        );
        ~IT_Gen_ARM_CORBA_REQUESTStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        insert(
            ARM_CORBA_REQUEST* _val
        )
        {
            *m_ptr_ptr = _val;
        }

        void
        insert(
            const ARM_CORBA_REQUEST& _val
        );

        void
        insert(
            ARM_CORBA_REQUEST* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_REQUEST*&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_REQUESTStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

      protected:
        ARM_CORBA_REQUEST** m_ptr_ptr;
        ARM_CORBA_REQUEST*  m_ptr;

      private:
        IT_Gen_ARM_CORBA_REQUESTStreamable(
            const IT_Gen_ARM_CORBA_REQUESTStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_REQUESTStreamable&
        );
    };



#ifndef IT_Gen_GuardFwd_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL
#define IT_Gen_GuardFwd_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL
    class ARM_CORBA_REQUEST_CALL;
    typedef ARM_CORBA_REQUEST_CALL* ARM_CORBA_REQUEST_CALL_ptr;
    typedef IT_Cxx_ObjRef_var< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > ARM_CORBA_REQUEST_CALL_var;
    typedef IT_Cxx_ObjRef_out< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > ARM_CORBA_REQUEST_CALL_out;
    typedef IT_Cxx_ObjRef_se< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > IT_Gen_ARM_CORBA_REQUEST_CALL_se;
    typedef IT_Cxx_ObjRef_mgr< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > IT_Gen_ARM_CORBA_REQUEST_CALL_mgr;
#endif
    class IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL;
    class IT_Gen_ARM_CORBA_REQUEST_CALLStreamable;



    IT_NAMESPACE_STATIC IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_REQUEST_CALL;

#ifndef IT_Gen_GuardFwd_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL
#define IT_Gen_GuardFwd_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL
    class ARM_CORBA_REQUEST_CALL;
    typedef ARM_CORBA_REQUEST_CALL* ARM_CORBA_REQUEST_CALL_ptr;
    typedef IT_Cxx_ObjRef_var< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > ARM_CORBA_REQUEST_CALL_var;
    typedef IT_Cxx_ObjRef_out< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > ARM_CORBA_REQUEST_CALL_out;
    typedef IT_Cxx_ObjRef_se< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > IT_Gen_ARM_CORBA_REQUEST_CALL_se;
    typedef IT_Cxx_ObjRef_mgr< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL, IT_Cxx_IntfAlloc< ARM_CORBA_REQUEST_CALL_ptr, ARM_CORBA_REQUEST_CALL> > IT_Gen_ARM_CORBA_REQUEST_CALL_mgr;
#endif
    class IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL;
    class IT_Gen_ARM_CORBA_REQUEST_CALLStreamable;

    class ARM_CORBA_REQUEST_CALL : 
        public virtual CORBA::Object
    {
      public:

        typedef ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr _ptr_type;
        typedef ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_var _var_type;
        virtual ~ARM_CORBA_REQUEST_CALL();
        static ARM_CORBA_REQUEST_CALL_ptr
        _narrow(
            CORBA::Object_ptr obj
        );
                static ARM_CORBA_REQUEST_CALL_ptr
        _unchecked_narrow(
            CORBA::Object_ptr obj
        );
        inline static ARM_CORBA_REQUEST_CALL_ptr
        _duplicate(
            ARM_CORBA_REQUEST_CALL_ptr p
        );
        inline static ARM_CORBA_REQUEST_CALL_ptr
        _nil();

        virtual CORBA::Long
        Send(
            const ARM_CORBA_REQUEST&  inRequest,
            ARM_CORBA_REQUEST_out  rRequest
        ) = 0;
        static const IT_FWString
        _it_fw_type_id;
    };

    class IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL : 
        public virtual CORBA::IT_Cxx_DPBase,
        public virtual ARM_CORBA_REQUEST_CALL
    {

      public:
        IT_EXPLICIT IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL(
            CORBA::Object_ptr m_proxy
        );

        virtual ~IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL();

            virtual CORBA::Long
            Send(
                const ARM_CORBA_REQUEST&  inRequest,
                ARM_CORBA_REQUEST_out  rRequest
            );
    };

    class IT_Gen_ARM_CORBA_REQUEST_CALLStreamable :
        public CORBA::IT_Cxx_InterfaceStreamableBase
    {
      public:
        IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
            IT_Bool free_val,
            ARM_CORBA_REQUEST_CALL_ptr* _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST_CALL
        ) :
            CORBA::IT_Cxx_InterfaceStreamableBase(_orb, _type, IT_FALSE, free_val),
            m_ptr(_val)
        {}

        IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
            ARM_CORBA_REQUEST_CALL_ptr _val,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST_CALL
        );

        IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
            ARM_CORBA_REQUEST_CALL_ptr* _val,
            IT_Bool _adopt,
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST_CALL
        );

        IT_EXPLICIT IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
            CORBA::IT_ORB_ptr _orb,
            CORBA::TypeCode_ptr _type = _tc_ARM_CORBA_REQUEST_CALL
        );

        ~IT_Gen_ARM_CORBA_REQUEST_CALLStreamable();

        void
        read(
            CORBA::IT_InStream_ptr is
        );

        void
        write(
            CORBA::IT_OutStream_ptr os
        ) const;

        CORBA::IT_Streamable*
        clone(
            CORBA::TypeCode_ptr _type = 0
        ) const;

        void
        prepare_nonshareable_arg(
            CORBA::IT_OutStream_ptr os,
            unsigned long _direction
        );

        void
        replace_nonshareable_arg(
            CORBA::IT_InStream_ptr is,
            unsigned long _direction
        );

        void
        insert(
            ARM_CORBA_REQUEST_CALL_ptr* _val
        )
        {
            m_ptr = _val;
        }

        void
        insert(
            ARM_CORBA_REQUEST_CALL_ptr _val
        );

        void
        insert(
            ARM_CORBA_REQUEST_CALL_ptr* _val,
            IT_Bool _adopt
        );

        ARM_CORBA_REQUEST_CALL_ptr&
        extract() const;

        IT_Bool
        extract_from(
            const CORBA::Any& _any
        ) const;

        static IT_Gen_ARM_CORBA_REQUEST_CALLStreamable*
        _downcast(
            CORBA::IT_Streamable* _s
        );
        ART_DECL_LOCAL_NARROW

        CORBA::Object_ptr
        widen_to_object() const;

      protected:
        ARM_CORBA_REQUEST_CALL_ptr* m_ptr;
        ARM_CORBA_REQUEST_CALL_ptr  m_val;

      private:
        IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
            const IT_Gen_ARM_CORBA_REQUEST_CALLStreamable&
        );
        void operator=(
            const IT_Gen_ARM_CORBA_REQUEST_CALLStreamable&
        );
    };

}


typedef ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL IT_Gen_GlobalScope_ARM_CorbaRequestModule_IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL;
inline ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr
ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_duplicate(
    ARM_CORBA_REQUEST_CALL_ptr obj
)
{
    if (obj != 0)
    {
        obj->_add_ref();
    }

    return obj;
}

inline ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr
ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_nil()
{
    return 0;
}

inline
ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE::ARM_CORBA_STRING_ARRAY_TYPE(
) :
    IT_Cxx_UStringSeq()
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE::ARM_CORBA_STRING_ARRAY_TYPE(
    CORBA::ULong max,
    CORBA::ULong length,
    char** buf,
    CORBA::Boolean release
) :
    IT_Cxx_UStringSeq(max, length, buf, release)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE::ARM_CORBA_STRING_ARRAY_TYPE(
    CORBA::ULong max
) :
    IT_Cxx_UStringSeq(max)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE::ARM_CORBA_STRING_ARRAY_TYPE(
    const ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE& seq
) :
    IT_Cxx_UStringSeq(seq)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE::ARM_CORBA_LONG_ARRAY_TYPE(
) :
    IT_Cxx_UFixedSeq< CORBA::Long >()
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE::ARM_CORBA_LONG_ARRAY_TYPE(
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Long* buf,
    CORBA::Boolean release
) :
    IT_Cxx_UFixedSeq< CORBA::Long >(max, length, buf, release)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE::ARM_CORBA_LONG_ARRAY_TYPE(
    CORBA::ULong max
) :
    IT_Cxx_UFixedSeq< CORBA::Long >(max)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE::ARM_CORBA_LONG_ARRAY_TYPE(
    const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE& seq
) :
    IT_Cxx_UFixedSeq< CORBA::Long >(seq)
{}

inline ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE::operator=(
    const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE& seq
)
{
    IT_Cxx_UFixedSeq< CORBA::Long >::operator=(seq);
    return *this;
}

inline
ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE::ARM_CORBA_DOUBLE_ARRAY_TYPE(
) :
    IT_Cxx_UFixedSeq< CORBA::Double >()
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE::ARM_CORBA_DOUBLE_ARRAY_TYPE(
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Double* buf,
    CORBA::Boolean release
) :
    IT_Cxx_UFixedSeq< CORBA::Double >(max, length, buf, release)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE::ARM_CORBA_DOUBLE_ARRAY_TYPE(
    CORBA::ULong max
) :
    IT_Cxx_UFixedSeq< CORBA::Double >(max)
{}

inline
ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE::ARM_CORBA_DOUBLE_ARRAY_TYPE(
    const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE& seq
) :
    IT_Cxx_UFixedSeq< CORBA::Double >(seq)
{}

inline ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE::operator=(
    const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE& seq
)
{
    IT_Cxx_UFixedSeq< CORBA::Double >::operator=(seq);
    return *this;
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable _strm(_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_STRING_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable _strm(_val, IT_TRUE, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_STRING_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_STRING_ARRAY_TYPE);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable _strm(_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_LONG_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable _strm(_val, IT_TRUE, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_LONG_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_LONG_ARRAY_TYPE);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable _strm(_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_DOUBLE_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable _strm(_val, IT_TRUE, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_DOUBLE_ARRAY_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_DOUBLE_ARRAY_TYPE);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_OBJ_TYPE _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable _strm(_val, 0, ARM_CorbaRequestModule::_tc_ARM_OBJ_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_OBJ_TYPE& _val
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable _s(&_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_OBJ_TYPE);
    return _s.extract_from(_any);
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable _strm(_val, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE_TYPE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE& _val
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable _s(&_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE_TYPE);
    return _s.extract_from(_any);
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_VALUE& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable _strm(_val, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_VALUE* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable _strm(_val, 1, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_VALUE*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_VALUE*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_VALUE*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_VALUE*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_PARAM& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable _strm(_val, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_PARAM);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_PARAM* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable _strm(_val, 1, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_PARAM);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_PARAM*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_PARAM);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_PARAM*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_PARAM*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_PARAM*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_REQUEST& _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable _strm(_val, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST* _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable _strm(_val, 1, 0, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST*& _val
)
{
    _val = 0;
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    const ARM_CorbaRequestModule::ARM_CORBA_REQUEST*& _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST*& _newval = IT_CONST_CAST(ARM_CorbaRequestModule::ARM_CORBA_REQUEST*&, _val);
    return operator>>=(_any, _newval);
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr _val
)
{
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(_val);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable _strm(_val, CORBA::IT_ORB::_nil(), ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST_CALL);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline void
operator<<=(
    CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr* _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr _p = _val != 0 ? *_val : ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_nil();
    CORBA::IT_ORB_ptr _orb = CORBA::IT_ORB::_nil();
    if (!CORBA::is_nil(_p))
    {
        try
        {
            _orb = _p->_it_get_orb_nc();
        }
        catch (const CORBA::SystemException&)
        {}
    }
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable* _ps =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::_downcast(_s);
    if (_ps != 0)
    {
        _ps->insert(&_p, IT_TRUE);
    }
    else
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable _strm(&_p, IT_TRUE, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST_CALL);
        _any.it_set_streamable(&_strm, IT_DEEP_COPY);
    }
}

inline CORBA::Boolean
operator>>=(
    const CORBA::Any& _any,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr& _val
)
{
    _val = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_nil();
    CORBA::Boolean _extract_ok = 0;
    CORBA::IT_Streamable* _s1 = _any.it_get_streamable();
    if (_s1 != 0)
    {
        CORBA::IT_ORB_ptr _orb = _s1->get_orb_nc();
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable _s(IT_FALSE, &_val, _orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST_CALL);
        _extract_ok = _s.extract_from(_any);
    }
    return _extract_ok;
}

#endif
