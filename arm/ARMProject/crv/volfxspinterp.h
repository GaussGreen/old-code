/*
 * $Log: volfxspinterp.h,v $
 * Revision 1.4  2003/11/19 11:13:21  mab
 * Call interpolation with y2Null = 0 instead of 1
 *
 * Revision 1.3  2003/11/17 16:40:55  mab
 * Change Precision from 1e-6 to 1e-8
 *
 * Revision 1.2  2003/11/17 14:14:17  mab
 * Change of the Precision Value
 *
 * Revision 1.1  2003/11/14 11:18:47  mab
 * Initial revision
 *
 */

/*----------------------------------------------------------------------------*/
/*                                                                            */
/* FILE        : volfxspinterp.h                                              */
/*                                                                            */
/* DESCRIPTION : Header for the ARM_FXVolSmileInterpol class, a class         */ 
/*               dealing with spline FX Vol Interpolation                     */
/*                                                                            */
/* DATE        : Nov. 2003                                                    */
/*                                                                            */
/*----------------------------------------------------------------------------*/
#ifndef _VOLFXSPINTERP_H 
#define _VOLFXSPINTERP_H



#include "linalg.h"
#include "volcurv.h"
#include "fromto.h"
#include "interpol.h"


// Empirical constant according to the actual market
#define FACTOR_T    0.9 




class ARM_FXVolSmileInterpol : public ARM_Object 
{
    private:
   
        // *-----> Instances variables generated by the constructors

        ARM_Vector itsMatus;     // Fx vol. maturities(lines) 
        ARM_Vector itsDeltaCols; // Fx vol delta values(columns)        

        ARM_Vector itsATMVols;   // ATM FX Vols.

        ARM_Matrix itsSmile;     // Smile Matrix 


        // *-----> Calculated variables (for storage)

        double     itsFirstFirstDeriv; // the First first deriv. 
        double     itsLastFirstDeriv;  // the last first deriv.  

        ARM_Vector itsCurSelectedDelta; 
        ARM_Vector itsCurSelectedVol; 

        ARM_Vector itsSecondDeriv; //  2nd deriv. Array

        ARM_Vector itsIo;// 2nd deriv. of interpol. func. 
        ARM_Vector itsS; // values of interpol. func.

        int        itsY2NullFlag; // 1->"natural spline", 0--> "clamped spline"


        // private methods

        void Init(void);

        void AddATMVolToSmile(void);

        void CalculateSecondDerivative(const int indDate);// Second Derivatives calculation

        double SplineInterpolate(const double delta, const int keep2Der = 0);

        // Interpolate on a line by its index 
        double InterpolDeltaIndex(const int indDate,
                                  const double delta, const int y2Null);


        double InterpolDeltaMatu(const double date, const double delta,
                                 const int yN2Null);

        double LinInterpol(const double  Xinf, const double Xsup,
                           const double Yinf, const double Ysup,
                           const double X);

        

        // Methods to retrieve bounds
        void FindDeltaBounds(int& indInfDelta, int& indSupDelta,
                             const double delta);

        void FindMatuBounds(int& indInfDate, int& indSupDate, const double matu);

        void BitwiseCopy(const ARM_Object* srcVolCurve);

        void Copy(const ARM_Object* vCurve)
        {
            ARM_Object::Copy(vCurve);

            BitwiseCopy(vCurve);
        }

   public:

       ARM_FXVolSmileInterpol(void);

       ARM_FXVolSmileInterpol(ARM_VolCurve* fxVol);

       ARM_FXVolSmileInterpol(const ARM_FXVolSmileInterpol& volCurve);

      ~ARM_FXVolSmileInterpol(void);

       ARM_FXVolSmileInterpol& operator = (const ARM_FXVolSmileInterpol& volCurve);

       ARM_Object* Clone(void)
       {
           ARM_FXVolSmileInterpol* theClone = new ARM_FXVolSmileInterpol();

           theClone->Copy(this);

           return(theClone);
       }

       ARM_Vector& GetMatus(void)
       {
           return(itsMatus); // Fx vol. maturities(lines)
       } 

       ARM_Vector& GetATMVols(void)
       {
           return(itsATMVols); // ATM FX Vols.
       } 

       double GetBSDelta(const double fwd, const double strike,
                         const double vol, const double T,
                         int CallPut = K_CALL);

       // Principal Interpol method in strike, forward and time 
       double InterpolInStrikeFwdTime(double Forward, 
                                      double Strike,
                                      double matu,
                                      double Precision,
                                      double sigmaATMF,
                                      int y2Null);

       double ComputeFxVol(ARM_Date& AsOf,
                           ARM_Date& matuDate,
                           double calcMatu,
                           double fxSpot, // The FX spot, not the Fwd!
                           double strike,
                           ARM_ZeroCurve* discCrv, // JPY
                           ARM_ZeroCurve* divCrv)  // USD
       {
           // case of FX Options pricing with smile

           // Compute the FX fwd
           double FXFwd = CalcFwdFXSpot(AsOf,
                                        fxSpot,
                                        matuDate,
                                        discCrv, // JPY
                                        divCrv); // USD

           // Interpolate Vol
           ARM_FXVolSmileInterpol* fxVolInterpol;

           fxVolInterpol = this;

           // Get ATM Vol.
           ARM_Vector& Matus   = fxVolInterpol->GetMatus();
           ARM_Vector& ATMVols = fxVolInterpol->GetATMVols();
           double sigmaATMF    = linInterpol2(&Matus, calcMatu, &ATMVols);

           double Precision = 1e-8;
           int    y2Null    = 0;

           double vol;
           vol = fxVolInterpol->InterpolInStrikeFwdTime(FXFwd,
                                                        strike,
                                                        calcMatu,
                                                        Precision,
                                                        sigmaATMF,
                                                        y2Null);

           return(vol); 
       }
};




#endif
/*----------------------------------------------------------------------------*/
/*---- End Of File ----*/
