		{	
        	" ARM_Credit_Version",		/// name of the C++ function
            " R",							/// 1 parametres = 0 d'entree + 1 parametre de retour 
            " ARM_Credit_Version",
			" ",
            " 1",						/// visible in excel
            XLLOCALARM_CREDIT_GROUP,
            " ",
            " ",
            " Get Kernel Version "
		},
		/// ==> CREDIT (7 Functions)
		{
				" ARM_Credit_GetLabel",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_GetLabel",
                " ZPCurve id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_GetLabel,
                " Gives the Label of a Par Yield Zero Curve", 
                " ZPCurve id"
                XLLOCALARM_CREDIT_GROUP,                
        },
		{
				" ARM_Credit_SetLabel",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetLabel",
                " ZPCurve id, Label",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_SetLabel,
                " Set the Label of a Par Yield Zero Curve", 
                " ZPCurve id",
				" Label of the curve in string format"
        },
		{
				" ARM_Credit_Spread",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Spread",
                " Pricer Id,[MTM Value]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Retreive the spread for a given MTM", 
                " Pricer id",
                " Default Value is 0",
        },
		{
				" ARM_Credit_NPV",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_NPV",
                " Pricer Id,[Option]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes NPV for Fee leg or Default Leg", 
                " Pricer id",
                " Type of NPV (NPV,FEELEG,DEFLEG,ACCRUED,PREMIUM,FWDSPREAD,CORREL_DOWN,CORREL_UP,AVGCORRDEF)", // ACCRUED_PV is yet ok
        },
		{
				" ARM_Credit_GetDefProbTranche",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetDefProbTranche",
                " Pricer Id,YearTerm",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes Default Probabilities for a given CLDPRICERMEZ", 
                " Pricer id",
                " Year Term",
        },
		{
				" ARM_Credit_GetCleanSpreadTranche",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetCleanSpreadTranche",
                " Pricer Id,Tenor",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes Clean Spreads for a given CLDPRICERMEZ", 
                " Pricer id",
                " Tenor (must be equal to one of the Tenor of first defcurve of model)",
        },
		{
				" ARM_Credit_GetDuration",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_GetDuration",
                " Pricer Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes Duration for a given tranche or Basket Default Swap", 
                " Pricer id"
        },
		{
				" ARM_Credit_Sensitivity",
                " RRRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Sensitivity",
                " Pricer id, [TypeSensi],[Plot],[Label],[Epsilon], [epsilonGamma]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Sensitivity,
                " Computes Sensitivy of a security with the given model (For Credit Pricing)", 
                " Pricer id", 
                " Possible values are 'SPREAD','IRCURVE','RECOVERY','CORRELATION','BETA','CORR_BARY','ISSUER_DEFAULT','FAST_SPREAD','SAME_CORRELATION','SAME_BETA', 'REL_SHIFTSP' (cf help file for details)",
                " To Bump a Single Plot ex : 1M,2M.. (use the plots used to Creates the specify curve) ",
				" Sensitivity to a given Curve (for multicurves models) ",
				" Epsilon for bump (the use of epsilon depends of TypeSensi) "
				" EpsilonGamma for // bump of Gamma "
        },
		{
				" ARM_Credit_DTR",
                " RRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DTR",
                " Pricer id, Nb of defaults, [Short or Long], Labels , Recovery Rates",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Sensitivity,
                " Computes DTR of a CDO² with a profile of default", 
                " Pricer id", 
                " Number of Defaults" ,
                " Short or Long position",
				" List of Labels",
				" Recovery Rates "
        },
		{
				" ARM_Credit_CorrelationSmile",
                " RRRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorrelationSmile",
                " Pricer id, SmileType, MktData, Seed, UpfrontPayment, [DataType] ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
				IDH_ARM_Credit_Sensitivity,
                " Computes Correlation Smile or Beta Smile for a Tranche", 
                " Pricer id", 
                " Possible values are 0 for 'CORRELATION', 1 for 'BETA'(cf help file for details)",
                " Market Data which may be the Market Spread or the Market Default Leg value",
				" Initial value of Correlation (between 1% and 99%) or shift to betas ",
				" Upfront payment for the tranche",
				" Possible values are 0 for 'Mkt Spread' (Default Value), 1 for 'Default Leg' "
        },
		{
				" ARM_Credit_SurvivalProba",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SurvivalProba",
                " Default Curve id, Maturity ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Survival Probability", 
                " Default Curve id", 
                " Maturity in EXCEL date format"
		},
		{
				" ARM_Credit_DefaultIntensity",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefaultIntensity",
                " Curve id, Maturity",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefaultIntensity,
                " Compute Default Intensity", 
                " Default Curve id", 
                " Maturity in EXCEL date format"
		},
		{
				" ARM_Credit_DefaultProba",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefaultProba",
                " Default Curve id, Maturity ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefaultProba,
                " Compute Default Probability", 
                " Default Curve id", 
                " Maturity in EXCEL date format"
		},
		{
				" ARM_Credit_FIXEDLEG",
                " RRRRRRRRRRRRRRRRRR",						// 20 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DEFFIXEDLEG",
                " startDate,endDate,fixedRate,AccOnDefault,AccDayCount,LastIndexFixing,rcvOrPay,[freq],[dayCount],[decompFreq],[payTiming],[intRule],[stubRule],[discountCcy],[payCalName],[nxChange],[refDate]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a FIXDEFLEG",
				" startDate of the leg",
				" endDate of the leg",
				" fixedRate in bp",
				" AccOnDefault",
				" AccDayCount (default 30/360)",
				" LastIndexFixing (default 0.)",
				" rcvOrPay (default Receive)",
				" freq (default Q)",
				" dayCount (default 30/360)",
				" decompFreq",
				" payTiming (default Arrear)",
				" intRule (default Unadjusted)",
				" stubRule (default Short Start)",
				" discountCcy: Object Currency ",
				" payCalName (default Local Currency)",
				" nxChange (default NXNONE)",
				" refDate"
        },
		{
				" ARM_Credit_BOND",
                " RRRRRRRRRRRRRRR",					// 15 parametres d'entree + 1 parametre de retour
                " ARM_Credit_BOND",
                " StartDate,Maturity,Rate,[FixingFreq],[DayCount],[refdate],[Notional],[AccOnDef],[Discount ccy],[PayCal],[AccDayCount],[SettleGap],[Redemption Value]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a bond defaultable",
				" Start Date for interests in EXCEL date format",
				" Bond Maturity in EXCEL date format",
				" yearly fixed rate",
				" Fixing frequency (default ANNUAL)",
				" Daycount of the bond (default ACTUAL)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional value of the bond (default 1000000)",
				" Accrued on default (default ACC)",
				" Discount Currency (default local)",
				" Payment Calendar (default local)",
				" Daycount for the accrued (default ACTUAL)",
				" Settlement Gap (default 2)",
				" Redemption Value in % (110 is 110%)"
        },
		{
				" ARM_Credit_YTOPRICE",
                " RRRR",							// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_YTOPRICE",
                " Bond id,Settlement,Yield",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns Clean price (in units) of a bond for a given Yield to maturity at settlement date", 
                " Reference of the bond object", 
                " Settlement date in EXCEL date format",
				" Yield to maturity (in percentage points)"
        },
		{
				" ARM_Credit_PTOYIELD",
                " RRRR",							// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_PTOYIELD",
                " Bond id,Settlement,Price",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Computes the Yield to maturity of a bond corresponding to a given Clean price at settlement date", 
                " Reference of the bond object", 
                " Settlement date",
				" Clean price (in units)",
        },
		{
				" ARM_Credit_CDS",
                " RRRRRRRRRRRRRRRRRRRRR",					// 20 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CDS",
                " EffectiveDate,Maturity,Spread,[FixingFreq],[DayCount],[rolldate],[PremNot],[DefNot],[StubRule],[DiscCcy],[CreditLag],[Adjusted],[IncMatu],[ProtecStart],[ProtecEnd],[Name],[Binary],[FstCpnEffDate],[StartAdj], [othersParams]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Credit Default Swap",
				" Effective Date of the CDS in EXCEL date format",
				" Maturity of the CDS in EXCEL date format",
				" yearly Spread (in bp)",
				" Fixing frequency (QUATERLY)",
				" Daycount of the Cds (A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional of the premium leg (1000000)",
				" notional of the Default leg (1000000)",
				" Stub Rule (SS)",
				" Discount Currency (local)",
				" Credit Lag ( 0)",
				" End Periods Adjusted (ADJ) else NOADJ",
				" Include Maturity ( Y)",	
				" Protection Start Date ( Effective Date)",
				" Protection End Date (Maturity Date)",
				" Issuer Name (undefine)",
				" Binary ( non binary)",
				" First Coupon Effective Date ( -1)",
				" Start Periods Adjusted (ADJ) else NOADJ",
				" tab of AccruedOnDef(ACC) NotionalExchangeType(NXNONE) NotionalExchange"  
        },
		{
				" ARM_Credit_CMCDS",
                " RRRRRRRRRRRRRRRRRR",					// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CMCDS",
                " EffectiveDate,Maturity,ParticipationRate,Index,[FixingFreq],[DayCount],[rolldate],[PremNot],[DefNot],[StubRule],[DiscCcy],[CreditLag],[Adjusted],[IncMatu],[ProtecStart],[ProtecEnd],[FstCpnEffDate]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Constant Maturity Credit Default Swap",
				" Effective Date of the CMCDS in EXCEL date format",
				" Maturity of the CMCDS in EXCEL date format",
				" Participation Rate (in bp)",
				" Index",
				" Fixing frequency (default QUATERLY)",
				" Daycount of the CMCds (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional of the premium leg (default 1000000)",
				" notional of the Default leg (default 1000000)",
				" Stub Rule (default SS)",
				" Discount Currency (default local)",
				" Credit Lag (default 0)",
				" End Periods Adjusted (default:ADJ) else NOADJ",
				" Include Maturity (default: Y)",
				" Protection Start Date (default is Effective Date)",
				" Protection End Date (default is Maturity Date)",
				" First Coupon Effective Date (default is -1)"
        },
		{ 
				" ARM_Credit_CAPFLOORCMCDS",
                " RRRRRRRRRRRRRRRRRRR",					// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CAPFLOORCMCDS",
                " EffectiveDate,Maturity,[Cap Value], [Floor Value], ParticipationRate,Index,[FixingFreq],[DayCount],[rolldate],[PremNot],[DefNot],[StubRule],[DiscCcy],[CreditLag],[Adjusted],[IncMatu],[ProtecStart],[ProtecEnd]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Constant Maturity Credit Default Swap with Cap and/or Floor",
				" Effective Date of the CMCDS in EXCEL date format",
				" Maturity of the CMCDS in EXCEL date format",
				" Cap Level in bps",
				" Floor Level in bps",
				" Participation Rate (in bp)",
				" Index",
				" Fixing frequency (default QUATERLY)",
				" Daycount of the CMCds (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional of the premium leg (default 1000000)",
				" notional of the Default leg (default 1000000)",
				" Stub Rule (default SS)",
				" Discount Currency (default local)",
				" Credit Lag (default 0)",
				" End Periods Adjusted (default:ADJ) else NOADJ",
				" Include Maturity (default: Y)",
				" Protection Start Date (default is Effective Date)",
				" Protection End Date (default is Maturity Date)"
        },
		{
				" ARM_Credit_FRN",
                " RRRRRRRRRRRRRRRR",					// 17 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FRN",
                " Spread,StartDate,Maturity,Index,[FstPeriodRefdate],[InitialRate],[LastIndexFixing],[AccOnDef],[NotAmount],[DayCountFrq],[AccDayCount],[SettlGap],[Currency],[ResetCal],[PayCal]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Floating Rate Note Defaultable",
				" Spread of the FRN in bp",
				" Start Date in EXCEL date format",
				" Maturity Date in EXCEL date format",
				" Object IRIndex for FRN",
				" First Period Reference date (next coupon after StartDate according frequency)",
				" Intial Rate in % (5 is 5%)",
				" Last Fixing Rate in % (5 is 5%)",
				" Accrued on default case (default ACC)",
				" notional amount (default 1000000)",
				" Daycount (default A360)", 
				" Accrued Daycount (default ACTUAL)", 
				" Settlement gap (default 2)",
				" Discount Currency (default local)",
				" Reset Calendar",
				" Payment Calendar"
        },
		{
				" ARM_Credit_CLN",
                " RRRRRRRRRRRRRRRRRRRR",					// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CLN",
                " StartDate,Maturity,Spread,[IndexObjectId],[refdate],[fstcpnrefdate],[Notional],[AccOnDef],[DayCountFrq],[DecompFreq],[StubRule],[ResetGap],[Currency],[ResetCalendar],[PayCalendar],[NxChange],[IncludeMaturity],[adjstartdate],[Binary]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Credit Linked Note",
				" StartDate",
				" Maturity",
				" Spread",
				" Object IRIndex",
				" refdate",
				" fstcpnrefdate",
				" Notional",
				" AccOnDef",
				" DayCountFrq",
				" DecompFreq",
				" StubRule", 
				" ResetGap", 
				" Currency",
				" Reset Calendar",
				" Payment Calendar",
				" Notional exchange",
				" Include Maturity",
				" AdjStartDate",
				" Binary"
        },
		{
				" ARM_Credit_DisplaySV",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DisplaySV",
                " Pricer id,typeValue",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " returns vector containing a type of values of the Pricer", 
                " Pricer id", 
                " type of values (FWDRATE, INTERESTDAYS...)",
		},
		{
				" ARM_Credit_DisplaySD",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DisplaySD",
                " Instrument id,typeValue",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " returns vector containing a type of values of the schedule of an ICM Leg", 
                " object id", 
                " type of values (FWDRATE, INTERESTDAYS...)"
        },
		{
				" ARM_Credit_DisplayMatrix",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_DisplayMatrix",
                " Pricer id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns the pricing matrix of a given pricer", 
                " Pricer id"
        },
		{
				" ARM_Credit_Price",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Price",
                " Pricer id,[Execution Date]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Price a security with the given model (For Credit Pricing)", 
                " Pricer id", 
				" Execution Date for Forward price (default is AsOfDate of the model)  in EXCEL date format"
        },
		{
				" ARM_Credit_PriceVector",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_PriceVector",
                " Pricer id, measure name ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns the given 1D-Vector pricing measure", 
                " Pricer id", 
				" Measure name "
        },
		{
				" ARM_Credit_FTD",
                " RRRRRRRRRRRRRRRR",					// 15 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FTD",
                " EffectiveDate,EndDate,Spread,[Labels],[FixingFreq],[DayCount],[refdate],[IssuerNotional],[AccruedOnDefault],[Discount ccy],[CreditLag],[Stub],[FstCpnEffDate], [intRule],[startAdj]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a First To default",
				" Effective Date of the FTD in EXCEL date format",
				" Maturity of the FTD in EXCEL date format",
				" yearly Spread (in bp)",
				" Labels of DefProbCurves (default is empty)",
				" Fixing frequency (default QUATERLY)",
				" Daycount of the Ftd (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional for each Issuer (default 1000000)",
				" Accrued on default case (default ACC)",
				" Discount Currency (default local)",
				" Pay Credit Lag - can be numeric or date (default 0)",
				" Stub - (default LS)",
				" First Coupon Effective Date (default is -1)"
				" int rule ( period adjustement) (default is Y)"
				" start period adjustement (default is Y)"
        },
		{
				" ARM_Credit_NTHTD",
                " RRRRRRRRRRRRRRRRRRRRRR",					// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_NTD",
                " EffectiveDate,EndDate,Spread,FirstDefault,LastDefault,Issuers Names,[FixingFreq],[DayCount],[refdate],[IssuerNot],[AccruedOnDef],[Discountccy],[CreditLag],[Stub],[DefLegFreq],[Binary],[PayCal],[IncMat],[FstCpnEffDate], [AdjParam]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Nth To Default",
				" Effective Date of the NTHTD in EXCEL date format",
				" Maturity of the NTHTD in EXCEL date format",
				" yearly Spread (in bp)",
				" First Number of Default",
				" Last Number of Default",
				" Labels of DefProbCurves (default is empty)",
				" Fixing frequency (default QUATERLY)",
				" Daycount of the NthTD (default A360)", 
				" first coupon date",
				" notional for each Issuer (1000000)",
				" Accrued on default case (default ACC)",
				" Discount Currency (local)",
				" Pay Credit Lag (default 0)",
				" Stub - (default LS)",
				" Default Leg frequency (default: fee leg Freq)",
				" Binary value",
				" Payment Calendar",
				" Include Maturity (default Y)",
				" First Coupon Effective Date (default is -1)",
				" int rule (default is Y)\n start period adjustement (default is Y)"
        },
		{
				" ARM_Credit_Mezzanine",
                " RRRRRRRRRRRRRRRRRRRRR",					// 20 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Mezzanine",
                " EffectiveDate,EndDate,Spread,SubAmount,MezzAmount,Issuers,Nominals,[FreqFeeLeg],[FreqDefLeg],[DayCount],[refdate],[AccruedOnDefault],[Discount ccy],[CreditLag],[Stub],[Binary],[PayCal],[FeeLegType],[DefLegType],[SheduleParams]",//,[FstCpnEffDate]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Mezzanine Tranche",
				" Effective Date of the Mezzanine ",
				" Maturity of the Mezzanine",
				" yearly Spread (bp)",
				" Subordination Amount",
				" Mezzanine Amount",
				" Issuers Vector",
				" Nominals Vector",
				" Fee Leg frequency (default QUATERLY)",
				" Default Leg frequency (default QUATERLY)",
				" Daycount of the mezzanine (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" Accrued on default case (default ACC)",
				" Discount Currency	 (default local)",
				" Pay Credit Lag - can be numeric or date (default 0)",
				" Stub (default LS)",
				" Binary (ex:0.5) (default is no Binary)",
				" Payment Calendar (default is local ccy)",
				" FeeLegType (default is RUNNING)",
				" DefLegType (default is RECOVERY) ",
				" Range Of : Include Maturity (default Y)\nEnd Periods Adjusted (default:ADJ)\nStart Periods Adjusted (default:ADJ) "

				//" Fst Cpn Eff Date (default -1)"
        },
		{
				" ARM_Credit_CMTranche",
                " RRRRRRRRRRRRRRRRRRRRR",					// 20 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CMTranche",
                " EffectiveDate,EndDate,PartRate,SubAmount,MezzAmount,Issuers,Nominals,Index,[FreqFeeLeg],[FreqDefLeg],[DayCount],[refdate],[AccruedOnDefault],[Discount ccy],[PayCreditLag],[Stub],[Binary],[PayCal],[FwdFixedDate],[IncMat]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Constant Maturity Tranche",
				" Effective Date of the Mezzanine in EXCEL date format",
				" Maturity of the Mezzanine in EXCEL date format",
				" Participation Rate",
				" Subordination Amount",
				" Mezzanine Amount",
				" Issuers Vector",
				" Nominals Vector",
				" Credit Index",
				" Fee Leg frequency (default QUATERLY)",
				" Default Leg frequency (default QUATERLY)",
				" Daycount of the mezzanine (default A360)",
				" first coupon date (next coupon after StartDate according frequency)",
				" Accrued on default case (default ACC)",
				" Discount Currency (default local)",
				" Pay Credit Lag - can be numeric or date (default 0)",
				" Stub - (default LS)",
				" Binary (ex:0.5) (default is no Binary)",
				" Payment Calendar",
				" FwdFixedDate", 
				" Include Maturity (default Y)"
        },
		{
				" ARM_Credit_ModelMultiCurves",
                " RRRRRRRRRR",	 					// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_ModelMultiCurves",
                " Default curves,Discount Curve,[CorrelationId],[Recoveries],[VolCurve],[CloneOrNot],[CpnInfCurve],[CpnIRCurve]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
                " Creates a Multi Curves Model",
				" Vector of default curves Id",
				" Discount Curve Id",
				" Correlation Object",
				" Vector of Recovery rates",
				" Volatility Curve (for option pricing)",
				" Clone or Not (default is Y)",
				" Cpn Inflation Curve (default is NONE)",
				" Cpn IR Curve (default is NONE)"
        },
		{
				" ARM_Credit_Collateral",
                " RRR",						//
                " ARM_Credit_Collateral",
                " Labels,Notionals",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a collateral",
                " Vector of Issuer Labels",
				" Vector of notionals (ex: 1000000)"
        },
		{
				" ARM_Credit_VariableCollateral",
                " RRR",						//
                " ARM_Credit_VariableCollateral",
                " Labels,Notionals",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a collateral with variable notionals",
                " Vector of Issuer Labels",
				" Vector of RefValue Ids"
        },
		{
				" ARM_Credit_Portfolio",
                " RRR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Portfolio",
                " Securities,[ParamObj]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Portfolio of securities",
                " Vector of Securities Id",
				" Parameters object Id"
        },
		{
				" ARM_Credit_CashFlows",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_CashFlows",
                " CF Matrix",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a CashFlow Security",
                " Cash Flows Matrix with Labels as the first row"
        },
		{
				" ARM_Credit_Parameters",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Parameters",
                " Pricing Parameters",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Parameters Object",
                " Cash Flows Matrix with Labels as the first row"
        },
		{
				" ARM_Credit_PropertyList",
                " RRRR",						// 3 input + 1 output
                " ARM_Credit_PropertyList",
                " Attribute Names, Attribute Valyes, [Attribute Types] ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a PropertyList",
                " Attributes Names [column]",
				" Attributes Values [colmun]",
				" Attributes Types : double|string|int|object|date "
        },
		{
				" ARM_Credit_RiskyDuration",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_RiskyDuration",
                " DefCurveId,Date",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Returns CDS Duration gor a given Default Curve",
                " DefCurveId",
				" Date (XL) or Tenor"
        },
		{
				" ARM_Credit_RiskyPV01",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_RiskyPV01",
                " DefCurveId,[Date1],Date2",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Returns a Forward PV01",
                " DefCurveId",
				" Date 1 in excel format (default: curve asof)",
				" Date 2 (XL) or Tenor (string)",
        },
		{
				" ARM_Credit_RiskyPV01AsSensitivity",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_RiskyPV01AsSensitivity",
                " DefCurveId,Tenor",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Returns a PV01 for a specific tenor (sensitivity computaiton)",
                " DefCurveId",
				" Tenor (string)"
        },
		{
				" ARM_Credit_DefCurveFromSummit",
                " RRRRRRR",					// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefProbFromSummit",
                " AsOfDate,Issuer,CurveName,[IRcurveId],[Label]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve based on intensity model",
				" As Of Date in EXCEL date format",
                " Issuer Summit Id",
				" Curve Name : MO ...",
				" IRcurveId : Interests Rates Curve ",
				" Label of the curve in string format (default is Summit Issuer)"
        },	
	    {
				" ARM_Credit_DefCurveFromCalypso",
                " RRRRRRRRRRR",					
                " ARM_Credit_DefProbFromCalypso",
                " AsOfDate,Issuer,Ccy,Seniority,PricingEnv,[IRcurveId],[Label],[forceCurveName],[xmlFileName]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Retrieve & Calibrate a Default Curve from Calypso",
				" AsOfDate ",
                " Issuer ",
				" Ccy ",
				" Seniority ",
				" PricingEnv ",
				" IRcurveId : Interests Rates Curve ",
				" Label ",
				" forceCurveName" ,
				" xmlFileName "
        },
		{
				" ARM_Credit_DPMktDataFromCalypso",
				" RRRRRRRRR",
				" ARM_Credit_DPMktDataFromCalypso",
				" AsOfDate ,PricingEnv ,Issuer , seniority,Ccy, Parameter ,[forceCurveName] , [xmlFile] ",
				" 1",
				XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
				" Retrieve Default Curve datas from calypso",
				" AsOfDate",
				" PricingEnv",
				" Issuer",
				" Seniority: SEN , SUB ...",
				" Ccy",
				" Parameters : MATU, SPREAD, CCY, INDEX, ADJCDS, RECOVERY",
				" ForceCurveName",
				" xmlFile",
				" Parameter : type of datas to retrieve" 
		},
	    {
				" ARM_Credit_DPMktDataFromSummit",
                " RRRR",					// 4 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefProbMktDataFromSummit",
                " AsOfDate,Issuer,CurveName",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Returns the summit market data of a defprobcurve ",
				" As Of Date in EXCEL date format",
                " Issuer Summit Id",
				" Curve Name : MO ..."
        },	
	    {
				" ARM_Credit_CptInterpolDefCurve",
                " RRR",					// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_InterpolDefCurve",
                " DefCurveId,Plot",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Returns the implicit interpolated spread",
				" Default Curve Id",                
				" Plot : 1Y or Excel Date cell"
        },	
	    {
				" ARM_Credit_createFlatCurve",
                " RRR",					// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_createFlatCurve",
                " DefCurveId,Plot",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Constructs a flat curve from an existing curve",
				" Default Curve Id",                
				" Plot used for flat rate : 1Y or Excel Date cell"
        },	
		{
				" ARM_Credit_createDefCurveFromBase",
                " RRRR",					// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_createDefCurveFromBase",
                " DefCurveIdCDS,DefCurveIdIndex,vectorOfBase",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Constructs a flat curve from an existing curve",
				" Default Curve Id of Issuer",
                " Default Curve Id of Index",  
				" vector of base : newSpread = oldSpread/base"
        },
	    {
				" ARM_Credit_CptInterpolDefCurveOLD",
                " RRRRRR",					// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_InterpolDefCurveOLD",
                " DefCurveId,[Plot],[Date],[slope],[ExactDate]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Returns the implicit interpolated spread",
		" Default Curve Id",                
		" Plot ex: 2Y",
		" Date in excel format",
		" Slope (only for 1 tenor)",
		" Date (for exact spread only)"
        },	
		{
				" ARM_Credit_Delivery",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Delivery",
                " AsOfDate,Contract",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns a delivery date", 
                " AsOfDate", 
				" Contract ex: DEC03"
        },
		{
				" ARM_Credit_GetBeta",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetBeta",
                " Pricer id, issuer name",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns beta value for a given pricer and a given issuer", 
                " Pricer id", 
				" Issuer name"
        },
		{
				" ARM_Credit_CorrMatrix",
                " RRRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorrMatrix",
                " Labels,CorrMatrix,[AsOf],[Name]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Correlation Matrix with a labels list",
                " Labels vector",
				" Symetric correlation matrix",
				" AsOf Date",
				" Structure correlation name"
        },
		{
				" ARM_Credit_ExtractCorrelations",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_ExtractCorrelations",
                " CorrMatrix Id, Labels Vector",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Extract a Correlation Matrix following a labels list",
                " Corr Matrix object Id",
				" Labels vector"
        },
		{
				" ARM_Credit_GenSchedule",
                " RRRRRRRRRR",					// 12 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GenSchedule",
                " AccStartDate,AccEndDate,[FixingFreq],[DayCount],[Refdate],[Discount ccy],[ScheduleType],[ModFoll],[CreditGap]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Credit Default Swap",
				" Accrual Start Date in EXCEL date format",
				" Accrual End Date in EXCEL date format",
				" Fixing frequency (default QUATERLY)",
				" Daycount Basis (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" Discount Currency (default local)",
				" Schedule Type (default is Accrual Start Dates)",
				" Adjustement Rule (MF, F, MP, P)",
				" Credit Gap (default is -3)",
		},
/** 		{
				" ARM_Credit_GetProbCondNTD",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetProbCondNTD",
                " Pricer id, issuer name",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns probability for a given issuer to be the Nth to default conditionally to the fact of having at least N defaults at the maturity", 
                " Pricer id", 
				" Issuer name"
        },
		**/
		{
				" ARM_Credit_Cdo2",
                " RRRRRRRRRRRRRRRRRRRR",					// 17 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Cdo2",
                " EffectiveDate,EndDate,PortfolioId,Spread,SubAmount,MezzAmount,[FreqFeeLeg],[DayCount],[refdate],[AccruedOnDefault],[Discount ccy],[CreditLag],[Stub],[FreqDefLeg],[Binary],[PayCal],[CrossSub],[IncMat],[FstCpnEffDate]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Cdo Square",
				" Effective Date of the CDO2 in EXCEL date format",
				" Maturity of the CDO2 in EXCEL date format",
				" Portfolio Id",
				" yearly Spread (in bp)",
				" Subordination Amount",
				" Mezzanine Amount",
				" Frequency Fee Leg (default QUATERLY)",
				" Daycount of the mezzanine (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" Accrued on default case (default ACC)",
				" Discount Currency (default local)",
				//" Variables Spreads as a Reference Value Object (default empty)",
				" Pay Credit Lag - can be numeric or date (default 0)",
				" Stub - (default LS)",
				" Frequency Def Leg (default QUATERLY)",
				" Binary Amount (default No binary)",
				" Payment Calendar",
				" Cross Subordination (Y is true,default is N)",
				" Include Maturity (default Y)",
				" First Coupon Effective Date (default is -1)"
        },
		{
				" ARM_Credit_GetLossDistribution",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetLossDistribution",
                " Pricer Id,Tenor, Loss units",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                IDH_ARM_Credit_Spread,
                " Computes Loss Distribution for SIMPLEPRICERMEZ", 
                " Pricer id",
                " Tenor (must be equal to one of payment dates in Year fraction)",
				" Number of loss units (is an integer between 0 and the maximal number of losses",
        },
        {
        		" ARM_Credit_GetModelFromSummit",
                " RRRRRR",					/// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetModelFromSummit",
		" idSummit,ModelType,ircurve,[CurveId],[CorrCurveId]",
                " 1",						//// non visible
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Get a model by summit Id", 
		" summit deal Id", 
                " type of the Model",
		" Ir Curve object",
		" CurveId for default curves (default MO)",
		" CorrCurveId for correlations exctration (default NONE)"
        },
		{
				" ARM_Credit_Pricer",
                " RRRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Pricer",
                " Security, Model,[PricerType],[Nb Paths],[Parameters Matrix],[AsOf]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Pricer",
                " Credit Security Id",
				" Credit Model Id",
				" COPULA, MC_CDO2, CLD_CDS, INDEX, CDSOPTION, INDEXOPTION, CAPFLOORCMCDS",
				" Number of paths (for Mont Carlo Only)",
				" Parameters Matrix",
				" Valuation Date (in Excel date format)"
        },
/**	{
				" ARM_Credit_CacheOption",
                " RRR",						// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_CacheOption",
                " Pricer Id, Option",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Manage Cache for Distribution Pricer", 
                " Pricer id",
				" Option"
        },
		{
				" ARM_Credit_CpteDefLegTrancheEquivalente",
                " RRRRRRR",						// 6 parametre d'entree + 1 parametre de retour
                " ARM_Credit_CpteDefLegTrancheEquivalente",
                " Pricer Id,StrikeUp1, StrikeUp2, BC1, BC2, SmileType",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes Defleg of a tranche given the strikes of the Equity Tranches and the Correlation (or Beta Shift) to be applied", 
                " Pricer id",
				" Strike of the 1st Equity Tranche",
				" Strike of the 2nd Equity Tranche",
				" Unique Correlation or Beta Shift 1 ",
				" Unique Correlation or Beta Shift 2 ",
				" Smile Type, 0 for Correlation and 1 for Beta "
		},
		{
				" ARM_Credit_CpteStrikesEquivalents",
                " RRRRRR",						// 5 parametre d'entree + 1 parametre de retour
                " ARM_Credit_CpteStrikesEquivalents",
                " Pricer Id,StrikeDown, StrikeUp, IndexNotional, EL_Tranche",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Computes <<EL for Index and Strikes Equivalents>> for ATM Correlation purpose", 
                " Pricer id",
				" StrikeDown of the Tranche to be priced",
				" StrikeUp  of the Tranche to be priced",
				" Total Notional of the index",
				" Expected Loss of the tranche to be priced which is DefLeg(0 - 100%) scaled by the total Notional",
		},
**/ 
/** 
		{
				" ARM_Credit_Debug_Function",
                " RRRR",						// 3 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Debug_Function",
                " Pricer Id, double , Data Vector",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Spread,
                " Function used in several testing", 
                " Pricer id",
				" double",
				" Parameters"
        },
		**/ 
	/*	{
				" ARM_Credit_SetPropMixCopule",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetPropMixCopule",
                " Model, propIndep,propfullcorr",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Set Proportions to ModelMultiCurves",
                " Credit Model Id",
				" Proportion Copule indépendante",
				" Proportion Copule Full Correlation",
        },*/
		{
				" ARM_Credit_SetInterpolationType",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetInterpolationType",
                " Volcurve, Interpolation Type",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Set Interpolation Type to a given Vol Curve",
                " ",
				" VolCurve Id",
				" Interpolation Type, LINEAR, SPLINE",
        },
        {
        		" Local_ARM_ProdConnect",
                " ",					/// 2 parametres d'entree + 1 parametre de retour
                " ARM_ETKConnect",
				" ",
                " 1",						//// non visible
                XLLOCALARM_UTIL_GROUP,
                " ",
                " ",
                " Connect To E-toolkit production", 
        },
/**
		{
				" ARM_Credit_GetBaseCorrelation",
                " RRRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetBaseCorrelation",
                " Pricer id, EquityAmount, Market Spreads, Smile Type, Seeds, Upfronts",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Beta Smile or the equivalent Base Correlation for hypothetic Equity tranche", 
                " Pricer id, must take a CDO2 as parameter",
				" EquityAmount of the Hypothetic Equity Tranche",
				" Market Spreads of the tranched index",
				" Smile Type (0 for Correlation, 1 for Beta)",
				" Initial value of Correlation (between 1% and 99%) or shift to betas",
				" Upfront payment for each tranche",
        },
		{
				" ARM_Credit_GetImpliedCorrelation",
                " RRRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetImpliedCorrelation",
                " Pricer id, Range, Market Spreads, Smile Type, Seeds, Upfronts",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Beta Smile or the equivalent Implied Correlation for a Portfolio", 
                " Pricer id, must take a CDO2 as parameter",
				" Range of the Tranche in the portfolio",
				" Market Spreads of the tranched index",
				" Smile Tipe (0 for Correlation, 1 for Beta)",
				" Initial value of Correlation (between 1% and 99%) or shift to betas",
				" Upfront payment for each tranche",
        },
**/ 
/** 
		{
				" ARM_Credit_Get_MixCopula_Factor",
                " RRRRRRRRR",						// 8 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Get_MixCopula_Factor",
                " Pricer id, SmileType, Base_Correl_1, Base_Correl_2, Seed1, Seed2, Accuracy, FactorType",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
				IDH_ARM_Credit_Price,
                " Calibration of Mix Copula Model : computes the independent proportion and the Full Correlation proportion", 
                " Pricer id", 
                " Possible values are 0 for 'CORRELATION', 1 for 'BETA'(cf help file for details)",
                " Base Correlation or Equivalent Beta Smile for the 1st tranche",
				" Base Correlation or Equivalent Beta Smile for the 2nd tranche",
				" Seed of the independent proportion",
				" Seed of the Full Correlation proportion",
				" Accuracy for the algorithm so as |X-Solution| < Accuracy * Solution",
				" Needed Factor, 0 for Independent and 1 for Full Correlation "
        },		
		{
				" ARM_Credit_Get_ReducedMixCopula_Factor",
                " RRRRRRRR",						// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Get_ReducedMixCopula_Factor",
                " Pricer id, SmileType, Base_Correl_1, Base_Correl_2, SeedBeta, SeedIndep, FactorType",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
				IDH_ARM_Credit_Price,
                " Calibration of Mix Copula Model : computes the independent proportion and the unique beta", 
                " Pricer id",
				" Possible values are 0 for 'CORRELATION', 1 for 'BETA'(cf help file for details)",
                " Base Correlation or Equivalent Beta Smile for the 1st tranche",
				" Base Correlation or Equivalent Beta Smile for the 2nd tranche",
				" Seed of the independent proportion",
				" Seed for the unique Beta",
				" Needed Factor, 0 for Independent and 1 for Unique Beta "
        },
**/ 
	    {
				" ARM_Credit_DefCurvePWC",
                " RRRRRRRRRRRRRRRRRR",					// 8 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurvePWC",
                " AsOfDate,Maturities,Spreads,IRcurveId,Recovery,Ccy,[Label],[AdjCal],[Summit],[VolCurve],[Accrued],[CalibAlgo],[CalibData], [Lag],[Pricing Parameters],[IntRule],[AdjStartRule]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve Piece Wise Constant based on intensity model",
				" As Of Date in EXCEL date format",
                " Maturities ",
				" Spreads in bp ",
				" Recovery Rate",
				" IRcurveId : Interests Rates Curve ",
				" Currency in string format",
				" Label of the curve in string format",
				" Adjustment Calendar [STDCDS@ ",
				" Summit Calibration [YES] )",
				" Vol Curve Flat [NONE]",
				" Accrued Coupon Payment for Premium Leg [USELESS] ",
				" Calibration Algo [DICHO] ",
				" Calib Data [STD])",
				" Lag CDS [CCY lag]"
				" CDS Pricer's Parameters Object [NONE]",
				" CDS IntRule [ADJ]",
				" CDS AdjStartRule [ADJ]"

        },
/** 
	    {
				" ARM_Credit_DefCurveIndex",
                " RRRRRRRRRRRRRRRR",					// 8 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurveIndex",
                " AsOfDate,Maturities,Spreads,RefSpreads,IRcurveId,Recovery,[Ccy],[Label],[AdjCal],[Summit],[VolCurve],[Accrued],[Calib Algo],[Calib Data], [Lag]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve Piece Wise Constant based on intensity model",
				" As Of Date in EXCEL date format",
                " Maturities ",
				" Spreads in bp ",
				" Reference Spreads in bp ",
				" Recovery Rate",
				" IRcurveId : Interests Rates Curve ",
				" Currency in string format",
				" Label of the curve in string format",
				" Adjustment Calendar (default STDCDS) ,else NONE",
				" Summit Calibration (default is Yes)",
				" Vol Curve Flat(default is Volatility = 0%)",
				" Accrued Coupon Payment for Premium Leg ",
				" Calibration Algo (default is DICHO) ",
				" Calibration Data(default is STD)",
				" Lag CDS (ccy Lag)"
        },
		**/ 
		{
				" ARM_Credit_DefCurveFromIntensityOrSurvivalProbas_Dates",
                " RRRRRRRRRRRRR",					// 10 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurveIntensityPWC",
                " AsOfDate,yearfractions,SP or intensities, Type of inputs, IRcurveId,Recovery,[Ccy],[Label],[VolCurve],[CalibMethod], [Lag],[CalibParam]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve Piece Wise Constant based on intensity model with survival probabilities or hazard rates as inputs",
				" As Of Date in EXCEL date format",
                " year fractions or dates",
				" survival probabilities or hazard rates ",
				" -1 for survival probabilities (default value) and 1 for hazard rates  ",
				" Recovery Rate",
				" Interests Rates Curve ",
				" Currency in string format",
				" Label of the curve in string format",
				" Vol Curve Flat(default is Volatility = 0%)",
				" Calibration Method (default STD)",
				" Lag CDS (ccyLag)",
				" Calibration's Pricer Parameters"
        },
	    {
				" ARM_Credit_DefCurvePWLIN",
                " RRRRRRRRRR",					// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurvePWLIN",
                " AsOfDate,Maturities,Spreads,IRcurveId,Recovery,[Ccy],[Label],[AdjCal],[Summit]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve Piece Wise Constant based on intensity model",
				" As Of Date in EXCEL date format",
                " Maturities ",
				" Spreads in bp ",
				" Recovery Rate",
				" IRcurveId : Interests Rates Curve ",
				" Currency in string format",
				" Label of the curve in string format",
				" Adjustment Calendar (default STDCDS) ,else NONE",
				" Summit Calibration (default is Yes)"
        },
		{
				" ARM_Credit_InputDefaultCurve",
                " RRRRRRRR",					// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_InputDefaultCurve",
                " AsOfDate,Maturities,Spreads,IRcurveId,Recovery,Ccy,[Label]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_InputDefaultCurve,
                " Creates a Default curve with the input parameters",
				" As Of Date (XL Date)",
                " Maturities (XL Date Array)",
				" Survival Probabilities",
				" IRcurveId : Interests Rates Curve ",
				" Recovery Rate",
				" Currency in string format",
				" Label of the curve in string format"
        },
		{
				" ARM_Credit_DefProbModelNew",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefProbModelNew",
                " DefProbCurve, DiscCurve, [VolCurve]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Credit Default Model",
                " Default Probability Curve Id",
				" Ir Curve Id",
				" Volatility Curve Id (for option pricing)"
        },
		{
				" ARM_Credit_PricerDefaultCdsNew",
                " RRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_PricerDefaultCdsNew",
                " Security, Model, AsOf",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Credit Default Pricer for a Credit Default Swap",
                " Credit Security Id",
				" Credit Model Id", 
				" AsOf Date", 
        },
		{
				" ARM_Credit_FwdSpread",
                " RRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FwdSpread",
                " DefaultCurveid,Maturity1,Maturity2,[FwdStart],[FwdEnd],[VolCurveId]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Forward Spread for Default Curve", 
                " Default Curve id", 
                " Maturity1 in EXCEL date format",
				" Maturity2 in EXCEL date format",
				" Fwd Start Date in EXCEL date format",
				" Fwd End Date in EXCEL date format",
				" Volatilty Curve"
		},
		{
				" ARM_Credit_FwdSpreadAsIndex",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FwdSpreadAsIndex",
                " DefCurveId,Maturity1,Maturity2",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Forward Spread for Default Curve", 
				" DefCurveId ",
                " Maturity1 in EXCEL date format",
				" Maturity2 in EXCEL date format",
		},
		{
				" ARM_Credit_CDSGEN",
                " RRRR",					// 13 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CDSGEN",
                " FeeLeg,DefLeg,TradedNotional",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Credit Default Swap",
				" Premium Leg",
				" Default Leg",
				" Traded Notional"
		},
		{
				" ARM_Credit_GenLeg",
                " RRRRRRRRRRRRRRRRRRRRRR",//RRRR",						// 22 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GenLeg",
                " StartDate,EndDate,[FixedRate],[FixedNot],[VarNotional],[VarRate],[XchangeNotional],[Freq],[Basis],[PayTiming],[AdjRule],[Stub],[DiscCcy],[PayCal],[RollDate],[IncMat],[AdjStart],[LegType],[IR_Index],[CreditLag],[AccruedOnDef]", //,[Binary],[Name],[Nxchange]
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a FIXDEFLEG",
				" StartDate ",
				" EndDate ",
				" Fixed Rate in bp ( 0.)",
				" Fixed Notional (10000000)",
				" variable notional(Fixed Rate)",
				" variable Rate (Fixed Rate)",
				" exchange notional  (is none)", 
				" frequency (Quaterly)",
				" dayCount(A360)",
				" payTiming (ARREAR)",
				" intRule: (Unadjusted)",
				" stubRule:  (Short Start)",
				" discountCcy",
				" payCalName (localcurrency)",
				" RollDate (NONE)",
				" IncludeMaturity (Y)",
				" AdjStartDate (Y)",
				" Leg type (RUNNING)",
				" Credit Index : NO Index",
				" ",// credit lag
				/*" Binary : default NO binary",
				" Name : default UNDEF",
				" NxChange : default NXNONE",*/
				
        },
		{
				" ARM_Credit_CloneCorrMatrixBary",
                " RRRR",		// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CloneCorrMatrixBary",
                " CorrMatrix,Beta, UpOrDown",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Correlation Matrix Shifted following Barycentric method",
				" CorrMatrix Object",
				" Beta value",
				" Up(1) or Down(-1)"
		},
		{
				" ARM_Credit_DefCurveFromZCwithSummit",
                " RRRRRRR",						// 6 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurveFromZCwithSummit",
                " Asofdate,Issuer,CvName,IrCurve,Currency,[label]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_ZCPYFromSummit,
                " Retrieve a DefProb zero-coupon curve from Summit",
				" As of date in EXCEL date format",
                " Issuer",
				" CvName (MO, ...)",
				" Ircurve Id",
                " Currency (EUR, USD, ...)",
				" Label in string format (defaut ex:EURIB|EUR|MO)"
        },
		{
				" ARM_Credit_SetVariableSpread",
                " RRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetVariableSpread",
                " Security id,RefVal Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Modifies the security spread", 
                " Security id", 
                " Reference value id"
        },

		{
				" ARM_Credit_GetExpectedLoss",
                " RRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetExpectedLoss",
                " Pricer id, Year fraction",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Calcule l'expected loss en t = yearterm", 
                " Pricer id", 
                " Year fraction"
        },
		{
				" ARM_Credit_AddPeriod",
                " RRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_AddPeriod",
                " AsOfDate, Maturity, [Ccy], [AdjRule] ,[AdjCDS]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_AddPeriod,
                " Ajoute la maturite à la date AsOf avec les conventions AdjRule et AdjCDS, et retourne une date ", 
                " As Of Date in EXCEL date format", 
                " Maturity ",
				" Currency ",
				" Adjust Rule (default NONE) ",
				" Adjust CDS (default STDCDS) "
        },

		// ------------------------     Fonctions pour Structuration ------------------------------
		{
				" ARM_Credit_Str_Cppi",
                " RRRRRRRRRRRRRRRR",				// 15 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_Cppi",
                " DefCurve,Recov,Correl,DataCppi,RiskyFactor,DataPlacement,DataSoult,DataVasicek,DataModel,DataCoupon,DataWidener,DataSimul,DataBarriere,CrbTaux,Fonction",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Test", 
                " Plots et Spread",
				" Recovery",
				" Strike et Correl",
				" Maturity,notional,Garanti,AddLeverage,Coussin,Managementcost",
				" Col1 Inf,C2 Max, C3 ValMin, C4 ValMax",
				" Funding,Financement,Running",
				" BidMid,Switch",
				" Taux,Param,Vol",
				" Intensité Saut, Vol Implied, MeanImplied, SpeedReversionImplieds",
				" PrimeUpFront(%), SpreadCpn(%), FactorCpn, StopMat(ex :10), Fixed(1 ou 0)",
				" Valeur Init,Trend,,Sigma,Particpation",
				" NbSimul, Step, IndiceInit",
				" BarriereDown, TimeLocked",
				" Vecteur de maturité et de Zéro Coupon",
				" T (Trajectoire) ou S (Simulations)"
        },
		/*{
				" ARM_Credit_Str_GenAlea",
                " RRR",				// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_GenAlea",
                " [Seed], NbTir",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Generateur de nombre aléatoire", 
                " Defaut: Nb de seconde depuis le 1/1/1970",
				" Nombre de simulations souhaitées"
        },*/
		// SPREAD FORWARD
		{
				" ARM_Credit_Str_SpreadFwdCurves",
                " RRRRRRRR",					// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_SpreadFwdCurves",
                " Spread,Plot,Recovery,[Taux],TimeInit,Duree,[Stripping]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Calcul du spread forward [f(0,TimeInit,TimeInit+Duree)] d'un CDS", 
                " Spread au niveau des plots", 
                " Plots",
				" Taux de recouvrement",
				" Taux d'actualisation : 0% par défaut",
				" Date de début",
				" Duree",
				" FAST ou SLOW (FAST par défaut)"
        },
		// INTERPOLATION DE SPREAD

		// DISCOUNT FACTOR
		/*{
				" ARM_Credit_Str_DPrice",
                " RRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_DPrice",
                " Maturité,Taux",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Discount Price Vector", 
                " Maturité en year fraction",
				" Taux d'actualisation"
        },*/
		// PROBA DE DEFAUT
	/*	{
				" ARM_Credit_Str_ProbDefCurves",
                " RRRRRRR",							// 6parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_ProbDefCurves",
                " Maturité,Recov,Plot,IssuersSpread,[Taux],[Stripping]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Proba defaut", 
                " Maturité en year fraction",
				" Taux de recouvrement",
				" Plots de la courbe de défaut",
				" Valeur des Spreads au niveau des plots",
				" Taux d'actualisation : 0% par défaut",
				" FAST/SLOW (FAST par défaut)"
		},
		{
				" ARM_Credit_Str_ProbDefautTrancheZC",
                " RRRRRRRRRR",							// 9 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_ProbDefautTrancheZC",
                " Maturité,Attachement,NbIssuers,Recovery,IssuersSpread,Plot,Beta,[Taux],[Stripping]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Proba defaut d'une Tranche", 
                " Maturité en year fraction", 
				" Points d'attachement de la tranche (TDown & T Up)",
				" Nombre de nom",
				" Taux de recouvrement : Calib Recovery & Loss Recovery",
				" Valeur des Spreads au niveau des plots",
				" Plots de la courbe de défaut",
				" Beta par nom",
				" Taux d'actualisation : 0% par défaut",
				" FAST/SLOW (FAST par défaut)"
		},*/
		// DENSITE
 		// DENSITE Curves
		/*{
				" ARM_Credit_Str_DensityCurve",
                " RRRRRRRR",							// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Str_DensityCurve",
                " Maturité,NbIssuers,IssuersRecovery,IssuersSpread,Plot,BetaPrice,[Taux]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Density jointe de défaut", 
                " Maturité en year fraction", 
                " Nombre de nom",
				" Taux de recouvrement",
				" Spread par nom au niveau des plots",
				" Plots de la courbe de défaut",
				" Beta par nom",
				" Taux d'actualisation : 0% par défaut"
        },*/

		// EXPECTED LOSS
		// Str using ARM code
		// Pricing de basket
		{
			   " ARM_Credit_Str_Basket",
               " RRRRRRRRRRRRRRRRRRR",		// 18 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_Basket",
               " YF_Maturity,IndiceDefault,NbIssuers,IssuersNotionals,CalibRecovery,LossRecovery,Plots,IssuersSpread,[IssuersLabel],[Pas],Coupons,IssuersBeta,[Taux],[LabelToShift],[DateToShift],[ValShift],[Stripping],Function",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Price a basket", 
               " Maturité (YF ou date Excel)", 
               " Vecteur : Permier et dernier indice sujets à la protection",
			   " Nombre de nom",
			   " IssuersNotionals",
			   " CalibRecovery",
			   " LossRecovery",
			   " Plot des courbes de défaut",
			   " Matrice des spreads au niveau des plots",
			   " Issuers Labels : par défaut 0,1,...NbIssuers - 1",
			   " Pas de paiement (0.25 par défaut)",
			   " Coupons",
			   " Beta par nom",
			   " Taux d'actualisation : 0% par défaut",
			   " Sensi : Label du nom à shifter. (Tous les noms par défaut)",
			   " Sensi : Date à shifter (tous les plots par défaut)",
			   " Sensi : Valeur du bump sur les spread (0.01%)",
			   " Stripping des courbes de défaut FAST/SLOW (FAST)",
			   " NPV, DL, FL, BE, DUR, SENSI"				
        },
		// Pricing de mez
			{
			   " ARM_Credit_Str_CDO",
               " RRRRRRRRRRRRRRRRRR",		// 17 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_CDO",
               " [MezType],DataMez,[Notionals],CalibRecov,[LossRecov],Plots,IssuersSpread,[IssuersLabel],IssuersBeta,[Taux],[LabelToShift],[DateToShift],[ValShift],[SpreadCrbFwd],[VolConvexity],[NumMethod],Function",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Price a CDO",
			   " MezType (RUNNING,INFINE,FUNDED,CMTRANCHE)",
               " Maturity,Strike Down & Up,Pas,Coupon ou PartRate, Nb Nom",
			   " Vecteur de Notional (IssuersNotional & Traded Notional)",
			   " Recov de calibration",
			   " Recov utilisée pour le calcul de loss",
			   " Plot des courbes de défaut",
			   " Matrice des spreads au niveau des plots",
			   " Issuers Labels : par défaut 0,1,...NbIssuers - 1",
			   " Beta par nom",
			   " Taux d'interet (0%)",
			   " Label (Tous les noms)",
			   " Date (Tous les plots)",
			   " Valeur du bump (0.01%)",
			   " Spread Crbe Fwd (moyenne)",
			   " Vol spread fwd (0%)",
			   " Nb pas,Methode (H:Hermite, L: Legendre, T:Trapeze),Stripping (FAST/SLOW) [20-H-FAST]",
			   " NPV, DL, FL, BE, DUR, SENSI"				
        },
	// CDO2 SMILE
		{
			   " ARM_Credit_Str_CDO2SMILE",
               " RRRRRRRRRRRRRRRRR",		// 16 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_CDO2SMILE",
               " DataMez,[NotionalsMez],StrikeCDO,DataDefaultCurve,[Label],SpreadTraxx,MatriceOverlap,DataTraxx,Recov,ForcedCorrel,CorrelParStrike,[LabelToShift],[DateToShift],[ValShift],[NumMethod],Function",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Price a CDO squared (using correl par strike)",

               " Maturity,Strike Down & Up,Pas,Coupon,Nb de nom, Nb Tranche fille, Taux", 
               " Vecteur Notional",
			   " Vecteur ligne de Strike de CDO (Down & Up)",
			   " Plots et Crb de défaut",
			   " Labels (0,1,...NbIssuers - 1)",
			   " Spread Traxx (Eur & US)",
			   " Matrice des overlaps (ligne = nb nom)",
			   " RecovTraxx, Vecteur Proportion Traxx Euro",
			   " Recov",
			   " ForcedCorrel",
			   " CorrelParStrike",
			   " LabelToShift",
			   " DateToShift",
			   " ValShift (0.01% par défaut",
			   " Nb pas,Methode (H:Hermite, L: Legendre, T:Trapeze),Stripping (FAST/SLOW) [20-H-FAST]",
			   " NPV,DL,FL,BE,DUR,SENSI"			
        },
		// CDO SMILE 
		{
			   " ARM_Credit_Str_CdoSmile",
               " RRRRRRRRRRRRRRRRRRRR",		// 19 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_CdoSmile",
			   " [MezType],DataMez,Recov,PlotsPtf,Spread,[Lbl],PlotsTraxx,SpreadTraxx,[MaturityBaseCorrel],CorrelStrike,[DataTraxx],[Taux],[LblShift],[DateShift],[ValShift],[SpreadFwd],[VolConvex],[NumMethod],Function",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Price CDO with prov (Correl par strike)",
			   " (RUNNING,CMTRANCHE)",
               " Maturity,Strike Down-Up,Pas,Coupon,Nbnom,TradedNotional", 
			   " Recov Calib & Recov Loss",
			   " Plots Ptf",
			   " Spreads",
			   " Label (0,1,NbIssuers-1)",
			   " Plots Traxx",
			   " Spread Traxx (Eur-US)",
			   " Vecteur de Maturité des bases correl (5-10Y) par défaut",
			   " Correl par strike(Eur-US)",
			   " % TraxxEur,RecovTrax (100%-40%)",
			   " Taux (0%)",
			   " Sensi:Label (Ts les noms)",
			   " Sensi:Date (Ts les plots)",
			   " Sensi:Bump sur spread (0.01%)",
			   " Spread Crb fwd (moyenne)",
			   " Vol spread fwd (0%)",
			   " Nb pas,Methode(H:Hermite,L:Legendre,T:Trapeze),Stripping (FAST/SLOW).[20-H-FAST]",
			   " NPV,DL,FL,BE,DUR,SENSI,STRIKE,ALL"
        },
		{
			   " ARM_Credit_Str_GetExpectedLoss",
               " RRRRRRRRRRR",						// 10 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_GetExpectedLoss",
               " YearTerm,Attachement,NbIssuers,CalibRecov,[LossRecov],Plots,IssuersSpread,IssuersBeta,[Taux],[NumMethod]",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Expected Loss",
			   " Year Fraction", 
               " Points d'attachement de la tranche (Strike down & Strike Up)",
			   " Nombre de nom",
			   " CalibRecovery",
			   " LossRecovery",
			   " Plot des courbes de défaut",
			   " Matrice des spreads au niveau des plots",
			   " Beta par nom",
			   " Taux d'actualisation  : 0% par défaut",
			   " Nb pas,Methode(H:Hermite,L:Legendre,T:Trapeze),Stripping (FAST/SLOW).[20-H-FAST]",
        },
		{
			   " ARM_Credit_Str_GetExpectedLossSMILE",
               " RRRRRRRRRRRR",		// 11 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_GetExpectedLossSMILE",
               " DataMez,CalibRecov,[LossRecov],Plots,IssuersSpread,SpreadTraxx,[MaturityBaseCorrel],CorrelByStrike,[DataTraxx],[NumMethod]",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Expected Loss à tous les pas de paiement (Correl par strike)",
			   " DataMez (Maturite,Strike Down & Up,Pas,Taux,Nb Nom)", 
			   " CalibRecov",
			   " LossRecov",
			   " Plot des courbes",
			   " Matrice des spreads",
			   " Spread Traxx (Euro et US)",
			   " Vecteur de Maturité des bases correl (5-10Y) par défaut",
			   " Correl par strike (Euro et US)",
			   " ProjectionTraxEuro & Recov Traxx (100%-40%)",
			   " Nb pas,Methode(H:Hermite,L:Legendre,T:Trapeze),Stripping (FAST/SLOW).[20-H-FAST]",
        },
		/**
		{
			   " ARM_Credit_Str_LinearInterpolation",
               " RRRR",		// 3 parametres d'entree + 1 parametre de retour
               " ARM_Credit_Str_LinearInterpolation",
               " Xref,Yref,Xtarget",
               " 1",
               XLLOCALARM_CREDIT_GROUP,
               " ",
               " ",
               " Interpolation linéaire",
			   " Vecteur de points ou la fonction est connue",
			   " Valeur de la fonction aux points connus",
			   " Vecteur de points ou l'on veut la valeur de la fonction"
        },
		*/ 
		
		// ------------------------    End Fonctions Structuration ------------------------------


		{		" ARM_Credit_SetLeg",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetLeg",
                " Security id,Leg Id,LegType",
                " 1",
                XLLOCALARM_UTIL_GROUP,
                " ",
                " ",
                " Set the Leg", 
                " Security id", 
                " Leg id",
				" Leg Type"
        },

		{
				" ARM_Credit_IndexCompo",
                " RRRRRRRRRRRRRRRRRRR",						// 20 parametres d'entree + 1 parametre de retour
                " ARM_Credit_IndexCompo",
                "IndexName, Issuers, [YearTermVector], [RunningVector],[Method], [Basis],[ResetFreq],[PayFreq],[Currency],[FwdRule],[ResetTiming],[ResetGap],[PayTiming],[PayGap],[IntRule],[TenorAdj],[CM_resetWeekDay],[CM_resetOccur]",
                " 1",
                XLLOCALARM_UTIL_GROUP,
                " ",
                " ",
				" Creates a Credit Index", 
				" Index Name",
                " Issuers Names", 
                " YearTermVector corresponding to Running spread(default is one term : 5)",
				" Spread Corresponding to the given Maturity default : -999", 
                " Method for spread computing (Possible Values are HOMOTHETIE, default is AVG)",
				" dayCount basis (default A360)",
				" Reset Frequency (default is -1)",
				" Payment Frequency (default is Q)",
				" Currency (default value is local)",
				" Forward Rule (default MF)",
				" Reset Timing (default ADV)",
				" Reset Gap (default 0)",
				" Pay Timing (default ARR)",
				" Pay Gap (default 0)",
				" IntRule (default ADJ)",
				" Adjustment for Tenor (default STDCDS)",
				" CM reset day 0[Sun]..6[Sat] (default 5[Fri])",
				" CM reset occurence (default 2 [2nd Friday])"
        },	
		{
				" ARM_Credit_Index",
                " RRRRRRRRRRRRRRRRRRR",						// 18 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Index",
                " Issuers, [YearTerm], [Spread],[Method], [Basis],[ResetFreq],[PayFreq],[Currency],[DefaultCurve],[FwdRule],[ResetTiming],[ResetGap],[PayTiming],[PayGap],[IntRule],[TenorAdj],[CM_resetWeekDay],[CM_resetOccur]",
                " 1",
                XLLOCALARM_UTIL_GROUP,
                " ",
                " ",
				" Creates a Credit Index", 
                " Issuers Names", 
                " YearTerm (default is 5) or MaturityDate",
				" Spread Corresponding to the given Maturity", 
                " Method for spread computing (Possible Values are HOMOTHETIE, default is AVG)",
				" dayCount basis (default A360)",
				" Reset Frequency (default is -1)",
				" Payment Frequency (default is Q)",
				" Currency (default value is local)",
				" Default Curve (default is Average Curve)",
				" Forward Rule (default MF)",
				" Reset Timing (default ADV)",
				" Reset Gap (default 0)",
				" Pay Timing (default ARR)",
				" Pay Gap (default 0)",
				" IntRule (default ADJ)",
				" Adjustment for Tenor (default STDCDS)",
				" CM reset day 0[Sun]..6[Sat] (default 5[Fri])",
				" CM reset occurence (default 2 [2nd Friday])"
        },		
		{
				" ARM_Credit_Option",
                " RRRRRRRRRR",						// 6 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Option",
                " UnderlyingMaturity, OptionexpiryDate, Currency, [CdsAdj], [EndDateAdj],[Strike], [OptionType],[KoType],[Notional]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Creates an Option Object", 
				" UnderlyingMaturity in term or Date",
				" Option expiry Date" ,
				" Currency ",
				" CdsAdj default STDCDS",
				" EndDate Adj : (Y)",
				" Option Strike (10)",
				" OptionType, 1, C or CALL for Call options and -1, P or PUT for Put options (default Call)",
				" KoType, KO or 1 for KO , 0 or No_KO_ACC for No KO and without Acceleration, and -1 or No_KO_No_ACC for No KO but with Acceleration (default KO)",
				" Notional of underlying * quantity (default 1)"
		},
		{
				" ARM_Credit_SpreadOption",
                " RRRRRRRRRR",						
                " ARM_Credit_SpreadOption",
                " Underlying CDS,Strike,OptionType,KOType,AccelerationType,ExerciseDates,ExerciseFrequency,ExerciseType,UnderlyingMaturityStyle",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Creates a Spread Option Object", 
                " Underlying Security (CDS)",
				" Option Strike ",
				" OptionType, 1, C or CALL for Call options and -1, P or PUT for Put options",
				" KoType, KO (1) , NKO (0)",
				" AccelerationType, ACC (1) , NACC (0) ",
				" ExerciseDates ",
				" ExerciseFrequency (int per year)",
				" ExerciseStyle (EUR,AME,BER)",
				" Underlying Maturity Style (CONSTANT,RESIDUAL)",
				" ",
        },
		{
				" ARM_Credit_BSGreeks",
                " RRR",							// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_BSGreeks",
                " Pricer id, [GrrekType]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Sensitivity,
                " Computes Greeks of an Option in the BS framework", 
                " Pricer id", 
                " Possible values are 'DELTA','GAMMA','VEGA','THETA','RHO'(cf help file for details)",
                " ",
				" ",
				" "
        },
		{
				" ARM_Credit_Greeks",
                " RRR",							// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Greeks",
                " Pricer id, [GrrekType]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Sensitivity,
                " Computes Greeks of an Option", 
                " Pricer id", 
                " Possible values are 'DELTA','GAMMA','VEGA','THETA','RHO'(cf help file for details)",
                " ",
				" ",
				" "
        },
		{
				" ARM_Credit_ImpliedVol",
                " RRR",							// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_ImpliedVol",
                " Pricer id, Mkt Price",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Sensitivity,
                " Computes Implied Volatility for an Option in the BS framework", 
                " Pricer id", 
                " Market Price",
                " ",
				" ",
				" "
        },		
		{
				" ARM_Credit_CDSIndex",
                " RRRRRRRRRRRRRRRRR",					// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CDSIndex",
                " EffectiveDate,Maturity, RefSpread, Credit_Index, [FixingFreq],[DayCount],[rolldate],[PremNot],[DefNot],[StubRule],[DiscCcy],[CreditLag],[Adjusted],[IncMatu],[ProtecStart],[ProtecEnd]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Creates a Credit Default Swap Index",
				" Effective Date of the CDS in EXCEL date format",
				" Maturity of the CDS in EXCEL date format",
				" yearly Reference Spread (in bp)",
				" Credit Index",
				" Fixing frequency (default QUATERLY)",
				" Daycount of the Cds (default A360)", 
				" first coupon date (next coupon after StartDate according frequency)",
				" notional of the premium leg (default 1000000)",
				" notional of the Default leg (default 1000000)",
				" Stub Rule (default SS)",
				" Discount Currency (default local)",
				" Credit Lag (default 0)",
				" End Periods Adjusted (default:ADJ) else NOADJ",
				" Include Maturity (default: Y)",
				" Protection Start Date (default is Effective Date)",
				" Protection End Date (default is Maturity Date)",
        },
		{
				" ARM_Credit_FwdSpreadPricer",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FwdSpreadPricer",
                " Pricer id,Maturity1,Maturity2",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Forward Spread for a Given Pricer", 
                " Pricer id", 
                " Maturity1 in EXCEL date format",
				" Maturity2 in EXCEL date format"
		},
		{
				" ARM_Credit_VirtualCdsSpread",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_VirtualCdsSpread",
                " Pricer id,Maturity Date",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Spread for the Virtual CDS of the Index and for a given Maturity date ", 
                " Pricer Id", 
                " Maturity Date in EXCEL date format  ",
				" "
		},
/**		{
				" ARM_Credit_Pricer_MC",
                " RRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Pricer_MC",
                " Model, PricerType, Pricer Parameters Matrix, Default Leg Parameters Matrix, Premium Leg Parameters Matrix",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Pricer",
				" Credit Model Id",
				" MC_COPULA",
				" Pricer Parameters Matrix",
				" Default Leg Parameters Matrix",
				" Premium Leg Parameters Matrix"
        },**/
		{
				" ARM_Credit_SetCorrelation",
                " RRR",							//  parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetCorrelation",
                " modelMultiCurve ,Correlation Object",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Set Correlation object to a modelmulticurve object", 
                " ModelMultiCurve", 
                " Correlation object",
        },
		{
				" ARM_Credit_CorrelationStrike",
                " RRRRRRRRRRR",							//   5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorrelationStrike",
                " Labels,Volcurves,Proportions,[SmileStrikeLow],[SmileStrikeUp],[Index Vector],[AsOf],[Name],[FullStrikeLow],[FullStrikeUp]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns a Correlation by strikes object", 
                " Vector of labels", 
                " Vector of volcurves",
				" Vector of proportions (ex: 0.5 for 50%)",
				" Vector of SmileStrikeLow (strike / index)  (ex: 0.03 for 3%)",
				" Vector of SmileStrikeUp (strike / index)  (ex: 0.03 for 3%)",
				" Vector of Index",
				" AsOfDate",
				" Name for Correlation structure",
				" Array of SmileStrikeLow ( matu + strike /index) ",
				" Array of SmileStrikeUp ( matu + strike /index) "
        },
		{
				" ARM_Credit_CorrelationSmileStrike",
                " RRRRRRRRRRR",							//   5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorrelationSmileStrike",
                " Labels,Volcurves,Proportions,AsOf,[SmileStrikeLow],[SmileStrikeUp],[Index Vector],[Name],[FullStrikeLow],[FullStrikeUp]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns a Correlation by strikes object", 
                " Vector of labels", 
                " Vector of volcurves",
				" Vector of proportions (ex: 0.5 for 50%)",
				" AsOfDate",
				" Vector of SmileStrikeLow (strike / index)  (ex: 0.03 for 3%)",
				" Vector of SmileStrikeUp (strike / index)  (ex: 0.03 for 3%)",
				" Vector of Index",
				" Name for Correlation structure",
				" Array of SmileStrikeLow ( matu + strike /index) ",
				" Array of SmileStrikeUp ( matu + strike /index) "
        },
		{
				" ARM_Credit_BetaCorrelation",
                " RRRRRRR",							//   2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_BetaCorrelation",
                " Labels,Betas,AsOf,[Name],[idIndex1],[idIndex2]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns a beta correlation object", 
                " Vector of labels", 
                " Vector of Betas",
				" AsOfDate",
				" Equal in the name of the product ",
				" id of the first index ",
				" id of the second index "
        },
		{
				" ARM_Credit_FlatCorrel",
                " RRRRRR",							//   5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FlatCorrel",
                " AsOf,structName,correlValue,idIndex1,idIndex2",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Returns a flat correlation object", 
                " AsOf date", 
                " structure Name",
				" correl Value [-1,1]",
				" id of the first index ",
				" id of the second index "
        },
		{
				" ARM_Credit_SetVolatility",
                " RRR",							//   2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetVolatility",
                " Pricer Id,Volatility Curve",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Sets the volatility Curve of the underlying Model of the Pricer to the one given", 
                " Pricer", 
                " Volatility Curve",
		},
		{
				" ARM_Credit_SetVolCurve",
                " RRR",							//   2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetVolCurve",
                " Model Id,Volatility Curve",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Sets the volatility Curve of the  Model", 
                " Model", 
                " Volatility Curve",
		},
		{
				" ARM_Credit_LegBasket",
                " RRR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_LegBasket",
                " Securities,[Paramobj]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Portfolio of Legs",
                " Vector of Securities Id",
				" Parameters object Id"
        },
		{
				" ARM_Credit_CPPI",
                " RRRRRRRRRRRRRRR",				// 14 parametre d'entree + 1 parametre de retour
                " ARM_Credit_CPPI",
                " StartDate,EndDate,Security Id,CorrelName,Min,Max,ValueMin,ValueMax,Notional,ProtectedAmount,[AdditionalLeverage],[DesactivationCushion],[ManagementCost],[Currency]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
				" ",
				" ",
                " Creates a CPPI",
                " Start Date of the CPPI in EXCEL date format",
				" Maturity of the CPPI in EXCEL date format",
				" Security",
				" Name of the correlation object",
				" Vector of Min",
				" Vector of Max",
				" Vector of Value Min",
				" Vector of Value Max",
				" Notional",
				" Protected Amount",
				" Additional leverage in % of the Notional (default is 0)",
				" Deactivation Cushion in % of the Notional (default is 0)",
				" Management Cost in %",
				" Currency (default local)"
        },


		{
				" ARM_Credit_MetaModel",
                " RRR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_MetaModel",
                " Models,PricerTypes",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Portfolio of Legs",
                " Vector of Models Id",
				" Vector of Pricer Types"
        },
		{
				" ARM_Credit_MarketDataMng",
                " RR",						// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_MarketDataMng",
                " MakDataObjects",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
				" Creates a Market Data Manager",
                " Vector of MakData Objects Id"
        },
		
		// ------------------------     Functions for Credit Monte-Carlo ------------------------------

		// CREDIT: Market Data
			{
				" ARM_CreditManager_MarketData",
                " RRRRRRR",			// 5 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_MarketData",
                " Credit Manager, Val Date , Currency, Summit IR Curve, MarketData Parameters, Imposed IR Values",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
				" Valuation Date - Date", 
                " Payment Currency - String", 
                " Interest Rates Summit Curve - Curve Id",
				" Market Data Parameters : Cash Flow Matrix ",
				" Imposed IR Values : Cash Flow Matrix - First Col Lags / Second Col ZC Yields"
			},
			/// END CREDIT Market Data

		// CREDIT: Credit Data
			{
				" ARM_CreditManager_CreditData",
                " RRRRRRRRRR",			// 7 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_CreditData",
                " Credit Manager, Labels , Description, Credit Spreads, Maturities, CreditData Parameters, Hedges CDS Maturity, CDO^2 Parameters, CDO^2 Data",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " Labels - All Credits Names - Vector of String", 
                " Credit Data Description - Cash Flow Matrix", 
                " Credit Spreads - Matrix or Column or Single Value of Spreads for All Issuers",
				" Maturities : Vector of String",
				" CreditDataParameters : Cash Flow Matrix - First Col Lags / Second Col ZC Yields",
				" Hedges CDS Maturity: String '5Y' or 'CDS_TO_MATURITY' - Roll Dates may be used",
				" CDO^2 Parameters: Parameters Matrix - Maturities - Include",
				" CDO^2 Data: Parameters Matrix - Include - Notional - Loss"
			},
			/// END CREDIT Market Data


		// CREDIT: Model Data
			{
				" ARM_CreditManager_CreditModel",
                " RRRRRRRRRR",			// 5 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_CreditModel",
                " Credit Manager, CreditModel Parameters, Correlation Value, Beta, Base Correlation Strikes, Base Correlation Values, Correlation Matrix Id, Correlation Id, Factor Loading Parameters",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " CreditModel Parameters Valuation Date - Cash Flow Matrix", 
                " Correlation Value - double ", 
                " Beta -  Vector of double",
				" Base Correlation Strikes: Array of double",
				" Base Correlation Values: Array of double",
				" Correlation Matrix Id: Corr Matrix Object",
				" Correlation Id: Correlation Object",
				" Factor Loading Parameters - Cash Flow Matrix"
			},
			/// END CREDIT Market Data

		// CREDIT: Product Data
			{
				" ARM_CreditManager_CreditProduct",
                " RRRRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_CreditProduct",
                " Credit Manager, DefaultLeg Parameters, PremiumLeg Parameters, Product Parameters",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
				" Default Leg Parameters - Cash Flow Matrix", 
                " Premium Leg Parameters - Cash Flow Matrix",
                " Product Parameters - Cash Flow Matrix"
			},
			/// END CREDIT Product Data

		// CREDIT: Get Data
			{
				" ARM_CreditManager_GetData",
                " RRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_GetData",
                " Credit Manager, DataLabel",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " Data Label - String"
			},
			/// END CREDIT Get Data

		// CREDIT: Credit Calibrator
			{
				" ARM_CreditManager_CreditCalibrator",
                " RRRR",			// 3 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_CreditCalibrator",
                " Credit Manager, Description Id, Maturities",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " Description - Cash Flow Matrix",
				" Maturities - Vector of String"
			},
			/// END CREDIT Get Data

		// CREDIT: Correlation Calibrator
			{
				" ARM_CreditManager_CorrelationCalibrator",
                " RRRRR",			// 4 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_CorrelationCalibrator",
                " Credit Manager, Data Description Id, Parameters, Tranches Ids",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " Data Description - Cash Flow Matrix",
				" Parameters - Vector of double",
				" Tranches Ids - Vector of Labels"
			},
			/// END CREDIT Correlation Calibrator

			// CREDIT: Get Credit Manager
			{
				" ARM_Get_CreditManager",
                " R",			// 1 parametre de retour
                " ARM_Get_CreditManager",
                " ",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " "
			},
			/// END CREDIT Credit Manager

		// CREDIT: Get Data Matrix
			{
				" ARM_CreditManager_GetDataMatrix",
                " RRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_CreditManager_GetDataMatrix",
                " Credit Manager, DataLabel",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Manager Id",
                " Data Label - String"
			},
			/// END CREDIT Get Data Matrix
		
		// CREDIT: Creates a Corridor Leg
			{
				" ARM_Credit_CorridorLeg",
                " RRRRRRRRRRRRRRRRRRRRR", // RRRRRRRRRRRRRRR",			// 16 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorridorLeg",
                " Name, StartDate,EndDate,RefDate,fstCpnDate,RefSpreadsId, FloatIdxId,FloatLev,CreditIdxId,RefUpId,RefDwId,[AccOnDef],[AccDaycount],[PayFrq],[Basis],[PayTiming],[intrule],[stub],[discccy],[paycal]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
				" Creates a Credit Corridor Leg", 
				" Name",
				" StartDate", 
				" End date", 
				" Ref Date",
				" First Cpn Date",
				" RefValue spreads",
				" Floating index",
				" Leverage on floating index",
				" credit index",
				" RefValue Strike Up",
				" RefValue Strike Down",
				" Acc on default",
				" Acc daycount",
				" Payment frequency",
				" Basis",
				" Pay Timing",
				" Intrule",
				" Stub rule",
				" discount ccy",
				" calendard"
				},
			/// END CREDIT Get Data Matrix
			{
					" ARM_Credit_GetBaseCorrelFromSummit",
		            " RRRRRRRRRR", 			// 9 parametres d'entree + 1 parametre de retour
			        " ARM_Credit_GetBaseCorrelFromSummit",
				    " AsOfDate,proportions,[CurveId], [IndexName], [CCys], [CvIssuerNames],[smilestrikelow],[smilestrikehigh],[CorrName]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" AsOfDate", 
					" Vector of proportions",
					" Summit Curve Id (default MO)", 
					" IndexName (default TRAX)",
					" Vector of currency (default EUR,USD)",
					" Vector of Index Issuer name (default ITRAXEU3M10,CDXNA4M10)",
					" Vector of smilestrikelow (default empty)",
					" Vector of smilestrikehigh (default empty)",
					" Correlation Name (default userdefine)"
				},
			{
					" ARM_Credit_IRLEGTOCREDITLEG",
		            " RRRRR", 			// 9 parametres d'entree + 1 parametre de retour
			        " ARM_Credit_IRLEGTOCREDITLEG",
				    " SwapLegId,[LegType],[CreditIndexId],[LegPricer]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" SwapLegId", 
					" LegType (default is RUNNING)",
					" CreditIndexId (default is NONE)",
					" LegPricerId (default is NONE)"
				},
			{
					" ARM_Credit_NTDGEN",
		            " RRRRRRR", 			// 9 parametres d'entree + 1 parametre de retour
			        " ARM_Credit_NTDGEN",
				    " CdsId,FirstNumDef,LastNumDef,CollateralId,[Binary],[RcvFee]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" CdsId", 
					" FirstNumDef",
					" LastNumDef",
					" Collateral Object",
					" Binary (default is NONE)",
					" RcvFee (default is R)"
				},
			{
					" ARM_Credit_CDOGEN",
		            " RRRRRR", 			// 9 parametres d'entree + 1 parametre de retour
			        " ARM_Credit_CDOGEN",
				    " CdsId,SubAmount,CollateralId,[Binary],[RcvFee]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" CdsId", 
					" SubAmount",
					" Collateral Object",
					" Binary (default is NONE)",
					" RcvFee (default is R)"
				},
		// PRICER: Get Data
			{
				" ARM_Credit_Pricer_GetData",
                " RRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Pricer_GetData",
                " Pricer Id, DataLabel",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Pricer Id",
                " Data Label - String"
			},
			/// END OF PRICER Get Data
			{
				" ARM_Credit_IndexCorrelation",
                " RRRRRRRRRRRRRRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_IndexCorrelation",
                " AsOf,Name,CalMethod,IndexId,strikeLow,strikeHigh,MktBid,MktAsk,UpFBid,UpFAsk,[InitialCorrel],[RFLBeta0],[Parameters],[ModelMMC]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " AsOfDate",
                " Name",
				" Calibration Method",
				" CreditIndex Object",
				" Vector of strike low (in %)",
				" Vector of strike high (in %)",
				" Vector of Market Bid (in %)",
				" Vector of Market Ask (in %)",
				" Vector of UpFront Bid (in %)",
				" Vector of UpFront Ask (in %)",
				" Vector of Initial Correlation (in %)",
				" RFL Beta0",
				" Parameters",
				" Model MMC"
			},
			{
				" ARM_Credit_CptCorrel",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CptCorrel",
                " Correl id, YFMaturity, Type",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Compute Correlation for a given maturity", 
                " CorrelationId", 
				" YFMaturity (A365)", 
				" Type (UP or DOWN)"
			},
		{
				" ARM_Credit_CptBaseCorrelation",
                " RRRRRRRRRRRRRRRRRRRRR",			// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CptBaseCorrelation",
                " AsOf,[Parameters],CalMethod,IndexId,strikeLow,strikeHigh,MktBid,MktAsk,UpFBid,UpFAsk,[InitialCorrel],[Leverages],[ModelMC],[IntStep],[StartLag],[CreditLag],[PrevIndexIdVector],[PrevBcMatrix],[step],[OptMeth]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
				" Base Correlation Computation",
                " AsOfDate",
				" Parameters (default is none)",
				" Calibration Method",
				" CreditIndex Object",
				" vect strike low (in %)",
				" vect strike high (in %)",
				" vect Market Bid (in %)",
				" vect Market Ask (in %)",
				" vect UpFront Bid (in %)",
				" vect UpFront Ask (in %)",
				" vect Initial Correlation (in %) (default none for autofit)",
				" vcet of Leverages (in %) (default none - hedge not taken in account)",
				" Model Multi Curves (correl not used) for Index with dispertion only ",
				" Integration Step (default is 60)",
				" Start Lag (default is 1)",
				" Credit Lag (default is 30)",
				" Vector Previous Index for Term Structure (default is NONE - no term structure)",
				" Matrix of Previous BC for Term Structure (default is NONE - no term structure)",
				" Step (default is 0.01)",
				" OptMeth (default is NEWTON)"
			},
 			{
				" ARM_Credit_CloneCorrFromModel",
                " RR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CloneCorrFromModel",
                " Model id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Correlation for a given model", 
                " Model id"
			},
			{
				" ARM_Credit_CptLeverageLevels",
                " RRRRRR",						// 5 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CptLeverageLevels",
                " Pricer id, Trigger Loss Correlation Id, Matrix of Multiples, Matrix of Flags, Parameters",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Compute Leverage Matrix for a Super Senior Tranche", 
                " Pricer id",
				" Trigger Loss Correlatin Id",
				" Matrix of Multiples - Double Matrix",
				" Matrix of Flags - Double Matrix",
				" Parameters - Cash Flow Matrix"
			},
			{
				" ARM_Credit_SetRecovCoef",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetRecovCoef",
                " Mezzanine id, Recovery Linear Coefficient",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Set a linear recvoery coefficient for a mezzanine tranches", 
                " Mezzanine id", 
				" Linear Recovery Coefficient"
			},
			{
				" ARM_Credit_DeduceRefDateAndStub",
                " RRRRRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DeduceRefDateAndStub",
                " Start,End,StartStub,EndStub,Freq,RefDay,Ccy,RefDate,Stub",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " ARM_Credit_DeduceRefDateAndStub", 
                " Start ", 
				" End", 
				" Start Stub", 
				" End Stub ", 
				" Freq ", 
				" refDay", 
				" ccy", 
				" refDate", 
				" Stub"
			},
			{
				" ARM_Credit_Customized_CDO",
                " RRRRRRR",						// 6 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Customized_CDO",
                " Labels, Notionals, Currency, Default Leg Id, Premium Leg Id, Product Parameters Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Creates a Customized CDO",
				" Issuers' Labels: Vector of Strings",
				" Issuers' Notionals: Vector of Double",
				" Curreny: String",
                " Default Leg Id: Matrix of Cash flows", 
                " Premium Leg Id: Matrix of Cash flows", 
                " Product Parameters Id: Matrix of Cash flows"
			},
		{
				" ARM_Credit_Customized_MultiCurves",
                " RRRRRRRRRRR",	 					// 10 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Customized_MultiCurves",
                " [Model Multi Curve Id], IR Curve, Labels, Spreads, Maturities, Data Description, Market Parameters, CDO Square Data, CDO Square Parameters, CorrelationId",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefProbModel,
                " Creates a Customized Multi Curves Model",
				" Optional - Multi Curve Model Id",
				" Discount Curve Id",
				" Labels: Vector of Strings",
				" Spreads: Matrix of double",
				" Maturities: Vector of Strings",
				" Data Description: Cash Flow",
				" Market Parameters: Cash Flow",
				" CDO Square Data: Cash Flow",
				" CDO Square Parameters: Cash Flow",
				},
			{
				" ARM_Credit_Index_Option_Gen",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Index_Option_Gen",
                " Schedule Id, Data Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Creates a Credit Index Option Gen",
                " Schedule Id: Parameters Object describing the flows", 
                " Data Id: Parameters Object for misc data"
			},
			{
				" ARM_Credit_Index_Corridor_Gen",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Index_Corridor_Gen",
                " Schedule Id, Data Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Creates a Credit Index Corridor Gen",
                " Schedule Id: Parameters Object describing the flows", 
                " Data Id: Parameters Object for misc data",
                " Sub Schedule Id: Parameters Object describing the sub-flows", 
			},
		// INSTRUMENT CREDIT: Get Data
			{
				" ARM_Credit_Instrument_GetDataMatrix",
                " RRR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Instrument_GetDataMatrix",
                " Credit Instrument Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Instrument Id",
			},
			{
				" ARM_Credit_Sectorial_Correlation",
                " RRRRRRRRRR",						// 7 parametres d'entree + 1 parametre de retour
                " ARM_Credit_Sectorial_Correlation",
                " AsOf,StructName,Sectorial Correlation Type, Labels, Sector Membership, Intra Sector Correlation, Inter Sector Correlation, Sector Betas, Sector Lambdas",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
				" Creates Sectorial Correlation Object",
				" AsOf",
				" StructName",
                " Sectorial Correlation Type: DIFF_INTER_DIFF_INTRA (0) / SAME_INTER_DIFF_INTRA (1) / SAME_INTER_SAME_INTRA (2)",
                " Labels: vector of Strings",
				" Sector Membership: vector of integers",
				" Intra Sector Correlation - Double",
				" Inter Sector Correlation - Double",
				" Sector Betas - Vector of double",
				" Sector Lambdas - Vector of double",
			},
			{
				" ARM_Credit_GenTsCorrfromBaseCorr",
                " RRRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GenTsCorrfromBaseCorr",
                " irCurve,defcurve,volcurve,creditlag",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns TS Correlations build with Base Correlations", 
                " Ir curve",
				" Defcurve",
				" Volcurve",
				" CreditLag"
			},
			{
				" ARM_Credit_DataFromLabel",
                " RRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DataFromLabel",
                " idPricer,labelPricingMeasure",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns the pricing measur of the label", 
                " idPricer",
				" labelPricingMeasure : AVGCORRDEF, AVGCORRDEF_POS_BUMP, AVGCORRDEF_NEG_BUMP"
			},
			{
				" ARM_Credit_GetLastFixingDate",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetLastFixingDate",
                " idInstrument,asofDate",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns the last fixing date of a Credit instrument", 
                " Instrument Id",
				" AsofDate"
			},
			{
				" ARM_Credit_SetPastFixing",
                " RRRR",						// 3 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetPastFixing",
                " idInstrument,resetDate,fixingValue",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Sets a past fixing on an instrument", 
                " Instrument Id",
				" reset Date",
				" reset Value"
			},
			{
				" ARM_Credit_GetEqStrikeUp",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetEqStrikeUp",
                " idCorrel,indexName",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Equivalent Strike Up", 
                " Correlation or Model Id",
				" IndexName"
			},
			{
				" ARM_Credit_GetEqStrikeDown",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetEqStrikeDown",
                " idCorrel,indexName",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Equivalent Strike Down", 
                " Correlation or Model Id",
				" IndexName"
			},
			{
				" ARM_Credit_GetEqStrike",
                " RRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_GetEqStrike",
                " idCorrel,indexName,Strike type",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Returns Equivalent Strike Down", 
                " Correlation or Model Id",
				" IndexName"
				" UP or LOW",
			},
			{
				" ARM_Credit_ImpliedLossTree",
                " RRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_ImpliedLossTree",
                " AsOfDate,defcurve,correlation,[correltype],[adjust],[step]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Build implied loss tree for Standard Index Cdo", 
                " As Of Date", 
				" Index Default Curve",
				" Strikes-Terms Correlation",
				" Correlation type (default: base correlation)",
				" Adjusted (default is YES)",
				" Step (default is 30 days)"
			},
			{
				" ARM_Credit_ModifyLossTree",
                " RRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_ModifyLossTree",
                " Tree,Indexno,dates,lossnumbers,[defprobas],[statelosses]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_Price,
                " Modify implied loss tree", 
                " Tree Id", 
				" Index number",
				" vector of dates in yearfractions",
				" vector of loss numbers ",
				" matrix des probas de transitions (default)",
				" matrix des states losses"
			},
			{
				" ARM_Credit_DefProbInverse",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefProbInverse",
                " Curve id, Proba Default",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefaultIntensity,
                " Compute Maturity (in year fractions) corresponding to default probability", 
                " Default Curve id", 
                " Default Probability"
			},
			{
				" ARM_Credit_Instrument_GetDataMatrix",
                " RRR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Instrument_GetDataMatrix",
                " Credit Instrument Id",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Credit Instrument Id",
			},
			{
				" ARM_Credit_Get_IR_Curve_Moved_In_Time",
                " RRR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Get_IR_Curve_Moved_In_Time",
                " ZC Curve Id, Date",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " ZC Curve Id",
				" Date",
			},
			{
				" ARM_Credit_Math_BivNormale",
                " RRRR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Math_BivNormale",
                " x,y,rho",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " computes bivariate cumulative normale distribution",
				" x",
				" y",
				" rho"
			},
			{
				" ARM_Credit_Math_RandUniform",
                " RR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Math_RandUniform",
                " [seed]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " generate random uniform",
				" seed :default is no seed "
			},
			{
				" ARM_Credit_Math_RandNormal",
                " RRRR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Math_RandNormal",
                " a,b,[seed]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " generate random normal",
				" a: average",
				" b: vol",
				" seed:default is no seed "
			},
			{
		" ARM_Credit_QMatrix",
                " RR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_QMatrix",
                " matrix",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Matrix of Elements"
			},
			{
		" ARM_Credit_LssGapOption",
                " RRRRRR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_LssGapOption",
                " mezzId,spreadsTrigger,defaultTrigger,MtmTrigger,MtmSignleCond",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Gap Option for LSS",
		" Levarage super senior",
		" Matrix de trigger sur les spreads",
		" Matrix de trigger sur les defauts",
		" Matrix de trigger sur le Mtm",
		" Condition globale sur le Mtm"

			},
			{
		" ARM_Credit_QuickDefaultCurve",
                " RRRR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_QuickDefaultCurve",
                " spread,recovery,label",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Quick default curve",
				" spread in bp",
				" recovery in %",
				" label for the issuer"
			},
			{
		" ARM_Credit_QuickELoss",
                " RRRRRRRRRRR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_QuickELoss",
                " probadef,recovery,nbnames,strikedw,strikeup,correldw,correlup,[lossno],[intstep],[Lhp]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Quick computing of EL in homogeneous case",
				" default probability",
				" recovery",
				" number of names",
				" attachement point (in %)",
				" dettachement point (in %)",
				" correlation at strike down (in %)",
				" correlation at strike up (in %)",
				" loss number for given loss proba (default EL)",
				" integration step (default is 40)",
				" Large Homogeneous portfolio"
			},
		{
			" ARM_Credit_ModelMultiCvMktDataMng",
				" RRRRRRRR", //6 +1
				" ARM_Credit_ModelMultiCvMktDataMng",
				" VDefProbs,discountCv,VrecoRates,CorrelId,mktdatamng, volcv, cloneOrNot",
				" 1",
				XLLOCALARM_CREDIT_GROUP,
				" ",
                " ",
				" Model using MktDataMng input",
				" vector of defcurves ID",		
				" discount curve",
				" vector of reco rates associate",
				" CorrelId",
				" mktdatamng",
				" vol curve",
				" Y-N for clone"
		},
		{
		" ARM_Credit_QuickCDOPV",
                " RRRRRRRRRRRRRRRRRRR",			// 1 parametre d'entree + 1 parametre de retour
                " ARM_Credit_QuickCDOPV",
                " ircurve,defcurve,startdate,enddate,frequency,rate,strikedw,strikeup,correldw,correlup,notfeeleg,notdefleg,recovery,nbnames,[intstep],[lhp],[pricingtype],[Correl]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Quick pricing of homogeneous cdo",
				" ir curve",
				" default curve",
				" start date",
				" end date",
				" frequency",
				" rate",
				" strike down",
				" strike up"
				" correl down",
				" correl up (%)",
				" feeleg notional",
				" defleg notional",
				" recovery",
				" number of names",
				" integration steps (default is 40)",
				" LHP iMode (default is N)",
				" pricing type (default is PV)",
				" Correlation for TS"
			},
			{
				" ARM_Credit_Math_Interpol",
                " RRRRRRRRRRR",			// 2 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Math_Interpol",
                " X,Y,value,[type],[smooth],[weights],[modespline],[C1],[leftslope],[rightslope]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Interpolates",
				" X: vector in abcisses",
				" b: vector of values",
				" value of x to interpolate ",
				" interpolation type (0:default,linear,1:splines)",
				" Smothing factor (default:0.1)",
				" weights (default:id)",
				" spline mode (default 1: linear,0:constant, 2:tanh)",
				" C1 (default 0:no 1:yes)",
				" left slope",
				" right slope"
			},
			{
				" ARM_Credit_Schedule_Info",
                " RRRRRRRRRRRRRRRRRRR",			// 18 parametre d'entree + 1 parametre de retour
                " ARM_Credit_Schedule_Info",
                " StartDate,Maturity,[PayFreq],[ResetFreq],[Basis],[StubRule],[IntRule],[PayCalName],[PayTiming],[ResetTiming],[FwdRule],[IncludeMaturity],[Adj],[StartAdj],[AccDayCount],[RollDate], [FirstCpnEffDate], [CDSAdjCal]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
                " Object of Schedule informations",
				" StartDate",
				" Maturity",
				" PayFreq (Q)",
				" ResetFreq (M)",
				" Basis (A360)",
				" StubRule (LS)",
				" IntRule (ADJ)",
				" PayCalName (EUR)",
				" PayTiming (ARR)",
				" ResetTiming(ADV)",
				" FwdRule for Index(MF)",
				" IncludeMaturity(N)",
				" Adj (ADJ)",
				" StartAdj (ADJ)", 
				" AccDayCount (A360)",
				" RollDate (-1)",
				" FirstCpnEffDate (-1)",
				" CDS Adj (STDCDS)"
			},
			// CREDIT: Creates a Corridor Leg with a Schedule Object
			{
				" ARM_Credit_CorridorLeg_Sche",
                " RRRRRRRRRRRRR", // RRRRRRRRRRRRRRR",			// 12 parametres d'entree + 1 parametre de retour
                " ARM_Credit_CorridorLeg_Sche",
                " Notional, RecOrPay, RefSpreadsId, FloatIdxId,FloatLev,CreditIdxId,RefUpId,RefDwId,Schedule info ID,[AccOnDef],[discccy], [Name]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
				" Creates a Credit Corridor Leg", 
				" Notional",
				" RecieveOrPay",
				" RefValue spreads in BP",
				" Floating index",
				" Leverage on floating index",
				" credit index",
				" RefValue Strike Up in BP",
				" RefValue Strike Down in BP",
				" ScheduleInfoID",
				" Acc on default (ACC)",
				" discount ccy (EUR)",
				" Name("")"
				},

				{
				" ARM_Credit_FixingCurve",
                " RRRRRRRRRRRRR", // RRRRRRRRRRRRRRR",			// 12 parametres d'entree + 1 parametre de retour
                " ARM_Credit_FixingCurve",
                " VDates, VFixingValues,[AsOf],[indexName],[indexID]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " ",
				" Creates Fixing Curve", 
				" VDates",
				" VFixingValues in ",
				" AsOf (today)",
				" indexName ("")",
				" indexID("")"	
				},

				{
					" ARM_Credit_GetBasketCorrelMkDataFromCalypso",
					" RRRRR",
					" ARM_Credit_GetBasketCorrelMkDataFromCalypso",
					" PricingEnv, As of date, forceCurveName, [xmlFileName]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" Returns Basket Correl matrix ",
					" Princing Env (MO,..)",
					" AsOf Date",
					" Curve name in Calypso",
					" xml file name"
				},
				{
					" ARM_Credit_CreateBasketCorrelMkDataFromCalypso",
					" RRRRRRR",
					" ARM_Credit_CreateBasketCorrelMkDataFromCalypso",
					" PricingEnv, As of date, forceCurveName, Currency, [xmlFileName],[IndexId]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" ",
					" Returns Basket Correl Object ( as vol curve) ",
					" Pricing Env (MO,...) ",
					" AsOf Date",
					" Curve Name in Calypso",
					" Currency",
					" xml file name",
					" Index Id"
				},
				{
					" ARM_Credit_Math_CF_SpreadOption",
					" RRRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
					" ARM_Credit_Math_CF_SpreadOption",
					" yearterm,strike,correlation,coefs,spots,vol,[intstep]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					IDH_ARM_Credit_Spread,
					" Computes Call spread price in closed Formula", 
					" yearterm",
					" strike",
					" correlation",
					" coefs",
					" spots",
					" vol",
					" [intstep] : default 40"
			    },
				{
					" ARM_Credit_Calibrator",
					" RRRRRRRRRRRRR",						// 2 parametres d'entree + 1 parametre de retour
					" ARM_Credit_Calibrator",
					" security_vector,price_vectorBid,price_vectorAsk,parameters_vector,tsparams_vector,model,pricertype,parameters,parameters_inf,parameters_sup,pricingtype,[optimparams]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					IDH_ARM_Credit_Spread,
					" Calibration for a given basket of assets", 
					" security_vector",
					" price_vectorBid",
					" price_vectorAsk",
					" parameters_vector",
					" tsparams_vector",
					" model",
					" pricertype",
					" parameters",
					" parameters_inf",
					" parameters_sup",
					" pricingtype",
					" Optimparameters",
			    },
				{
					" ARM_Credit_Random_Generator",
					" RRR",						// 2 parametres d'entree + 1 parametre de retour
					" ARM_Credit_Random_Generator",
					" Random_Type,[Param_Id]",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" Creates a Random Generator",
					" Random Type", 
					" Parameter Id"
			    },
				{
					" ARM_Credit_GenerateOneRandom",
					" RR",						// 1 parametre d'entree + 1 parametre de retour
					" ARM_Credit_GenerateOneRandom",
					" RandomId",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" Generates a Random Number",
					" Random Id"
			    },
				{
					" ARM_Credit_GenerateRandoms",
					" RRR",						// 2 parametres d'entree + 1 parametre de retour
					" ARM_Credit_GenerateRandoms",
					" RandomId, DimVector",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" Generates a Vector of Random Numbers",
					" Random Id",
					" Dim Vector"
			    },
				{
					" ARM_Credit_ResetRandom",
					" RR",						// 1 parametre d'entree + 1 parametre de retour
					" ARM_Credit_ResetRandom",
					" RandomId",
					" 1",
					XLLOCALARM_CREDIT_GROUP,
					" ",
					" Reset Random Generator",
					" Random Id"
			    },
				{
				" ARM_Credit_SetMatuLabel",
                " RRR",						// 2 parametres d'entree + 1 parametre de retour
                " ARM_Credit_SetMatuLabel",
                " VolCurve id, Label",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                " Set the Labels of a vol curve", 
                " VolCurve id",
				" Labels of the curve in string format"
				},
	    {
				" ARM_Credit_DefCurvePWC_ABS",
                " RRRRRRRRRRRRRRRRR",					// 8 parametres d'entree + 1 parametre de retour
                " ARM_Credit_DefCurvePWC_ABS",
                " AsOfDate,Maturities,Spreads,IRcurveId,Recovery,[Ccy],[Label],[AdjCal],[Summit],[VolCurve],[Accrued],[CalibAlgo],[CalibData], [Lag],[UpFronts],[Amort]",
                " 1",
                XLLOCALARM_CREDIT_GROUP,
                " ",
                IDH_ARM_Credit_DefCurve,
                " Creates a Default zero-coupon curve Piece Wise Constant based on intensity model",
				" As Of Date in EXCEL date format",
                " Maturities ",
				" Spreads in bp ",
				" Recovery Rate",
				" IRcurveId : Interests Rates Curve ",
				" Currency in string format",
				" Label of the curve in string format",
				" Adjustment Calendar (default STDCDS) ,else NONE",
				" Summit Calibration (default is Yes)",
				" Vol Curve Flat(default is Volatility = 0%)",
				" Accrued Coupon Payment for Premium Leg",
				" Calibration Algo (default DICHO)",
				" Calib Data (default is STD)",
				" Lag CDS(default is ccy Lag)",
				" vector of Upfronts (int %)",
				" vector of Refvalues for Amort(%)"

        },
		{
				" ARM_Credit_Restrikable_CDO",
				" RRRRRRRRRRRR"	,			// 11 parametres d'entree + 1 parametre de retour
				" ARM_Credit_Restrikable_CDO",
				" TriggerStartDate, ExpiryDate,Strike,InitSpread,OptionType,UnderlyingId,Rehauss,TriggerFreq,DiffCDO, IsCMSpread , CMSpreadMatu",
				" 1",
				XLLOCALARM_CREDIT_GROUP,
				" ",
				" ",
				" Create The option associated to restrikable tranche(Underlying)",
				" Triger Observation StartDate" ,
				" Expiry of the trigger option",
				" Strike of the trigger",
				" Initial Spread",
				" Option Type",
				" UnderlyingId( Must be a mezzanine)",
				" Rehauss level",
				" Observation Frequency of the trigger",
				" type of trigger valuation ( diff of the CDOs or not)",
				" 1 of Constant Maturity Spread, 0 if not",
				" Maturity of simulated spread ( 3,5,..)"

		},