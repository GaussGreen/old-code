//
// Copyright IONA Technologies, Inc.  All rights reserved.
// C++ generated by Orbix 2000 IDL compiler version 5.1.
//

#include "req.h"
#include <orbix_sys/nmval.h>
#include <orbix_sys/itcxx_conf.h>
#include <orbix_sys/tc_pod_structs.h>
#include <orbix_xtras/core_minor_codes.hh>

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPE_seq_0
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPE_seq_0
static IT_TC_Sequence IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPE_seq_0 =
{
    {
        { IT_TC_sequence_vtable, IT_FALSE },
        0,
        0,
    },
    0,
    CORBA::_tc_string,
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPETC
static IT_TC_Alias IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPETC =
{
    {
        { IT_TC_alias_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_STRING_ARRAY_TYPE:1.0",
    "ARM_CORBA_STRING_ARRAY_TYPE",
    &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPE_seq_0.m_tc_base.m_tc
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_STRING_ARRAY_TYPE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_STRING_ARRAY_TYPETC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
    const ARM_CORBA_STRING_ARRAY_TYPE& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
    ARM_CORBA_STRING_ARRAY_TYPE* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::~IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE;
        }
        CORBA::ULong _length_0 = is->read_ulong();
        if (_length_0 != 0)
        {
            char** _buf_0 = ARM_CORBA_STRING_ARRAY_TYPE::it_allocbuf_null_init(_length_0);

            for (CORBA::ULong i0 = 0; i0 < _length_0; i0++)
            {
                _buf_0[i0] = is->read_string();
            }
            (*m_ptr_ptr)->replace(
                _length_0,
                _length_0,
                _buf_0,
                1
            );
        }
        else
        {
            (*m_ptr_ptr)->length(0);
        }
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE* _buf_0 = (*m_ptr_ptr);
        CORBA::ULong _length_0 = _buf_0->length();
        os->write_ulong(_length_0);
        if (_length_0 != 0)
        {
            char** _it_0 = _buf_0->get_buffer(0);
            char** _end_0 = _it_0 + _length_0;
            while (_it_0 != _end_0)
            {
                os->write_string((*_it_0));
                ++_it_0;
            }
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPE_seq_0
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPE_seq_0
static IT_TC_Sequence IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPE_seq_0 =
{
    {
        { IT_TC_sequence_vtable, IT_FALSE },
        0,
        0,
    },
    0,
    CORBA::_tc_long,
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPETC
static IT_TC_Alias IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPETC =
{
    {
        { IT_TC_alias_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_LONG_ARRAY_TYPE:1.0",
    "ARM_CORBA_LONG_ARRAY_TYPE",
    &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPE_seq_0.m_tc_base.m_tc
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_LONG_ARRAY_TYPE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_LONG_ARRAY_TYPETC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
    const ARM_CORBA_LONG_ARRAY_TYPE& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
    ARM_CORBA_LONG_ARRAY_TYPE* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::~IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE;
        }
        CORBA::ULong _length_0 = is->read_ulong();
        if (_length_0 != 0)
        {
            CORBA::LongSeq _buf_0(_length_0);
            _buf_0.length(_length_0);
            is->read_long_array(_buf_0, 0, _length_0);
            (*m_ptr_ptr)->replace(
                _length_0,
                _length_0,
                _buf_0.get_buffer(1),
                1
            );
        }
        else
        {
            (*m_ptr_ptr)->length(0);
        }
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE* _buf_0 = (*m_ptr_ptr);
        CORBA::ULong _length_0 = _buf_0->length();
        os->write_ulong(_length_0);
        if (_length_0 != 0)
        {
            CORBA::LongSeq _buf_(
                _buf_0->maximum(),
                _length_0,
                _buf_0->get_buffer()
            );
            os->write_long_array(_buf_, 0, _length_0);
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPE_seq_0
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPE_seq_0
static IT_TC_Sequence IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPE_seq_0 =
{
    {
        { IT_TC_sequence_vtable, IT_FALSE },
        0,
        0,
    },
    0,
    CORBA::_tc_double,
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPETC
static IT_TC_Alias IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPETC =
{
    {
        { IT_TC_alias_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_DOUBLE_ARRAY_TYPE:1.0",
    "ARM_CORBA_DOUBLE_ARRAY_TYPE",
    &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPE_seq_0.m_tc_base.m_tc
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_DOUBLE_ARRAY_TYPE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_DOUBLE_ARRAY_TYPETC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
    const ARM_CORBA_DOUBLE_ARRAY_TYPE& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
    ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::~IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE;
        }
        CORBA::ULong _length_0 = is->read_ulong();
        if (_length_0 != 0)
        {
            CORBA::DoubleSeq _buf_0(_length_0);
            _buf_0.length(_length_0);
            is->read_double_array(_buf_0, 0, _length_0);
            (*m_ptr_ptr)->replace(
                _length_0,
                _length_0,
                _buf_0.get_buffer(1),
                1
            );
        }
        else
        {
            (*m_ptr_ptr)->length(0);
        }
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE* _buf_0 = (*m_ptr_ptr);
        CORBA::ULong _length_0 = _buf_0->length();
        os->write_ulong(_length_0);
        if (_length_0 != 0)
        {
            CORBA::DoubleSeq _buf_(
                _buf_0->maximum(),
                _length_0,
                _buf_0->get_buffer()
            );
            os->write_double_array(_buf_, 0, _length_0);
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC_members
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC_members
const char* IT_Gen_tc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC_members[] =
{
    "OBJ_PARAM",
    "OBJ_REQUEST",
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC
static IT_TC_Enum IT_Gen_tc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC =
{
    {
        { IT_TC_enum_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_OBJ_TYPE:1.0",
    "ARM_OBJ_TYPE",
    2,
    IT_Gen_tc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC_members,
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_OBJ_TYPE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_OBJ_TYPETC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::IT_Gen_ARM_OBJ_TYPEStreamable(
    ARM_OBJ_TYPE _val,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(_val)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::IT_Gen_ARM_OBJ_TYPEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(ARM_CorbaRequestModule::ARM_OBJ_TYPE(0))
{}

ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::~IT_Gen_ARM_OBJ_TYPEStreamable()
{}

void
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        *m_ptr = IT_STATIC_CAST(ARM_CorbaRequestModule::ARM_OBJ_TYPE, is->read_ulong());
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        os->write_ulong(*m_ptr);
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_OBJ_TYPEStreamable(*m_ptr, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::insert(
    ARM_CorbaRequestModule::ARM_OBJ_TYPE _val
)
{
    *m_ptr = _val;
}

ARM_CorbaRequestModule::ARM_OBJ_TYPE&
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::extract() const
{
    return *m_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_OBJ_TYPEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_OBJ_TYPEStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC_members
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC_members
const char* IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC_members[] =
{
    "ARM_CORBA_ERR",
    "ARM_CORBA_DOUBLE",
    "ARM_CORBA_LONG",
    "ARM_CORBA_STRING",
    "ARM_CORBA_STRING_ARRAY",
    "ARM_CORBA_DOUBLE_ARRAY",
    "ARM_CORBA_LONG_ARRAY",
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC
static IT_TC_Enum IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC =
{
    {
        { IT_TC_enum_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_VALUE_TYPE:1.0",
    "ARM_CORBA_VALUE_TYPE",
    7,
    IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC_members,
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_VALUE_TYPE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUE_TYPETC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
    ARM_CORBA_VALUE_TYPE _val,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(_val)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE(0))
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::~IT_Gen_ARM_CORBA_VALUE_TYPEStreamable()
{}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        *m_ptr = IT_STATIC_CAST(ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE, is->read_ulong());
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        os->write_ulong(*m_ptr);
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_VALUE_TYPEStreamable(*m_ptr, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE _val
)
{
    *m_ptr = _val;
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::extract() const
{
    return *m_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_VALUE_TYPEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUE_TYPEStreamable
)

ARM_CorbaRequestModule::ARM_CORBA_VALUE::ARM_CORBA_VALUE()
  :
    _is_set(0),
    _IT_Gen_d(_default_val)
{
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE::ARM_CORBA_VALUE(const ARM_CORBA_VALUE& _copy)
  :
    _is_set(0),
    _IT_Gen_d(_default_val)
{
    operator=(_copy);
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE::~ARM_CORBA_VALUE()
{
    _cleanup();
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::operator=(const ARM_CORBA_VALUE& _copy)
{
    if (this == &_copy) return *this;

    switch (_copy._d())
    {
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE:
            this->doubleVal(_copy.doubleVal());
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG:
            this->longVal(_copy.longVal());
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING:
            this->stringVal(_copy.stringVal());
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY:
            this->longArray(_copy.longArray());
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY:
            this->doubleArray(_copy.doubleArray());
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY:
            this->stringArray(_copy.stringArray());
            break;
    }
    _IT_Gen_d = _copy._d();
    return *this;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::_d(ARM_CORBA_VALUE_TYPE _disc)
{
    switch (_IT_Gen_d)
    {
      case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
      case ::ARM_CorbaRequestModule::ARM_CORBA_LONG:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_LONG
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
      case ::ARM_CorbaRequestModule::ARM_CORBA_STRING:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_STRING
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
      case ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
      case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
      case ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY:
        if (
            _disc == ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY
        )
        {
            _IT_Gen_d = _disc;
        }
        else
        {
            assert(_IT_Gen_d == _disc); // Illegal set!
        }
        break;
    }
    _IT_Gen_d = _disc;
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE
ARM_CorbaRequestModule::ARM_CORBA_VALUE::_d() const
{
    return _IT_Gen_d;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::doubleVal(CORBA::Double _arg)
{
    if (_is_set)
    {
        _cleanup();
    }
    _doubleVal_ = _arg;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE;
}

CORBA::Double
ARM_CorbaRequestModule::ARM_CORBA_VALUE::doubleVal() const
{
    return _doubleVal_;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::longVal(CORBA::Long _arg)
{
    if (_is_set)
    {
        _cleanup();
    }
    _longVal_ = _arg;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_LONG;
}

CORBA::Long
ARM_CorbaRequestModule::ARM_CORBA_VALUE::longVal() const
{
    return _longVal_;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringVal(char* _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_STRING))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
        _stringVal_ = new CORBA::IT_Cxx_String_mgr;
    }
    *_stringVal_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringVal(const char* _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_STRING))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
        _stringVal_ = new CORBA::IT_Cxx_String_mgr;
    }
    *_stringVal_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringVal(const CORBA::String_var & _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_STRING))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
        _stringVal_ = new CORBA::IT_Cxx_String_mgr;
    }
    *_stringVal_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING;
}

const char*
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringVal() const
{
    return *_stringVal_;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::longArray(const ARM_CORBA_LONG_ARRAY_TYPE& _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY;
        _longArray_ = new ARM_CORBA_LONG_ARRAY_TYPE;
    }
    *_longArray_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY;
}

const ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::longArray() const
{
    return *_longArray_;
}

ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::longArray()
{
    return *_longArray_;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::doubleArray(const ARM_CORBA_DOUBLE_ARRAY_TYPE& _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY;
        _doubleArray_ = new ARM_CORBA_DOUBLE_ARRAY_TYPE;
    }
    *_doubleArray_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY;
}

const ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::doubleArray() const
{
    return *_doubleArray_;
}

ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::doubleArray()
{
    return *_doubleArray_;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringArray(const ARM_CORBA_STRING_ARRAY_TYPE& _arg)
{
    if (!_is_set || (_IT_Gen_d != ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY))
    {
        _cleanup();
        _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY;
        _stringArray_ = new ARM_CORBA_STRING_ARRAY_TYPE;
    }
    *_stringArray_ = _arg;
    _is_set = 1;
    _IT_Gen_d = ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY;
}

const ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringArray() const
{
    return *_stringArray_;
}

ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY_TYPE&
ARM_CorbaRequestModule::ARM_CORBA_VALUE::stringArray()
{
    return *_stringArray_;
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::ARM_CORBA_VALUE::_it_get_label(
    CORBA::ULong index
)
{
    CORBA::Any any;
    CORBA::IT_Streamable* rtn;
    switch (index)
    {
      case 0:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_DOUBLE;
        }
        break;
      case 1:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_LONG;
        }
        break;
      case 2:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_STRING;
        }
        break;
      case 3:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY;
        }
        break;
      case 4:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY;
        }
        break;
      case 5:
        {
            any <<= ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY;
        }
        break;
    }
    any.it_take_streamable(rtn);
    return rtn;
}

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::_cleanup()
{
    if (!_is_set) return;

    _is_set = 0;
    switch (_IT_Gen_d)
    {
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE:
        break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG:
        break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING:
            delete _stringVal_;
        break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY:
            delete _longArray_;
        break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY:
            delete _doubleArray_;
        break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY:
            delete _stringArray_;
        break;
    }
}
const ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE ARM_CorbaRequestModule::ARM_CORBA_VALUE::_default_val = ::ARM_CorbaRequestModule::ARM_CORBA_ERR;

void
ARM_CorbaRequestModule::ARM_CORBA_VALUE::_default()
{
    _IT_Gen_d = _default_val;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::IT_Gen_ARM_CORBA_VALUEStreamable(
    const ARM_CORBA_VALUE& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_VALUE(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::IT_Gen_ARM_CORBA_VALUEStreamable(
    ARM_CORBA_VALUE* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_VALUE(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::IT_Gen_ARM_CORBA_VALUEStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::~IT_Gen_ARM_CORBA_VALUEStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_VALUE;
        }
        ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE _IT_Gen_local_d;
        IT_Gen_ARM_CORBA_VALUE_TYPEStreamable _IT_Gen_local_d_strm(&_IT_Gen_local_d, m_orb);
        _IT_Gen_local_d_strm.read(is);

        switch (_IT_Gen_local_d)
        {
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE:
            {
                (*m_ptr_ptr)->doubleVal(is->read_double());
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG:
            {
                (*m_ptr_ptr)->longVal(is->read_long());
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING:
            {
                char* _tmp_stringVal = 0;
                _tmp_stringVal = is->read_string();
                (*m_ptr_ptr)->stringVal(_tmp_stringVal);
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY:
            {
                ARM_CORBA_LONG_ARRAY_TYPE _tmp_longArray;
                {
                    IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable itlocal_longArray(&_tmp_longArray, m_orb);
                    itlocal_longArray.read(is);
                    (*m_ptr_ptr)->longArray(_tmp_longArray);
                }
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY:
            {
                ARM_CORBA_DOUBLE_ARRAY_TYPE _tmp_doubleArray;
                {
                    IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable itlocal_doubleArray(&_tmp_doubleArray, m_orb);
                    itlocal_doubleArray.read(is);
                    (*m_ptr_ptr)->doubleArray(_tmp_doubleArray);
                }
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY:
            {
                ARM_CORBA_STRING_ARRAY_TYPE _tmp_stringArray;
                {
                    IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable itlocal_stringArray(&_tmp_stringArray, m_orb);
                    itlocal_stringArray.read(is);
                    (*m_ptr_ptr)->stringArray(_tmp_stringArray);
                }
            }
            break;
        }
        (*m_ptr_ptr)->_d(_IT_Gen_local_d);
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        ARM_CorbaRequestModule::ARM_CORBA_VALUE_TYPE _IT_Gen_local_d = (*m_ptr_ptr)->_d();
        IT_Gen_ARM_CORBA_VALUE_TYPEStreamable _IT_Gen_local_d_strm(&_IT_Gen_local_d, m_orb);
        _IT_Gen_local_d_strm.write(os);

        switch ((*m_ptr_ptr)->_d())
        {
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE:
            {
                os->write_double((*m_ptr_ptr)->doubleVal());
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG:
            {
                os->write_long((*m_ptr_ptr)->longVal());
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING:
            {
                os->write_string((*m_ptr_ptr)->_stringVal_->inout());
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_LONG_ARRAY:
            {
                {
                    IT_Gen_ARM_CORBA_LONG_ARRAY_TYPEStreamable itlocal_longArray(&(*m_ptr_ptr)->longArray(), m_orb);
                    itlocal_longArray.write(os);
                }
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_DOUBLE_ARRAY:
            {
                {
                    IT_Gen_ARM_CORBA_DOUBLE_ARRAY_TYPEStreamable itlocal_doubleArray(&(*m_ptr_ptr)->doubleArray(), m_orb);
                    itlocal_doubleArray.write(os);
                }
            }
            break;
          case ::ARM_CorbaRequestModule::ARM_CORBA_STRING_ARRAY:
            {
                {
                    IT_Gen_ARM_CORBA_STRING_ARRAY_TYPEStreamable itlocal_stringArray(&(*m_ptr_ptr)->stringArray(), m_orb);
                    itlocal_stringArray.write(os);
                }
            }
            break;
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_VALUEStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_VALUE& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_VALUE(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_VALUE* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_VALUE* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_VALUE(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_VALUE*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_VALUEStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_VALUEStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC_members
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC_members
static IT_TC_UnionMember IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC_members[] =
{
    {
        "doubleVal",
        0,
        CORBA::_tc_double,
    },
    {
        "longVal",
        0,
        CORBA::_tc_long,
    },
    {
        "stringVal",
        0,
        CORBA::_tc_string,
    },
    {
        "longArray",
        0,
        ARM_CorbaRequestModule::_tc_ARM_CORBA_LONG_ARRAY_TYPE,
    },
    {
        "doubleArray",
        0,
        ARM_CorbaRequestModule::_tc_ARM_CORBA_DOUBLE_ARRAY_TYPE,
    },
    {
        "stringArray",
        0,
        ARM_CorbaRequestModule::_tc_ARM_CORBA_STRING_ARRAY_TYPE,
    },
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC
static IT_TC_Union IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC =
{
    {
        { IT_TC_union_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_VALUE:1.0",
    "ARM_CORBA_VALUE",
    ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE_TYPE,
    -1,
    6,
    IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC_members,
    &ARM_CorbaRequestModule::ARM_CORBA_VALUE::_it_get_label,
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_VALUE = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_VALUETC.m_tc_base.m_tc;
}


#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC_members
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC_members
static IT_TC_StructMember IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC_members[] =
{
    {
        "IsParam",
        CORBA::_tc_long,
    },
    {
        "val",
        ARM_CorbaRequestModule::_tc_ARM_CORBA_VALUE,
    },
    {
        "nbValues",
        CORBA::_tc_long,
    },
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC
static IT_TC_Struct IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC =
{
    {
        { IT_TC_struct_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_PARAM:1.0",
    "ARM_CORBA_PARAM",
    3,
    IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC_members,
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_PARAM = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_PARAMTC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::IT_Gen_ARM_CORBA_PARAMStreamable(
    const ARM_CORBA_PARAM& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_PARAM(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::IT_Gen_ARM_CORBA_PARAMStreamable(
    ARM_CORBA_PARAM* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_PARAM(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::IT_Gen_ARM_CORBA_PARAMStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::~IT_Gen_ARM_CORBA_PARAMStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_PARAM;
        }
        (*m_ptr_ptr)->IsParam = is->read_long();
        {
            IT_Gen_ARM_CORBA_VALUEStreamable itlocal_val(&(*m_ptr_ptr)->val, m_orb);
            itlocal_val.read(is);
        }
        (*m_ptr_ptr)->nbValues = is->read_long();
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        os->write_long((*m_ptr_ptr)->IsParam);
        {
            IT_Gen_ARM_CORBA_VALUEStreamable itlocal_val(&(*m_ptr_ptr)->val, m_orb);
            itlocal_val.write(os);
        }
        os->write_long((*m_ptr_ptr)->nbValues);
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_PARAMStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_PARAM& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_PARAM(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_PARAM* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_PARAM* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_PARAM(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_PARAM*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_PARAMStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_PARAMStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_paramsList_seq_0
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_paramsList_seq_0
static IT_TC_Sequence IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_paramsList_seq_0 =
{
    {
        { IT_TC_sequence_vtable, IT_FALSE },
        0,
        0,
    },
    0,
    ARM_CorbaRequestModule::_tc_ARM_CORBA_PARAM,
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC_members
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC_members
static IT_TC_StructMember IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC_members[] =
{
    {
        "IsRequest",
        ARM_CorbaRequestModule::_tc_ARM_OBJ_TYPE,
    },
    {
        "reqId",
        CORBA::_tc_long,
    },
    {
        "nbParams",
        CORBA::_tc_long,
    },
    {
        "paramsList",
        &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_paramsList_seq_0.m_tc_base.m_tc,
    },
};
#endif

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC
static IT_TC_Struct IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC =
{
    {
        { IT_TC_struct_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_REQUEST:1.0",
    "ARM_CORBA_REQUEST",
    4,
    IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC_members,
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_REQUEST = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUESTTC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::IT_Gen_ARM_CORBA_REQUESTStreamable(
    const ARM_CORBA_REQUEST& val,
    CORBA::IT_ORB_ptr orb,
    CORBA::TypeCode_ptr type
) :
    CORBA::IT_Cxx_StreamableBase(orb, type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr)
{
    m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_REQUEST(val);
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::IT_Gen_ARM_CORBA_REQUESTStreamable(
    ARM_CORBA_REQUEST* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(_val)
{
    if (!_adopt && _val != 0)
    {
        m_ptr = new ARM_CorbaRequestModule::ARM_CORBA_REQUEST(*_val);
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::IT_Gen_ARM_CORBA_REQUESTStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_StreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr_ptr(&m_ptr),
    m_ptr(0)
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::~IT_Gen_ARM_CORBA_REQUESTStreamable()
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        if (*m_ptr_ptr == 0)
        {
            *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_REQUEST;
        }
        {
            IT_Gen_ARM_OBJ_TYPEStreamable itlocal_IsRequest(&(*m_ptr_ptr)->IsRequest, m_orb, _tc_ARM_OBJ_TYPE);
            itlocal_IsRequest.read(is);
        }
        (*m_ptr_ptr)->reqId = is->read_long();
        (*m_ptr_ptr)->nbParams = is->read_long();
        CORBA::ULong _length_paramsList0 = is->read_ulong();
        if (_length_paramsList0 != 0)
        {
            ARM_CORBA_PARAM* _buf_paramsList0 = IT_Cxx_USeq< ARM_CORBA_PARAM >::allocbuf(_length_paramsList0);
            IT_Gen_ARM_CORBA_PARAMStreamable _tmp(&_buf_paramsList0[0], m_orb);
            for (CORBA::ULong iparamsList0 = 0; iparamsList0 < _length_paramsList0; iparamsList0++)
            {
                _tmp.insert(&_buf_paramsList0[iparamsList0]);
                _tmp.read(is);
            }
            (*m_ptr_ptr)->paramsList.replace(
                _length_paramsList0,
                _length_paramsList0,
                _buf_paramsList0,
                1
            );
        }
        else
        {
            (*m_ptr_ptr)->paramsList.length(0);
        }
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        ARM_OBJ_TYPE _local_IsRequest = (*m_ptr_ptr)->IsRequest;
        {
            IT_Gen_ARM_OBJ_TYPEStreamable itlocal_IsRequest(&_local_IsRequest, m_orb, _tc_ARM_OBJ_TYPE);
            itlocal_IsRequest.write(os);
        }
        os->write_long((*m_ptr_ptr)->reqId);
        os->write_long((*m_ptr_ptr)->nbParams);
        IT_Cxx_USeq< ARM_CORBA_PARAM >* _buf_paramsList0 = &((*m_ptr_ptr)->paramsList);
        CORBA::ULong _length_paramsList0 = _buf_paramsList0->length();
        os->write_ulong(_length_paramsList0);
        if (_length_paramsList0 != 0)
        {
            ARM_CORBA_PARAM* _it_paramsList0 = _buf_paramsList0->get_buffer(0);
            ARM_CORBA_PARAM* _end_paramsList0 = _it_paramsList0 + _length_paramsList0;
            IT_Gen_ARM_CORBA_PARAMStreamable _tmpparamsList0(_it_paramsList0, m_orb);
            while (_it_paramsList0 != _end_paramsList0)
            {
                _tmpparamsList0.insert(_it_paramsList0);
                _tmpparamsList0.write(os);
                ++_it_paramsList0;
            }
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_REQUESTStreamable(*m_ptr_ptr, IT_FALSE, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::insert(
    const ARM_CorbaRequestModule::ARM_CORBA_REQUEST& _val
)
{
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    *m_ptr_ptr = new ARM_CorbaRequestModule::ARM_CORBA_REQUEST(_val);
    m_own_value = IT_TRUE;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::insert(
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST* _val,
    IT_Bool _adopt
)
{
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST* p = _val;
    if (m_own_value)
    {
        delete *m_ptr_ptr;
    }
    if (!_adopt)
    {
        p = new ARM_CorbaRequestModule::ARM_CORBA_REQUEST(*_val);
    }
    *m_ptr_ptr = p;
    m_own_value = IT_TRUE;
}

ARM_CorbaRequestModule::ARM_CORBA_REQUEST*&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::extract() const
{
    return *m_ptr_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_REQUESTStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUESTStreamable
)

#ifndef IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALLTC
#define IT_Gen_Guardtc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALLTC
static IT_TC_Objref IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALLTC =
{
    {
        { IT_TC_objref_vtable, IT_FALSE },
        0,
        0,
    },
    "IDL:ARM_CorbaRequestModule/ARM_CORBA_REQUEST_CALL:1.0",
    "ARM_CORBA_REQUEST_CALL",
};
#endif

namespace ARM_CorbaRequestModule
{
    IT_TYPECODE_CONST CORBA::TypeCode_ptr _tc_ARM_CORBA_REQUEST_CALL = &IT_Gen_tc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALLTC.m_tc_base.m_tc;
}


ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::~ARM_CORBA_REQUEST_CALL()
{
}

ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr
ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_narrow(
    CORBA::Object_ptr obj
)
{
    ARM_CORBA_REQUEST_CALL_ptr result = 0;

    if (obj != 0)
    {
        result = dynamic_cast<ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr>(obj);

        if (result != 0)
        {
            obj->_add_ref();
        }
        else
        {
            if (obj->_is_a(ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST_CALL->id()))
            {
                result = new ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL(obj);
            }
        }

    }

    return result;
}


ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr
ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_unchecked_narrow(
    CORBA::Object_ptr obj
)
{
    ARM_CORBA_REQUEST_CALL_ptr result = 0;

    if (obj != 0)
    {
        result = dynamic_cast<ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr>(obj);

        if (result != 0)
        {
            obj->_add_ref();
        }
        else
        {
            result = new ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL(obj);
        }

    }

    return result;
}

const IT_FWString ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_it_fw_type_id(ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST_CALL->id(), 0, IT_FWString::Reference);

ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL(
    CORBA::Object_ptr proxy
) :
    CORBA_IT_Cxx_DPBase(proxy)
{
}

ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL::~IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL() {}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
    ARM_CORBA_REQUEST_CALL_ptr _val,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_InterfaceStreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_duplicate(_val))
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
    ARM_CORBA_REQUEST_CALL_ptr* _val,
    IT_Bool _adopt,
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_InterfaceStreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_nil())
{
    if (_val != 0)
    {
        if (_adopt)
        {
            m_val = *_val;
        }
        else
        {
            m_val = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_duplicate(*_val);
        }
    }
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(
    CORBA::IT_ORB_ptr _orb,
    CORBA::TypeCode_ptr _type
) :
    CORBA::IT_Cxx_InterfaceStreamableBase(_orb, _type, IT_TRUE, IT_TRUE),
    m_ptr(&m_val),
    m_val(ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_nil())
{}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::~IT_Gen_ARM_CORBA_REQUEST_CALLStreamable()
{
    if (m_own_value)
    {
        CORBA::release(*m_ptr);
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::read(
    CORBA::IT_InStream_ptr is
)
{
    if (!CORBA::is_nil(is))
    {
        CORBA::IT_ORB_ptr orb = m_orb;
        if (CORBA::is_nil(orb) && !CORBA::is_nil(*m_ptr))
        {
            orb = (*m_ptr)->_it_get_orb_nc();
        }
        if (CORBA::is_nil(orb))
        {
            throw CORBA::MARSHAL(
                IT_Core_MinorCodes::MARSHAL::NO_ORB_AVAILABLE
            );
        }
        CORBA::Object_var obj = orb->it_demarshal_object(is);
        CORBA::release(*m_ptr);
        *m_ptr = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_unchecked_narrow(obj);
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::write(
    CORBA::IT_OutStream_ptr os
) const
{
    if (!CORBA::is_nil(os))
    {
        CORBA::IT_ORB_ptr orb = m_orb;
        if (CORBA::is_nil(orb) && !CORBA::is_nil(*m_ptr))
        {
            orb = (*m_ptr)->_it_get_orb_nc();
        }
        if (CORBA::is_nil(orb))
        {
            throw CORBA::MARSHAL(
                IT_Core_MinorCodes::MARSHAL::NO_ORB_AVAILABLE
            );
        }
        if (!CORBA::is_nil(*m_ptr))
        {
            (*m_ptr)->_it_marshal(os, orb);
        }
        else
        {
            orb->it_marshal_nil(os);
        }
    }
}

CORBA::IT_Streamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::clone(
    CORBA::TypeCode_ptr _type
) const
{
    if (CORBA::is_nil(_type))
    {
        _type = m_type;
    }
    return new IT_Gen_ARM_CORBA_REQUEST_CALLStreamable(*m_ptr, m_orb, _type);
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::prepare_nonshareable_arg(
    CORBA::IT_OutStream_ptr os,
    unsigned long _direction
)
{
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::replace_nonshareable_arg(
    CORBA::IT_InStream_ptr is,
    unsigned long _direction
)
{
    if (!CORBA::is_nil(*m_ptr))
    {
        CORBA::Object_var _p = (*m_ptr)->_it_unshare();
        if (m_own_value || _direction != CORBA::ARG_IN)
        {
            CORBA::release(*m_ptr);
        }
        *m_ptr = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_unchecked_narrow(_p.in());
        if (_direction == CORBA::ARG_IN)
        {
            m_own_value = IT_TRUE;
        }
    }
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::insert(
    ARM_CORBA_REQUEST_CALL_ptr _val
)
{
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr p = _val;
    if (m_own_value)
    {
        CORBA::release(*m_ptr);
        p = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_duplicate(_val);
    }
    *m_ptr = p;
}

void
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::insert(
    ARM_CORBA_REQUEST_CALL_ptr* _val,
    IT_Bool _adopt
)
{
    if (_val != 0)
    {
        if (m_own_value)
        {
            CORBA::release(*m_ptr);
        }
        ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr p = *_val;
        if (!_adopt)
        {
            p = ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL::_duplicate(*_val);
        }
        *m_ptr = p;
        m_own_value = IT_TRUE;
    }
}

ARM_CorbaRequestModule::ARM_CORBA_REQUEST_CALL_ptr&
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::extract() const
{
    return *m_ptr;
}

IT_Bool
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::extract_from(
    const CORBA::Any& _any
) const
{
    IT_Bool _retval = IT_FALSE;
    CORBA::IT_Streamable* _s = _any.it_get_streamable();
    if (_s == 0)
    {
        return _retval;
    }
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable* _p =
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::_downcast(_s);
    if (_p == 0)
    {
        ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable _ns(m_orb, m_type);
        _retval = _ns.convert_and_extract(_any);
        if (_retval)
        {
            _p = ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::_downcast(
                _any.it_get_streamable()
            );
        }
    }
    if (_p != 0)
    {
        *m_ptr = _p->extract();
        _retval = IT_TRUE;
    }
    return _retval;
}

ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable*
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::_downcast(
    CORBA::IT_Streamable* _s
)
{
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable* _p = 0;
    if (_s != 0)
    {
        _p = ART_CALL_LOCAL_NARROW(
            _s,
            IT_Gen_ARM_CORBA_REQUEST_CALLStreamable
        );
    }
    return _p;
}

ART_IMPL_LOCAL_NARROW_BASE1(
    ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable,
    CORBA::IT_Cxx_InterfaceStreamableBase
)

CORBA::Object_ptr
ARM_CorbaRequestModule::IT_Gen_ARM_CORBA_REQUEST_CALLStreamable::widen_to_object() const
{
    return *m_ptr;
}

CORBA::Flags IT_Gen_opdescflags_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL_Send[] =
{
    CORBA::ARG_IN,
    CORBA::ARG_OUT,
};

CORBA::IT_Cxx_DPBase::_OpDescriptor IT_Gen_opdesc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL_Send = 
{
    "Send",
    IT_Gen_opdescflags_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL_Send,
    0,
    0,
    0,
    0,
    IT_FALSE
};

CORBA::Long
ARM_CorbaRequestModule::IT_Gen_DynamicProxy_ARM_CORBA_REQUEST_CALL::Send(
    const ARM_CorbaRequestModule::ARM_CORBA_REQUEST&  itparam_inRequest,
    ARM_CorbaRequestModule::ARM_CORBA_REQUEST_out  itparam_rRequest
)

{
    CORBA::Long itlocal_result;

    CORBA::IT_ORB_ptr itlocal_target_orb = _m_proxy->_it_get_orb_nc();

    IT_Gen_ARM_CORBA_REQUESTStreamable itstrm_inRequest(&itparam_inRequest, itlocal_target_orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST);
    itparam_rRequest = 0;
    IT_Gen_ARM_CORBA_REQUESTStreamable itstrm_rRequest(IT_FALSE, &itparam_rRequest, itlocal_target_orb, ARM_CorbaRequestModule::_tc_ARM_CORBA_REQUEST);
    CORBA::IT_Cxx_LongStreamable itlocal_retn(&itlocal_result, itlocal_target_orb);
    CORBA::IT_Streamable* itlocal_arglist[] =
    {
        &itstrm_inRequest,
        &itstrm_rRequest,
    };
    _it_invoke_helper(
        IT_Gen_opdesc_ARM_CorbaRequestModule_ARM_CORBA_REQUEST_CALL_Send,
        itlocal_arglist,
        itlocal_arglist + sizeof(itlocal_arglist)/sizeof(itlocal_arglist[0]),
        &itlocal_retn,
        0
    );
    return itlocal_result;
}




