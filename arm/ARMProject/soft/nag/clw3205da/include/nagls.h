#ifndef NAGLS
#define NAGLS

/* <nagls.h>
 *
 * Copyright 1991 Numerical Algorithms Group
 *
 * Local include file for NAG C Library s chapter
 *
 * This header file was generated by getcons.
 *
 * Mark 2, 1991
 *
 */

#define NAG_SCHAP_ERROR_BUF_LEN 20
#define MACHINE_PRECISION 15

/*
 * S10ABC_XOVFL ----  maximum argument for exp
 */
#define S10ABC_XOVFL 7.080e+2

/*
 * S10ACC_XOVFL ----  maximum argument for exp
 */
#define S10ACC_XOVFL 7.080e+2

/*
 * S13AAC_XHI ----  maximum negative argument for exp
 */
#define S13AAC_XHI 7.083e+2

/*
 * S14AAC_XBIG  = largest x such that  gamma(x)  <  MAXREAL
 *                        and  1.0/gamma(x+1.0)  >  MINREAL
 * (rounded down to an integer)
 */
#define S14AAC_XBIG 1.70e+2

/*
 * S14AAC_GBIG  = gamma(S14AAC_XBIG)
 */
#define S14AAC_GBIG 4.3e+304

/*
 * S14AAC_XMINV = max(1.0/MAXREAL, MINREAL) (rounded up)
 */
#define S14AAC_XMINV 2.23e-308

/*
 * log(gamma(S14ABC_XVBIG)) = S14ABC_GBIG <=
 *                            maxreal (rounded down)
 */
#define S14ABC_XVBIG 2.55e+305
#define S14ABC_GBIG 1.79e+308

/*
 * S15ADC_XHI = largest x: exp(-x*x)>MINREAL (rounded down)
 */
#define S15ADC_XHI 2.66e+1

/*
 * S17ACC_XBIG = a value approximately given by 1/eps
 * such that sin(xbig) and cos(xbig) can be computed
 * without an execution error.
 */
#define S17ACC_XBIG 1.0e+16

/*
 * S17ADC_XBIG = a value approximately given by 1/eps such
 * that sin(xbig) and cos(xbig) can be computed without an
 * execution error.
 */
#define S17ADC_XBIG 1.0e+16

/*
 * S17ADC_XSEST = (2.0/pi) * (1.0/MAXREAL)  (rounded up)
 */
#define S17ADC_XSEST 2.23e-308

/*
 * S17AEC_XBIG = a value approximately given by 1/eps such
 * that sin(xbig) and cos(xbig) can be computed without an
 * execution error.
 */
#define S17AEC_XBIG 1.0e+16

/*
 * S17AFC_XBIG = a value approximately given by 1/eps such
 * that sin(xbig) and cos(xbig) can be computed without an
 * execution error.
 */
#define S17AFC_XBIG 1.0e+16

/*
 * S17AGC_XMAX <
 *        ((-ln(xunflo)-0.25*ln(xmax)-1.26)*1.5)**(2/3)
 */
#define S17AGC_XMAX 1.038e+2

/*
 * XRELPR=X02AJC
 * S17AGC_XMIN=-(1.5*xlim)**(2/3)
 * where xlim=min(1.0/XRELPR, xscmax-PIB4)
 * and xscmax is the maximum value of x for which sin(x)
 * and cos(x) can be computed without execution error.
 */
#define S17AGC_XMIN -5.6e+10

/*
 * XRELPR=X02AJC
 * S17AHC_XMIN=-(1.5*xlim)**(2/3)
 * where xlim=min(1.0/XRELPR, xscmax-PIB4)
 * and xscmax is the maximum value of x for which sin(x)
 * and cos(x) can be computed without execution error.
 */
#define S17AHC_XMIN -5.6e+10

/*
 * S17AHC_XMAX < (ln(xovflo)*1.5)**(2/3)
 */
#define S17AHC_XMAX 1.041e+2

/*
 * XRELPR=X02AJC
 * S17AJC_XMIN=-min((sqrt(pi)/XRELPR)**(4/7),
 *                  (1.5*(xscmax-PIB4))**(2/3))
 * where xscmax is the maximum value of x for which sin(x)
 * and cos(x) can be computed without execution error.
 */
#define S17AJC_XMIN -1.8e+9

/*
 * S17AJC_XMAX <
 *       ((-ln(xunflo)+0.25*ln(xmax)-1.26)*1.5)**(2/3)
 */
#define S17AJC_XMAX 1.041e+2

/*
 * XRELPR=X02AJC
 * S17AKC_XMIN = -min((sqrt(pi)/XRELPR)**(4/7),
 *                    (1.5*(xscmax-PIB4))**(2/3))
 * where xscmax is the maximum value of x for which sin(x)
 * and cos(x) can be computed without execution error.
 */
#define S17AKC_XMIN -1.8e+9

/*
 * S17AKC_XMAX < (ln(xovflo)*1.5)**(2/3)
 */
#define S17AKC_XMAX 1.041e+2

/*
 * S18ACC_XBIG = largest x: exp(-x)/sqrt(x) > minreal
 * (rounded down)
 */
#define S18ACC_XBIG 7.051e+2

/*
 * S18ADC_XBIG = largest x: exp(-x)/sqrt(x) > minreal
 * (rounded down)
 */
#define S18ADC_XBIG 7.051e+2

/*
 * S18ADC_XSEST = 1.0/maxreal  (rounded up)
 */
#define S18ADC_XSEST 2.23e-308

/*
 * S18AEC_XBIG = largest x: exp(x)/sqrt(x) < maxreal
 * (rounded down)
 */
#define S18AEC_XBIG 7.116e+2

/*
 * S18AEC_YBIG = exp(xbig)/sqrt(xbig)
 */
#define S18AEC_YBIG 1.7e+307

/*
 * S18AFC_XBIG = largest x: exp(x)/sqrt(x) < maxreal
 * (rounded down)
 */
#define S18AFC_XBIG 7.116e+2

/*
 * S18AFC_YBIG = exp(xbig)/sqrt(xbig)
 */
#define S18AFC_YBIG 1.7e+307

/*
 * S18CDC_XSEST = 1.0/maxreal  (rounded up)
 */
#define S18CDC_XSEST 2.23e-308

/*
 * S19ABC_XMIN = 2.0*sqrt(xunflo)
 */
#define S19ABC_XMIN 2.99e-154

/*
 * S19ACC_XMAX < sqrt(2.0)*(-ln(xunflo)-0.5*ln(xmax)+0.23)
 */
#define S19ACC_XMAX 9.9726e+2

/*
 * S19ACC_XMIN=2.0*sqrt(xunflo)
 */
#define S19ACC_XMIN 2.99e-154

/*
 * S19ADC_XMAX < sqrt(2.0)*(-ln(xunflo)-0.5*ln(xmax)+0.23)
 */
#define S19ADC_XMAX 9.9726e+2

/*
 * S19ADC_XMIN = 2.0*sqrt(xunflo)
 */
#define S19ADC_XMIN 2.99e-154

/*
 * S20ACC_XVSMAL = ((6.0/pi)*minreal)**(1.0/3.0)
 * (rounded up)
 */
#define S20ACC_XVSMAL 3.49e-103

/*
 * S20ACC_XVBIG = smallest of the following:
 * 1) base/(pi*macheps)
 * 2) 2.0*base**(t-1), where t is no. of digits in mantissa
 * 3) 2.0*(maxint+1)
 */
#define S20ACC_XVBIG 4.29496729e+9

/*
 * S20ADC_XVBIG = the smallest of the following:
 * 1) base/(pi*macheps)
 * 2) 2.0*base**(t-1), where t is no. of digits in mantissa
 * 3) 2.0*(maxint+1)
 */
#define S20ADC_XVBIG 4.29496729e+9

#endif  /* not NAGLS */
