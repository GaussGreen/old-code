/////////////////////////////////////////////////////////////////////////////
// Name:        ihg/xml/pricingreader.h
// Purpose:     reading pricing XML files
// Author:      ITO33
// Created:     2004/12/01
// RCS-ID:      $Id: pricingreader.h,v 1.8 2006/08/20 09:36:16 wang Exp $
// Copyright:   (c) 2004- Trilemma LLP
/////////////////////////////////////////////////////////////////////////////

/**
    @file ihg/xml/pricingreader.h
    @brief Classes for reading pricing XML-files generated by IHG.
 */

#ifndef _ITO33_IHG_XML_PRICINGREADER_H_
#define _ITO33_IHG_XML_PRICINGREADER_H_

#include "ito33/sharedptr.h"
#include "ito33/xml/reader.h"

namespace ito33
{

namespace finance
{
  class DerivativeVisitor;
  class ModelOutput;
}

namespace ihg
{

class TheoreticalModel;


namespace XML
{

/**
    This class reads pricing XML documents and provides easy access to the 
    data in them.

    Right now XML data can only be loaded from a file but we could also load it
    from a string if needed. Unfortunately, xmlwrapp doesn't take std::istream
    as input...
 */
class PricingReader : public ito33::XML::Reader
{
public:
  /**
    Load XML from the given file.

    If an error occurs while loading date, i.e. file is not found, couldn't be
    read or doesn't contain a valid XML document with the IHG roto tag, an
    exception is thrown.

    @param filename the name of the file to read XML from
   */
  PricingReader(const char *filename)
    : ito33::XML::Reader(filename)
  {
  }

  PricingReader(const char *data, size_t len)
    : ito33::XML::Reader(data, len)
  {
  }

  // default dtor OK


  /**
     Fill in the passed in ModelOutput object with the data from XML.

     @param output the object to fill in
     @return true if ok, false if output tag hasn't been found
   */
  bool ReadOutput(finance::ModelOutput& output) const;

  /**
     Fill in the passed in TheoreticalModel object with model parameters.

     @param pModel the object to fill in
   */
  void ReadTheoreticalModel(shared_ptr<TheoreticalModel>& pModel) const;


private:

  NO_COPY_CLASS(PricingReader);
};


} // namespace XML

} // namespace ihg

} // namespace ito33

#endif // _ITO33_IHG_XML_PRICINGREADER_H_
