/////////////////////////////////////////////////////////////////////////////
// Name:        ito33/finance/derivative_visitor.h
// Purpose:     Visitor for Derivative-derived classes
// Author:      Vadim Zeitlin
// Created:     2004-05-11
// RCS-ID:      $Id: derivative_visitor.h,v 1.29 2006/08/10 14:47:30 dave Exp $
// Copyright:   (c) 2004 - 2006 Trilemma LLP
/////////////////////////////////////////////////////////////////////////////

/**
    @file ito33/finance/derivative_visitor.h
    @brief Visitor class accepting different Derivative kinds.

    This is the central part of the implementation of the visitor pattern for
    the derivatives. To do something different depending on the exact type of
    a Derivative object you have to define a new class inheriting from this one
    and do whatever is required in its methods.
 */

#ifndef _ITO33_FINANCE_DERIVATIVE_VISITOR_H_
#define _ITO33_FINANCE_DERIVATIVE_VISITOR_H_

#include "ito33/exception.h"
#include "ito33/error.h"
#include "ito33/dlldecl.h"

extern const ito33::Error ITO33_NOT_IMPLEMENTED;

namespace ito33
{

namespace finance
{

class ITO33_DLLDECL AsianOption;
class ITO33_DLLDECL Option;
class ITO33_DLLDECL OneTouch;
class ITO33_DLLDECL FXOneTouch;
class ITO33_DLLDECL CDS;
class ITO33_DLLDECL ReferenceCDS;
class ITO33_DLLDECL EDS;
class ITO33_DLLDECL ParBond;
class ITO33_DLLDECL LogContract;
class ITO33_DLLDECL VarianceSwap;
class ITO33_DLLDECL GammaVarianceSwap;
class ITO33_DLLDECL OptionVarianceSwap;
class ITO33_DLLDECL ConditionalVarianceSwap;
class ITO33_DLLDECL VarianceSwaption;

class ITO33_DLLDECL Bond;
class ITO33_DLLDECL AttachedWarrantConvertibleBond;
class ITO33_DLLDECL ConvertibleBond;
class ITO33_DLLDECL GeneralizedPEPSLike;
class ITO33_DLLDECL PEPSLike;
class ITO33_DLLDECL PERCSLike;
class ITO33_DLLDECL Reset;
class ITO33_DLLDECL CBOption;

/**
    Derivatives visitor.

    An object of a class derived from this one must be passed by the user code
    to any functions which may access heterogeneous collections of Derivatives,
    e.g. XML::Reader in IHG currently.

    Using a visitor might be less usual than querying the data directly for
    but it allows us to not lose the type information about the derivatives
    and keep the code maintainable and extensible.
 */
class ITO33_DLLDECL DerivativeVisitor
{
public:
  
  /**
      Exception: all exceptions generated by DerivativeVisitor itself (as 
      opposed to the ones simply propagating upwards through Date ) are of
      this class.

      The DerivativeVisitor class may throw only the exceptions of this class.
   */
  class Exception : public ito33::Exception
  {
  public:
    /**
        Ctor for the Exception object.

        Use the standard EXCEPTION macro to create Exception objects, this
        frees you from having to type __FILE__, __LINE__ and __FUNCTION__
     */
    Exception(int errorCode,
         const char *message,
         const char *filename,
         size_t line,
         const char *function)
      : ito33::Exception(errorCode, message, filename, line, function)
      {
      }
  };

  /*
    Normally, this should be a pure virtual class. However, every time we 
    add a new derivative, all sepcific vistors would be broken. That is why
    we implement, by default, all OnXXX() functions by throwing exception.

    A derived class can avoid individual but same implementation for specific
    types by catching the exception and do common thing for these types.
  */
  
  /// Called for an Option
  virtual void OnOption(const Option&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED); 
  } 
  
  /// Called for a OneTouch
  virtual void OnOneTouch(const OneTouch&)
  {
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  } 

  /// Called for a FXOneTouch
  virtual void OnFXOneTouch(const FXOneTouch&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  } 

  /// Called for a CDS
  virtual void OnCDS(const CDS&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a ReferenceCDS
  virtual void OnReferenceCDS(const ReferenceCDS&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a ParBond
  virtual void OnParBond(const ParBond&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a EDS
  virtual void OnEDS(const EDS&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a log contract
  virtual void OnLogContract(const LogContract&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a Variance Swap
  virtual void OnVarianceSwap(const VarianceSwap&) 
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);    
  }

  /// Called for a GammaVariance Swap
  virtual void OnGammaVarianceSwap(const GammaVarianceSwap&) 
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);    
  }

    /// Called for a ConditionalVariance Swap
  virtual void OnConditionalVarianceSwap(const ConditionalVarianceSwap&) 
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);    
  }

    /// Called for an OptionVariance Swap
  virtual void OnOptionVarianceSwap(const OptionVarianceSwap&) 
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);    
  }

  /// Called for a Variance Swaption
  virtual void OnVarianceSwaption(const VarianceSwaption&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);    
  }

  /// Called for an Asian option
  virtual void OnAsianOption(const AsianOption&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a Bond
  virtual void OnBond(const Bond&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }
   
  /// Called for a ConvertibleBond
  virtual void OnConvertibleBond(const ConvertibleBond&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a CB with attached warrrant
  virtual 
  void OnAttachedWarrantConvertibleBond(const AttachedWarrantConvertibleBond&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a PEPS
  virtual void OnPEPSLike(const PEPSLike&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a GeneralizedPEPSLike
  virtual void OnGeneralizedPEPSLike(const GeneralizedPEPSLike&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a PERCS
  virtual void OnPERCSLike(const PERCSLike&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Called for a Reset
  virtual void OnReset(const Reset&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }
  
  /// Called for a CBOption
  virtual void OnCBOption(const CBOption&)
  { 
    throw EXCEPTION(ITO33_NOT_IMPLEMENTED);
  }

  /// Virtual dtor for any base class
  virtual ~DerivativeVisitor() { }
};

} // namespace finance

} // namespace ito33

#endif // #ifndef _ITO33_FINANCE_DERIVATIVE_VISITOR_H_
