/////////////////////////////////////////////////////////////////////////////
// Name:        ito33/xml/reader.h
// Purpose:     Base class for reading common part of ito33 XML files
// Created:     2005/04/19
// RCS-ID:      $Id: reader.h,v 1.6 2006/08/19 22:21:47 wang Exp $
// Copyright:   (c) 2005 -  Trilemma LLP
/////////////////////////////////////////////////////////////////////////////

/**
    @file ito33/xml/reader.h
    @brief Classes for reading common part of XML-files generated by ITO33.
 */

#ifndef _ITO33_XML_READER_H_
#define _ITO33_XML_READER_H_

#include "ito33/sharedptr.h"

namespace xml
{
  class node;
  class tree_parser;
}

namespace ito33
{

namespace finance
{
  class ITO33_DLLDECL SessionData;
  class ITO33_DLLDECL Derivative;
  class ITO33_DLLDECL TheoreticalModel;
  class ITO33_DLLDECL ModelOutput;
  class ITO33_DLLDECL DerivativeVisitor;
}

namespace XML
{

/**
   This class reads XML document and provides easy access to the data in it.

   Right now XML data can only be loaded from a file or a string.
   Unfortunately, xmlwrapp doesn't take std::istream as input...
 */
class Reader
{
public:
  
  /**
     Load XML from the given file.

     If an error occurs while loading date, i.e. file is not found, couldn't be
     read or doesn't contain a valid XML document with the IHG roto tag, an
     exception is thrown.

     @param filename the name of the file to read XML from
   */
  Reader(const char *filename); // throws
  
  /**
     Load XML from the first @a len bytes of given string.

     If an error occurs while loading date, i.e. the string doesn't contain a
     valid XML document with the IHG roto tag, an exception is thrown.

     @param data the name of the string to read xml from
     @param len bytes to read
   */
  Reader(const char *data, size_t len); // throws

  /**
     Destructor cleans up resources used for XML parsing.

     Destructor is virtual since this class is derived from.
   */
  virtual ~Reader();


  /**
     Create a SessionData object from the XML data.

     If any data needed for SessionData initialization is missing, an 
     exception is thrown.

     @sa GetSessionDataFromNode() in include/ito33/xml/finance/sessiondata.h.
 
     @return pointer to session data to fill in with information we read from
             node
   */
  shared_ptr<finance::SessionData> ReadSessionData() const; // throws

  /**
     Get the root pricing node.

     @return the root pricing node
   */
  virtual xml::node GetMainNode() const;

  /**
     Get the root node of the reader.

     @return the root node
   */
  const xml::node& GetRootNode() const;

  /**
     Be notified about all derivatives found in the XML document.

     For each subsection of the "<derivatives>" tag, the corresponding method
     of visitor object will be called.

     This method may throw if a DerivativeVisitor method throws.
   */
  void ReadDerivatives(finance::DerivativeVisitor& visitor) const;

  /**
     Read the first derivative found in the XML document. We don't care about 
     the type of the derivative.
   */
  void ReadDerivative(shared_ptr<finance::Derivative>& pDerivative) const;

  /**
     Fill in the passed in ModelOutput object with the data from XML.

     @param output the object to fill in
     @return true if ok, false if output tag hasn't been found
   */
  bool ReadOutput(finance::ModelOutput& output) const;

  /**
     Fill in the passed in TheoreticalModel object with model parameters.

     @param pModel the object to fill in
   */
  void ReadTheoreticalModel(shared_ptr<finance::TheoreticalModel>& pModel) const;


protected:

  /// parser
  xml::tree_parser *m_parser;
  

private:

  NO_COPY_CLASS(Reader);
};


} // namespace XML

} // namespace ito33

#endif // #ifndef _ITO33_XML_READER_H_
