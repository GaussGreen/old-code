/////////////////////////////////////////////////////////////////////////////
// Name:        ito33/gettext.h
// Purpose:     provides functions to work with message catalogs
// Author:      Vadim Zeitlin
// Created:     18.12.02
// RCS-ID:      $Id: gettext.h,v 1.5 2005/10/16 19:24:17 zeitlin Exp $
// Copyright:   (c) 2002 Trilemma LLP
/////////////////////////////////////////////////////////////////////////////

/**
    @file  ito33/gettext.h
    @brief Helpers for translating the text messages generated by the program.

    We follow the GNU gettext philosophy which can be described by a number of
    principles:

    - all the messages inside the program are in English
    - the messages to be translated must be marked with either
      TRANS() or TRANS_NOOP() macros and then extracted from sources
      and put into a text message catalog by running @c xgettext 
      with @c -kTRANS @c -kTRANS_NOOP @c -kTRANS_PLURAL:1,2 @c
      -kTRANS_PLURAL_NOOP:1,2 @c -kGetTranslation arguments
    - after translating these messages, the message catalog is compiled
      into binary form using @c msgfmt
    - during the program execution, the appropriate message catalog is
      located and the strings from it are used as translations
    - if the catalog wasn't found, the English strings are used
 */

#ifndef _ITO33_GETTEXT_H_
#define _ITO33_GETTEXT_H_

/**
    TRANS() is a macro which has dual purpose: it marks the string as a
    translateable one (for extraction by @c xgettext program) and also actually
    returns the strings translation during the program execution.

    This macro should be used around all strings which are can be shown to the
    user. Note that we have this macro only for "compatibility" with
    TRANS_NOOP() which has to be one and that the real work is done by
    GetTranslation() function.

    @param str the English string to lookup translation for
    @return the translated string or the original one if translation not found
 */
#define TRANS(str)  ito33::GetTranslation(str)

/**
    TRANS_PLURAL() is used for strings which have different single and plural
    form.

    If the string contains a number, it must often use different forms when the
    number is 1 and when it is not. This macro expands to either the single or
    plural form of the string depending on the @a num parameter.

    NOTE: <b>This is not currently implemented!</b>

    @param sng the single form of the string
    @param plr the plural form
    @param num the number choosing whether to use the single or plural form
 */
#define TRANS_PLURAL(sng, plr, num)   ErrorPluralNotImplemented

/**
    TRANS_NOOP() is the macro which must be used to only mark, but not really
    translate, the strings in the program code.

    To understand why it is needed, consider a static array of strings which
    should be translated you can't use TRANS() in the array initialization
    because functions can't be used to initialize constants, but if you don't
    do it, the strings won't be extracted by @c xgettext. So you should use
    TRANS_NOOP() which simply marks them for translation and thus ensures they
    are put in the message catalog and later use TRANS() or GetTranslation()
    directly to translate them in the code.

    @param str the string to be marked for extraction
 */
#define TRANS_NOOP(str) (str)

/**
    TRANS_PLURAL_NOOP() is a combination of TRANS_PLURAL() and TRANS_NOOP().

    This macro can be used to mark the single and plural form strings for
    extraction by @c xgettext without translating them. It expands into just
    "sng, plr" and so should be used for array initialization or for function
    arguments.

    @param sng the single form of the string
    @param plr the plural form
 */
#define TRANS_PLURAL_NOOP(sng, plr) (sng), (plr)

namespace ito33
{
/**
    This function returns the translation of the given string from the
    currently loaded message catalog.

    If no message catalog is loaded or if the translation is not found, the
    original string is returned.

    Note that the returned string should @b NOT be freed or deleted nor
    modified by the caller!

    @param str the English string to lookup translation for
    @return the translated string or the original one if translation not found
*/
const char *GetTranslation(const char *str);

}

#endif // _ITO33_GETTEXT_H_

