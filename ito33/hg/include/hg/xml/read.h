/////////////////////////////////////////////////////////////////////////////
// Name:        hg/xml/read.h
// Purpose:     reading HG XML files
// Created:     2005/04/15
// RCS-ID:      $Id: read.h,v 1.3 2006/08/19 23:46:52 wang Exp $
// Copyright:   (c) 2005 -  Trilemma LLP
/////////////////////////////////////////////////////////////////////////////

/**
    @file hg/xml/read.h
    @brief Classes for reading XML-files generated by HG.
 */

#ifndef _HG_XML_READ_H_
#define _HG_XML_READ_H_

#include "ito33/sharedptr.h"

namespace xml
{
  class node;
  class tree_parser;
}

namespace ito33
{

namespace finance
{
  class ITO33_DLLDECL SessionData;
}

namespace hg
{

namespace XML
{


/**
    This class reads XML document and provides easy access to the data in it.

    Right now XML data can only be loaded from a file or a string.
    Unfortunately, xmlwrapp doesn't take std::istream as input...
 */
class Reader
{
public:

  /**
     Load XML from the given file.
 
     If an error occurs while loading date, i.e. file is not found, couldn't be
     read or doesn't contain a valid XML document with the HG root tag, an
     exception is thrown.

     @param filename the name of the file to read XML from
   */
  Reader(const char *filename); // throws
  
  /**
     Load XML from the first @a len bytes of given string.

     If an error occurs while loading date, i.e. the string doesn't contain a
     valid XML document with the HG roto tag, an exception is thrown.

     @param filename the name of the file to read XML from
   */
  Reader(const char *data, size_t len); // throws

  /**
     Destructor cleans up resources used for XML parsing.
   */
  virtual ~Reader();


  /**
     Fill in the passed in SessionData object with the data from XML.

     If any data needed for SessionData initialization is missing, an 
     exception is thrown.

     @sa GetSessionDataFromNode() in include/ito33/xml/finance/sessiondata.h.

     @return pointer to session to fill in with information we read from node
   */
  shared_ptr<finance::SessionData> ReadSessionData() const; // throws


  /**
     Get the root HG node.

     @return the root HG node
   */
  virtual xml::node GetHGNode() const;

  
protected:


  /// parser
  xml::tree_parser *m_parser;
  
private:

  NO_COPY_CLASS(Reader);
};


} // namespace XML

} // namespace hg

} // namespace ito33

#endif // _HG_XML_READ_H_
