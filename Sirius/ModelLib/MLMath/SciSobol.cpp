/* file: SciSobol.h */
/* Sobol sequences up to d = 350 */

#include "stdafx.h"
#include "SciSobol.h"
#include "SciMClib.h"



#define MAXDIM 360
#define MAXBIT 30


// commenting out following line removes an important warning
#define PATENTWARNING  

void Sobol::SciSobolInit(
	int dimension,
	int skip,
	int leap
	)
{

	SciSobolSeqStruct *SS = &m_SciSobolSeqStruct;

    int j,k,l,n,im;
    long i,ipp;
    static long in;
    static unsigned long *iu[MAXBIT+1];
    static long mdeg[MAXDIM+1];
    static long ip[MAXDIM+1];
    static long g_mdeg[MAXDIM+1]={0,
	1,
	2,
	3,3,
	4,4,
	5,5,5,5,5,5,
	6,6,6,6,6,6,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
	9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
	9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
	10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
	10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
	10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
	12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
	12,12,12};
    static unsigned long g_ip[MAXDIM+1]={0,
	/* degree 1 */
	0,
	/* degree 2 */
	1,
	/* degree 3 */
	1, 2,
	/* degree 4 */
	1, 4,
	/* degree 5 */
	2, 4, 7, 11, 13, 14,
	/* degree 6 */
	1, 13, 16, 19, 22, 25,
	/* degree 7 */
	1, 4, 7, 8, 14, 19, 21, 28, 31, 32, 37, 41, 42, 50, 55, 56, 59, 62,
	/* degree 8 */
	14, 21, 22, 38, 47, 49, 50, 52, 56, 67, 70, 84, 97, 103, 115, 122,
	/* degree 9 */
	8, 13, 16, 22, 25, 44, 47, 52, 55, 59, 62, 67, 74, 81, 82, 87, 91,
	94, 103, 104, 109, 122, 124, 137, 138, 143, 145, 152, 157, 167, 173,
	176, 181, 182, 185, 191, 194, 199, 218, 220, 227, 229, 230, 234, 236,
	241, 244, 253,
	/* degree 10 */
	4, 13, 19, 22, 50, 55, 64,69, 98, 107, 115, 121, 127, 134, 140, 145,
	152, 158, 161, 171, 181, 194, 199, 203, 208, 227, 242, 251, 253, 265,
	266, 274, 283, 289,295, 301, 316, 319, 324, 346, 352, 361, 367, 382,
	395, 398, 400, 412, 419, 422, 426, 428, 433, 446, 454, 457, 472, 493,
	505, 508,
	/* degree 11 */
	2, 11, 21, 22, 35, 49, 50,
	56, 61, 70, 74, 79, 84, 88, 103, 104, 112, 115, 117, 122, 134, 137,
	146, 148, 157, 158, 162, 164, 168, 173, 185, 186, 191, 193, 199,
	213, 214, 220, 227, 236, 242, 251, 256, 259, 265, 266, 276, 292,
	304, 310, 316, 319, 322, 328, 334, 339, 341, 345, 346, 362, 367,
	372, 375, 376, 381, 385, 388, 392, 409, 415, 416, 421, 428, 431,
	434, 439, 446, 451, 453, 457, 458, 471, 475, 478, 484, 493, 494,
	499, 502, 517, 518, 524, 527, 555, 560, 565, 569, 578, 580, 587,
	589, 590, 601, 607, 611, 614, 617, 618, 625, 628, 635, 641, 647,
	654, 659, 662, 672, 675, 682, 684, 689, 695, 696, 713, 719, 724,
	733, 734, 740, 747, 749, 752, 755, 762, 770, 782, 784, 787, 789,
	793, 796, 803, 805, 810, 815, 824, 829, 830, 832, 841, 847, 849,
	861, 871, 878, 889, 892, 901, 908, 920, 923, 942, 949, 950, 954,
	961, 968, 971, 973, 979, 982, 986, 998, 1001, 1010, 1012,
	/* degree 12 */
	41, 52, 61, 62, 76, 104,
	117, 131, 143, 145, 157, 167, 171, 176, 181, 194, 217, 236, 239,
	262, 283, 286, 307};
    static unsigned long g_iv[MAXDIM*MAXBIT+1]={0,
	/*1*/
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
	/*2*/
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	1,3,1,3,1, 3,1,3,3,1, 3,1,3,1,3, 1,1,3,1,3,
	1,3,1,3,3, 1,3,1,3,1, 3,1,1,3,1, 3,1,3,1,3,
	/*3*/
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	1,5,7,7,5, 1,3,3,7,5, 5,7,7,1,3, 3,7,5,1,1,
	5,3,3,1,7, 5,1,3,3,7, 5,1,1,5,7, 7,5,1,3,3,
	/*4*/
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	1,15,11,5,3, 1,7,9,13,11, 1,3,7,9,5,  13,13,11,3,15,
	5,3,15,7,9,  13,9,1,11,7, 5,1,5,1,15, 11,5,3,1,7,9,
	/*5*/
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	1,17,13,7,15, 9,31,9,3,27,   15,29,21,23,19, 11,25,7,13,17,
	1,25,29,3,31, 11,5,23,27,19, 21,5,1,17,13,   7,15,9,31,9,
	/*6*/
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	1,51,61,43,51,  59,47,57,35,53, 19,51,61,37,33, 7,5,11,39,63,
	27,17,15,23,29, 3,21,13,31,25,  9,49,33,19,29,  11,19,27,15,25,
	/*7*/
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	33,115,41,79,17, 29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	1,85,67,49,125,  25,109,43,89,69,  113,47,55,97,3, 37,83,103,27,13,
	3,115,41,79,17,  29,119,75,73,105, 7,59,65,21,3,   113,61,89,45,107,
	/*8*/
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	1,255,79,147,141,  89,173,43,9,25,     115,97,19,97,197,    101,255,29,203,65,
	195,177,105,17,47, 169,109,149,15,213, 135,253,191,155,175, 63,47,7,23,39,
	/*9*/
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	1,257,465,439,177,  321,181,225,235,103, 411,233,59,353,329, 463,385,111,475,451,
	263,19,249,275,369, 393,167,333,473,469, 101,21,451,229,247, 297,403,497,61,361,
	/*10*/
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	1,771,721,1013,759, 835,949,113,929,615, 157,39,761,169,983,  657,647,581,505,833,
	139,147,203,81,337, 829,989,375,365,131, 215,733,451,447,177, 57,471,979,197,251,
	/*11*/
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599, 415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	1,1285,823,727,267,     833,471,1601,1341,913, 1725,2021,1905,375,893, 1599,415,605,819,975,
	915,1715,1223,1367,663, 629,525,469,981,1667,  1587,1251,451,481,721,  483,1209,1457,415,1435,
	/*12*/
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977,
	1,3855,4091,987,1839,     4033,2515,579,3863,977, 3463,2909,3379,1349,3739, 347,387,2881,2821,1873,
	1959,1929,2389,3251,1149, 243,3609,1131,1701,143, 1339,3497,2499,1571,983,  4021,1625,3217,1163,2977};
	/****************************************************************************************************/


/********** print warning about Columbia patent **********/
#ifdef PATENTWARNING
	int ok;
	if (dimension>=50) {
	printf("The parameters you have entered will generate a low discrepancy\n");
	printf("deterministic sequence with 50 or more dimensions.  This warning\n");
	printf("is printed because Columbia University claims that U.S. patent number\n");
	printf("5,940,810 may be violated when using computer-based calculations\n");
	printf("involving such sequences with at least 50 dimensions for applications\n");
	printf("involving buying, holding, and selling complex securities.\n");
	printf("Please consider this issue before continuing...\n\n");
	printf("Press 0 to quit or 1 to continue  ");
	scanf("%d",&ok);
	if (ok==0) exit(0);
	}
#endif
/**********************************************************/

	SS->counter = 0;
	if(leap>=1){SS->leap = leap;}
	else{SS->leap = 1;}
	SS->dimension = dimension;
	in = 0;
	SS->fac = 0.0;
	SS->iv = new unsigned long[MAXDIM*MAXBIT+1];
	SS->ix = new unsigned long[MAXDIM+1];
	for (j=0; j<=MAXDIM;j++) {
		mdeg[j]=g_mdeg[j];
		SS->ix[j]=0;
	}
	for (j=0; j<=MAXBIT;j++) iu[j]=0;
	for (j=0; j<=MAXDIM;j++) ip[j]=g_ip[j];
	for (j=0; j<=MAXDIM*MAXBIT;j++) SS->iv[j]=g_iv[j];

	for (j=1,k=0;j<=MAXBIT;j++,k+=MAXDIM) iu[j]=&SS->iv[k];
	for (k=1;k<=MAXDIM;k++){
		for (j=1;j<=mdeg[k];j++) iu[j][k] <<= (MAXBIT-j);
		for (j=mdeg[k]+1;j<=MAXBIT;j++){
			ipp=ip[k];
			i=iu[j-mdeg[k]][k];
			i ^=(i >> mdeg[k]);
			for (l=mdeg[k]-1; l>=1;l--){
				if (ipp & 1) i ^=iu[j-l][k];
				ipp>>=1;
			}
		iu[j][k]=i;
		}
		SS->fac=1.0/(1L << MAXBIT);
		SS->counter=0;
	}

	/* Loop over ix skip times.*/
	for (l=1; l<=skip; l++){
		n=SS->dimension;
		im=SS->counter;
			for (j=1; j<=MAXBIT; j++){
				if (!(im & 1)) break;
				im >>=1;
			}
			if(j > MAXBIT) printf("Error in Sobol Sequences\n");
			im=(j-1)*MAXDIM;
			for (k=1;k<=n; k++) {
				SS->ix[k] ^=SS->iv[im+k];
			}
		SS->counter++;
	}
	return;
}



void Sobol::SciSobolNext(
						double *x,
						void* vp,
						double (*DISTfunc)(double x,void* vp))
{
	SciSobolSeqStruct *SS = &m_SciSobolSeqStruct;

	/* This routine, SciSobolNext, is based on the routine sobseq from 
	the book "Numerical recipes in C" (Cambridge University Press), Copyright (C)
	1986-1992 by Numerical Recipes Software. Used by permission. Use 
	of this routine other than as an integral part of SciMC requires 
	an additional license from Numerical Recipes Software. Further
	distribution in any form is prohibited */

	int n,im,j,k,i,leap;
	n=SS->dimension;
	leap=SS->leap;
	for (i=1;i<=leap;i++){
		im=SS->counter;
		for (j=1; j<=MAXBIT; j++){
			if (!(im & 1)) break;
			im >>=1;
		}
		if(j > MAXBIT) printf("Error in Sobol Sequences\n");
		im=(j-1)*MAXDIM;
		for (k=1;k<=n; k++) {
			SS->ix[k] ^=SS->iv[im+k];
		}
		SS->counter++;
	}
	for(k=1; k<=n; k++){
		x[k] = SS->ix[k]*SS->fac;
		x[k] = DISTfunc(x[k],vp);
	}
	return;
}


void Sobol::SciSobolFree()
{
	SciSobolSeqStruct *SS = &m_SciSobolSeqStruct;
	delete [] SS->iv;
	delete [] SS->ix ;
}

double DISTfunc(double x,void* vp)
{
	 Sobol* s = (Sobol*)vp;
	 return randNormICNCore(x);
}


void Sobol::generateRandoms(CVector& randoms,int ipath=0)
{
	SciSobolNext(randoms.getPtr()-1,this,DISTfunc);
}

/*void Sobol::generateRandoms(GVector < CVector > & randoms,int ipath=0)
{
	SciSobolNext(m_rand.getPtr()-1,this,DISTfunc);

	int k = 0;
	for ( int i = 0 ; i < randoms.getsize(); i++ )
	{
		for ( int j = 0 ; j < randoms[i].getsize(); j++ )
		{
			randoms[i][j] = m_rand[k];
			k++;
		}
	}
}
*/

double Sobol::generateRandom()
{
	double x=0;
	SciSobolNext(&x,this,DISTfunc);
	return x;
}


void Sobol::initialize(int dimension,int skip,int leap,int numberScenariosToBeStored,int numberRandomsPerScenario)
{
	m_dimension = dimension;
//	dimension++;
	SciSobolInit(dimension,skip,leap);
	long dummy=-123;
	randomGenerator::initialize(dummy,numberScenariosToBeStored,numberRandomsPerScenario);
	m_rand.resize(dimension);
}

Sobol::~Sobol()
{
	SciSobolFree();
}

Sobol::Sobol(int dimension,int skip,int leap,int numberScenariosToBeStored,int numberRandomsPerScenario)
{
	initialize(dimension,skip,leap,numberScenariosToBeStored,numberRandomsPerScenario);
}



#undef max
#undef min
#undef MAXDIM 
#undef MAXBIT 

