/**
 *
 *
 */

#include "edginc/config.hpp"
#include "edginc/GenericScalarOneSidedShift.hpp"
#include "edginc/CurrencyBasisRhoParallelTweak.hpp"

DRLIB_BEGIN_NAMESPACE

/**
 * Calculates derivative of instrument price w.r.t. bulk shifts in
 * Currency Basis spread curve
 *
 * The output generated by this sensitivity is:
 * <DL>
 * <DT>CCY_BASIS_RHO_PARALLEL
 * <DD>Change in price when currency basis spreads are shifted up by 1bp
 * </DL>
 *
 * The derivative is reported in basis points units, i.e. the value reported is 
 * 10000 times smaller than the actual partial derivative.  This is implemented 
 * by setting SENSITIVITY_UNIT to 1e-4: see GenericScalarOneSidedShift::SENSITIVITY_UNIT.
 */

typedef GenericScalarOneSidedShift<CurrencyBasisRhoParallelTweak>
    CurrencyBasisRhoParallel;

template<> CClassConstSP const CurrencyBasisRhoParallel::TYPE =
    CClass::registerClassLoadMethod("CurrencyBasisRhoParallel",
                                    typeid(CurrencyBasisRhoParallel),
                                    CurrencyBasisRhoParallel::load);

template<> const string CurrencyBasisRhoParallel::NAME = "CCY_BASIS_RHO_PARALLEL";

const double ONE_BASIS_POINT = 0.0001;
template<> const double CurrencyBasisRhoParallel::DEFAULT_SHIFT = ONE_BASIS_POINT;
template<> const double CurrencyBasisRhoParallel::SENSITIVITY_UNIT = ONE_BASIS_POINT;


/**
 * Included in RiskMgrLib::linkInClasses() to force linkage into the 
 Windows exe.
 */
bool CurrencyBasisRhoParallelLinkIn() {
    return CurrencyBasisRhoParallel::TYPE != NULL;
}

DRLIB_END_NAMESPACE
