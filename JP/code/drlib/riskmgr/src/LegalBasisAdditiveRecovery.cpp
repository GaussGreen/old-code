/**
 *
 */

#include "edginc/config.hpp"
#include "edginc/GenericScalarOneSidedShift.hpp"
#include "edginc/LegalBasisAdditiveRecoveryTweak.hpp"

DRLIB_BEGIN_NAMESPACE


/**
 * Calculates derivative of instrument price w.r.t. shifts in the additive
 * recovery coefficient of the Legal Basis adjustment done to the CDSParSpreadCurve
 *
 * The output generated by this sensitivity is:
 * <DL>
 * <DT>LEGAL_BASIS_ADDITIVE_RECOVERY
 * <DD>Change in price when the additive recovery coefficient of the Legal Basis adjustment is shifted up by 10%
 * </DL>
 *
 * The derivative is reported in 10% units, i.e. the value reported is 
 * 10 times smaller than the actual partial derivative.  This is implemented 
 * by setting SENSITIVITY_UNIT to 0.1: see GenericScalarOneSidedShift::SENSITIVITY_UNIT.
 */

typedef GenericScalarOneSidedShift<LegalBasisAdditiveRecoveryTweak>
    LegalBasisAdditiveRecovery;

template<> CClassConstSP const LegalBasisAdditiveRecovery::TYPE =
    CClass::registerClassLoadMethod("LegalBasisAdditiveRecovery",
                                    typeid(LegalBasisAdditiveRecovery),
                                    LegalBasisAdditiveRecovery::load);

template<> const string LegalBasisAdditiveRecovery::NAME = "LEGAL_BASIS_ADDITIVE_RECOVERY";

template<> const double LegalBasisAdditiveRecovery::DEFAULT_SHIFT = (-0.1);  // Requirement: -10%
template<> const double LegalBasisAdditiveRecovery::SENSITIVITY_UNIT = 0.1;  // Requirement: 10%


/**
 * Included in RiskMgrLib::linkInClasses() to force linkage into the Windows 
 exe.
 */
bool LegalBasisAdditiveRecoveryLinkIn() {
    return LegalBasisAdditiveRecovery::TYPE != NULL;
}

DRLIB_END_NAMESPACE
