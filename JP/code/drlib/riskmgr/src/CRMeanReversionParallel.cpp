/**
 *
 *
 */

#include "edginc/config.hpp"
#include "edginc/DefaultConstructor.hpp"
#include "edginc/GenericSensitivityFactory.hpp"
#include "edginc/IResultsFunction.hpp"
#include "edginc/Additive.hpp"
#include "edginc/RiskProperty.hpp"
#include "edginc/IScalarDerivative.hpp"
#include "edginc/ScalarRiskPropertySensitivity.hpp"
#include "edginc/CRMeanReversionParallelProperty.hpp"

DRLIB_BEGIN_NAMESPACE


/**
 * Calculates derivative of instrument price w.r.t. bulk shifts in
 * the mean reversion
 *
 * The output generated by this sensitivity is:
 * <DL>
 * <DT>CR_MEAN_REVERSION_PARALLEL 
 * <DD>Change in price when the mean reversion is shifted up by 1bp
 * </DL>
 *
 * The derivative is reported in 20%-units, i.e. the value reported is 
 * 5 times smaller than the actual partial derivative.
 */

class CRMeanReversionParallel: public ScalarRiskPropertySensitivity,
                               public virtual Additive {

    static void load(CClassSP& clazz) {
        clazz->setPublic();
        REGISTER(CRMeanReversionParallel, clazz);
        IMPLEMENTS(Additive);
        SUPERCLASS(ScalarRiskPropertySensitivity);
        EMPTY_SHELL_METHOD(&DefaultConstructor<CRMeanReversionParallel>::iObject);
        SensitivityFactory::addSens(NAME,
                                    new GenericSensitivityFactory<CRMeanReversionParallel>(), 
                                    new CRMeanReversionParallel(DEFAULT_SHIFT),
                                    ITweakableWithRespectTo<CRMeanReversionParallelProperty>::TYPE);
    }

    ScalarRiskPropertySensitivity::Deriv deriv() const {
        return Deriv(IResultsFunction::price(),
                     RiskProperty<CRMeanReversionParallelProperty>::SP(),
                     IScalarDerivative::oneSided(),
                     0.2); // Requirement: 20%
    }

public:

    static CClassConstSP const TYPE;

    static const double DEFAULT_SHIFT;
    static const string NAME;

    CRMeanReversionParallel(double shiftSize = DEFAULT_SHIFT):
        ScalarRiskPropertySensitivity(TYPE, NAME, shiftSize)
    {}
};

const string CRMeanReversionParallel::NAME = "CR_MEAN_REVERSION_PARALLEL";
const double CRMeanReversionParallel::DEFAULT_SHIFT = (-0.2);//Requirement: -20%

CClassConstSP const CRMeanReversionParallel::TYPE = CClass::registerClassLoadMethod(
    "CRMeanReversionParallel", typeid(CRMeanReversionParallel), load);

/**
   Included in RiskMgrLib::linkInClasses() to force linkage into the Windows
   exe.
 */
bool CRMeanReversionParallelLinkIn() {
    return CRMeanReversionParallel::TYPE != NULL;
}

DRLIB_END_NAMESPACE
