/**
 * @file ParSpreadRhoParallelTwoSided.cpp
 */

#include "edginc/config.hpp"
#include "edginc/config.hpp"
#include "edginc/GenericScalarTwoSidedShift.hpp"
#include "edginc/ParSpreadParallel.hpp"
#include "edginc/CreditTweak.hpp"

DRLIB_BEGIN_NAMESPACE

template <> const string GenericScalarTwoSidedShift<ParSpreadParallel, false, true>::NAME = "PAR_SPREAD_RHO_PARALLEL_2SIDED";
template <> const string GenericScalarTwoSidedShift<ParSpreadParallel, false, true>::SECOND_ORDER_NAME = "PAR_SPREAD_RHO_PARALLEL_GAMMA";
const double ONE_BASIS_POINT = 0.0001;
template <> const double GenericScalarTwoSidedShift<ParSpreadParallel, false, true>::DEFAULT_SHIFT = ONE_BASIS_POINT;
template <> const double GenericScalarTwoSidedShift<ParSpreadParallel, false, true>::SENSITIVITY_UNIT = ONE_BASIS_POINT;
template <> CClassConstSP const GenericScalarTwoSidedShift<ParSpreadParallel, false, true>::TYPE = CClass::registerClassLoadMethod(
    "GenericScalarTwoSidedShift<ParSpreadParallel, false, true>", typeid(GenericScalarTwoSidedShift<ParSpreadParallel, false, true>), load);

/**
 * Calculates first and second derivatives of instrument price w.r.t. bulk
 * shifts in ParSpreadCurve
 *
 * The outputs generated by this sensitivity are:
 *
 * <DL>
 * <DT>PAR_SPREAD_RHO_PARALLEL_2SIDED
 * <DD>Change in price per 1bp shift in par spreads (evaluated "two-sided")
 * <DT>PAR_SPREAD_RHO_PARALLEL_GAMMA
 * <DD>Change in rho (expressed in bp terms!) when par spreads are shifted up
 *     by 1bp
 * </DL>
 *
 * The only unusual feature is that the derivatives are reported in basis point
 * units, i.e. PAR_SPREAD_RHO_PARALLEL_2SIDED is 10000 times smaller than the
 * actual partial derivative and PAR_SPREAD_RHO_PARALLEL_GAMMA is 100M times
 * smaller.  This is implemented by setting SENSITIVITY_UNIT to 1e-4: see
 * GenericScalarTwoSidedShift::SENSITIVITY_UNIT.
 *
 * See GenericScalarTwoSidedShift for info about templatised implementation.
 *
 * Similar sensitivities include ParSpreadRhoParallel, ParSpreadRhoPointwise,
 * ParSpreadRhoPointwiseTwoSided.
 */

class ParSpreadRhoParallelTwoSided: public GenericScalarTwoSidedShift<ParSpreadParallel,
                                                                      false, true>,
                                    virtual public CreditTweak {

    static IObject* defaultParSpreadRhoParallel() {
        return new ParSpreadRhoParallelTwoSided(DEFAULT_SHIFT);
    }

    typedef GenericScalarTwoSidedShift<ParSpreadParallel, false, true> Super;

    static void load(CClassSP& clazz) {
        clazz->setPublic();
        REGISTER(ParSpreadRhoParallelTwoSided, clazz);
        SUPERCLASS(Super);
        EMPTY_SHELL_METHOD(defaultParSpreadRhoParallel);
    }

public:

    static CClassConstSP const TYPE;

    ParSpreadRhoParallelTwoSided(double shiftSize): Super(TYPE, NAME, shiftSize) {}
};


CClassConstSP const ParSpreadRhoParallelTwoSided::TYPE = CClass::registerClassLoadMethod(
    "ParSpreadRhoParallelTwoSided", typeid(ParSpreadRhoParallelTwoSided), load);



/**
 * Included in RiskMgrLib::linkInClasses() to force ParSpreadRhoParallelTwoSided
 * to get linked into the Windows exe.
 */

bool ParSpreadRhoParallelTwoSidedLinkIn() {
    return ParSpreadRhoParallelTwoSided::TYPE != NULL;
}

DRLIB_END_NAMESPACE
