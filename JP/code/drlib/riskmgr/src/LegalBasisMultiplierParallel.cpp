/**
 *
 */

#include "edginc/config.hpp"
#include "edginc/GenericScalarOneSidedShift.hpp"
#include "edginc/LegalBasisMultiplierParallelTweak.hpp"

DRLIB_BEGIN_NAMESPACE


/**
 * Calculates derivative of instrument price w.r.t. shifts in the multiplier
 * coefficients of the Legal Basis adjustment done to the CDSParSpreadCurve
 *
 * The output generated by this sensitivity is:
 * <DL>
 * <DT>LEGAL_BASIS_MULTIPLIER_PARALLEL
 * <DD>Change in price when the multiplier coefficients of the Legal Basis adjustment are shifted up by 1%
 * </DL>
 *
 * The derivative is reported in 1% units, i.e. the value reported is 
 * 100 times smaller than the actual partial derivative.  This is implemented 
 * by setting SENSITIVITY_UNIT to 0.01: see GenericScalarOneSidedShift::SENSITIVITY_UNIT.
 */

typedef GenericScalarOneSidedShift<LegalBasisMultiplierParallelTweak>
    LegalBasisMultiplierParallel;

template<> CClassConstSP const LegalBasisMultiplierParallel::TYPE =
    CClass::registerClassLoadMethod("LegalBasisMultiplierParallel",
                                    typeid(LegalBasisMultiplierParallel),
                                    LegalBasisMultiplierParallel::load);

template<> const string LegalBasisMultiplierParallel::NAME = "LEGAL_BASIS_MULTIPLIER_PARALLEL";
template<> const double LegalBasisMultiplierParallel::DEFAULT_SHIFT = 0.01;    // Requirement: 1%
template<> const double LegalBasisMultiplierParallel::SENSITIVITY_UNIT = 0.01; // Requirement: 1%


/**
 * Included in RiskMgrLib::linkInClasses() to force linkage into the 
 Windows exe.
 */
bool LegalBasisMultiplierParallelLinkIn() {
    return LegalBasisMultiplierParallel::TYPE != NULL;
}

DRLIB_END_NAMESPACE
